### YamlMime:XRefMap
sorted: true
references:
- uid: Quickie.Apis
  name: Quickie.Apis
  href: api/Quickie.Apis.html
  commentId: N:Quickie.Apis
  fullName: Quickie.Apis
  nameWithType: Quickie.Apis
- uid: Quickie.Apis.Crud
  name: Quickie.Apis.Crud
  href: api/Quickie.Apis.Crud.html
  commentId: N:Quickie.Apis.Crud
  fullName: Quickie.Apis.Crud
  nameWithType: Quickie.Apis.Crud
- uid: Quickie.Apis.Crud.CrudController`3
  name: CrudController<TViewModel, TRequestHandler, TIdType>
  href: api/Quickie.Apis.Crud.CrudController-3.html
  commentId: T:Quickie.Apis.Crud.CrudController`3
  name.vb: CrudController(Of TViewModel, TRequestHandler, TIdType)
  fullName: Quickie.Apis.Crud.CrudController<TViewModel, TRequestHandler, TIdType>
  fullName.vb: Quickie.Apis.Crud.CrudController(Of TViewModel, TRequestHandler, TIdType)
  nameWithType: CrudController<TViewModel, TRequestHandler, TIdType>
  nameWithType.vb: CrudController(Of TViewModel, TRequestHandler, TIdType)
- uid: Quickie.Apis.Crud.CrudController`3.#ctor(`1)
  name: CrudController(TRequestHandler)
  href: api/Quickie.Apis.Crud.CrudController-3.html#Quickie_Apis_Crud_CrudController_3__ctor__1_
  commentId: M:Quickie.Apis.Crud.CrudController`3.#ctor(`1)
  name.vb: New(TRequestHandler)
  fullName: Quickie.Apis.Crud.CrudController<TViewModel, TRequestHandler, TIdType>.CrudController(TRequestHandler)
  fullName.vb: Quickie.Apis.Crud.CrudController(Of TViewModel, TRequestHandler, TIdType).New(TRequestHandler)
  nameWithType: CrudController<TViewModel, TRequestHandler, TIdType>.CrudController(TRequestHandler)
  nameWithType.vb: CrudController(Of TViewModel, TRequestHandler, TIdType).New(TRequestHandler)
- uid: Quickie.Apis.Crud.CrudController`3.#ctor*
  name: CrudController
  href: api/Quickie.Apis.Crud.CrudController-3.html#Quickie_Apis_Crud_CrudController_3__ctor_
  commentId: Overload:Quickie.Apis.Crud.CrudController`3.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Apis.Crud.CrudController<TViewModel, TRequestHandler, TIdType>.CrudController
  fullName.vb: Quickie.Apis.Crud.CrudController(Of TViewModel, TRequestHandler, TIdType).New
  nameWithType: CrudController<TViewModel, TRequestHandler, TIdType>.CrudController
  nameWithType.vb: CrudController(Of TViewModel, TRequestHandler, TIdType).New
- uid: Quickie.Apis.Crud.CrudController`3.CreateAsync(System.String,`0,System.Threading.CancellationToken)
  name: CreateAsync(string?, TViewModel, CancellationToken)
  href: api/Quickie.Apis.Crud.CrudController-3.html#Quickie_Apis_Crud_CrudController_3_CreateAsync_System_String__0_System_Threading_CancellationToken_
  commentId: M:Quickie.Apis.Crud.CrudController`3.CreateAsync(System.String,`0,System.Threading.CancellationToken)
  name.vb: CreateAsync(String, TViewModel, CancellationToken)
  fullName: Quickie.Apis.Crud.CrudController<TViewModel, TRequestHandler, TIdType>.CreateAsync(string?, TViewModel, System.Threading.CancellationToken)
  fullName.vb: Quickie.Apis.Crud.CrudController(Of TViewModel, TRequestHandler, TIdType).CreateAsync(String, TViewModel, System.Threading.CancellationToken)
  nameWithType: CrudController<TViewModel, TRequestHandler, TIdType>.CreateAsync(string?, TViewModel, CancellationToken)
  nameWithType.vb: CrudController(Of TViewModel, TRequestHandler, TIdType).CreateAsync(String, TViewModel, CancellationToken)
- uid: Quickie.Apis.Crud.CrudController`3.CreateAsync*
  name: CreateAsync
  href: api/Quickie.Apis.Crud.CrudController-3.html#Quickie_Apis_Crud_CrudController_3_CreateAsync_
  commentId: Overload:Quickie.Apis.Crud.CrudController`3.CreateAsync
  isSpec: "True"
  fullName: Quickie.Apis.Crud.CrudController<TViewModel, TRequestHandler, TIdType>.CreateAsync
  fullName.vb: Quickie.Apis.Crud.CrudController(Of TViewModel, TRequestHandler, TIdType).CreateAsync
  nameWithType: CrudController<TViewModel, TRequestHandler, TIdType>.CreateAsync
  nameWithType.vb: CrudController(Of TViewModel, TRequestHandler, TIdType).CreateAsync
- uid: Quickie.Apis.Crud.CrudController`3.DeleteAsync(`2,System.Threading.CancellationToken)
  name: DeleteAsync(TIdType, CancellationToken)
  href: api/Quickie.Apis.Crud.CrudController-3.html#Quickie_Apis_Crud_CrudController_3_DeleteAsync__2_System_Threading_CancellationToken_
  commentId: M:Quickie.Apis.Crud.CrudController`3.DeleteAsync(`2,System.Threading.CancellationToken)
  fullName: Quickie.Apis.Crud.CrudController<TViewModel, TRequestHandler, TIdType>.DeleteAsync(TIdType, System.Threading.CancellationToken)
  fullName.vb: Quickie.Apis.Crud.CrudController(Of TViewModel, TRequestHandler, TIdType).DeleteAsync(TIdType, System.Threading.CancellationToken)
  nameWithType: CrudController<TViewModel, TRequestHandler, TIdType>.DeleteAsync(TIdType, CancellationToken)
  nameWithType.vb: CrudController(Of TViewModel, TRequestHandler, TIdType).DeleteAsync(TIdType, CancellationToken)
- uid: Quickie.Apis.Crud.CrudController`3.DeleteAsync*
  name: DeleteAsync
  href: api/Quickie.Apis.Crud.CrudController-3.html#Quickie_Apis_Crud_CrudController_3_DeleteAsync_
  commentId: Overload:Quickie.Apis.Crud.CrudController`3.DeleteAsync
  isSpec: "True"
  fullName: Quickie.Apis.Crud.CrudController<TViewModel, TRequestHandler, TIdType>.DeleteAsync
  fullName.vb: Quickie.Apis.Crud.CrudController(Of TViewModel, TRequestHandler, TIdType).DeleteAsync
  nameWithType: CrudController<TViewModel, TRequestHandler, TIdType>.DeleteAsync
  nameWithType.vb: CrudController(Of TViewModel, TRequestHandler, TIdType).DeleteAsync
- uid: Quickie.Apis.Crud.CrudController`3.GetByIdAsync(`2,System.Threading.CancellationToken)
  name: GetByIdAsync(TIdType, CancellationToken)
  href: api/Quickie.Apis.Crud.CrudController-3.html#Quickie_Apis_Crud_CrudController_3_GetByIdAsync__2_System_Threading_CancellationToken_
  commentId: M:Quickie.Apis.Crud.CrudController`3.GetByIdAsync(`2,System.Threading.CancellationToken)
  fullName: Quickie.Apis.Crud.CrudController<TViewModel, TRequestHandler, TIdType>.GetByIdAsync(TIdType, System.Threading.CancellationToken)
  fullName.vb: Quickie.Apis.Crud.CrudController(Of TViewModel, TRequestHandler, TIdType).GetByIdAsync(TIdType, System.Threading.CancellationToken)
  nameWithType: CrudController<TViewModel, TRequestHandler, TIdType>.GetByIdAsync(TIdType, CancellationToken)
  nameWithType.vb: CrudController(Of TViewModel, TRequestHandler, TIdType).GetByIdAsync(TIdType, CancellationToken)
- uid: Quickie.Apis.Crud.CrudController`3.GetByIdAsync*
  name: GetByIdAsync
  href: api/Quickie.Apis.Crud.CrudController-3.html#Quickie_Apis_Crud_CrudController_3_GetByIdAsync_
  commentId: Overload:Quickie.Apis.Crud.CrudController`3.GetByIdAsync
  isSpec: "True"
  fullName: Quickie.Apis.Crud.CrudController<TViewModel, TRequestHandler, TIdType>.GetByIdAsync
  fullName.vb: Quickie.Apis.Crud.CrudController(Of TViewModel, TRequestHandler, TIdType).GetByIdAsync
  nameWithType: CrudController<TViewModel, TRequestHandler, TIdType>.GetByIdAsync
  nameWithType.vb: CrudController(Of TViewModel, TRequestHandler, TIdType).GetByIdAsync
- uid: Quickie.Apis.Crud.CrudController`3.UpdateAsync(`2,`0,System.Threading.CancellationToken)
  name: UpdateAsync(TIdType, TViewModel, CancellationToken)
  href: api/Quickie.Apis.Crud.CrudController-3.html#Quickie_Apis_Crud_CrudController_3_UpdateAsync__2__0_System_Threading_CancellationToken_
  commentId: M:Quickie.Apis.Crud.CrudController`3.UpdateAsync(`2,`0,System.Threading.CancellationToken)
  fullName: Quickie.Apis.Crud.CrudController<TViewModel, TRequestHandler, TIdType>.UpdateAsync(TIdType, TViewModel, System.Threading.CancellationToken)
  fullName.vb: Quickie.Apis.Crud.CrudController(Of TViewModel, TRequestHandler, TIdType).UpdateAsync(TIdType, TViewModel, System.Threading.CancellationToken)
  nameWithType: CrudController<TViewModel, TRequestHandler, TIdType>.UpdateAsync(TIdType, TViewModel, CancellationToken)
  nameWithType.vb: CrudController(Of TViewModel, TRequestHandler, TIdType).UpdateAsync(TIdType, TViewModel, CancellationToken)
- uid: Quickie.Apis.Crud.CrudController`3.UpdateAsync*
  name: UpdateAsync
  href: api/Quickie.Apis.Crud.CrudController-3.html#Quickie_Apis_Crud_CrudController_3_UpdateAsync_
  commentId: Overload:Quickie.Apis.Crud.CrudController`3.UpdateAsync
  isSpec: "True"
  fullName: Quickie.Apis.Crud.CrudController<TViewModel, TRequestHandler, TIdType>.UpdateAsync
  fullName.vb: Quickie.Apis.Crud.CrudController(Of TViewModel, TRequestHandler, TIdType).UpdateAsync
  nameWithType: CrudController<TViewModel, TRequestHandler, TIdType>.UpdateAsync
  nameWithType.vb: CrudController(Of TViewModel, TRequestHandler, TIdType).UpdateAsync
- uid: Quickie.Apis.Crud.CrudForCollectionController`3
  name: CrudForCollectionController<TViewModel, TRequestHandler, TIdType>
  href: api/Quickie.Apis.Crud.CrudForCollectionController-3.html
  commentId: T:Quickie.Apis.Crud.CrudForCollectionController`3
  name.vb: CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType)
  fullName: Quickie.Apis.Crud.CrudForCollectionController<TViewModel, TRequestHandler, TIdType>
  fullName.vb: Quickie.Apis.Crud.CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType)
  nameWithType: CrudForCollectionController<TViewModel, TRequestHandler, TIdType>
  nameWithType.vb: CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType)
- uid: Quickie.Apis.Crud.CrudForCollectionController`3.#ctor(`1)
  name: CrudForCollectionController(TRequestHandler)
  href: api/Quickie.Apis.Crud.CrudForCollectionController-3.html#Quickie_Apis_Crud_CrudForCollectionController_3__ctor__1_
  commentId: M:Quickie.Apis.Crud.CrudForCollectionController`3.#ctor(`1)
  name.vb: New(TRequestHandler)
  fullName: Quickie.Apis.Crud.CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.CrudForCollectionController(TRequestHandler)
  fullName.vb: Quickie.Apis.Crud.CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).New(TRequestHandler)
  nameWithType: CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.CrudForCollectionController(TRequestHandler)
  nameWithType.vb: CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).New(TRequestHandler)
- uid: Quickie.Apis.Crud.CrudForCollectionController`3.#ctor*
  name: CrudForCollectionController
  href: api/Quickie.Apis.Crud.CrudForCollectionController-3.html#Quickie_Apis_Crud_CrudForCollectionController_3__ctor_
  commentId: Overload:Quickie.Apis.Crud.CrudForCollectionController`3.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Apis.Crud.CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.CrudForCollectionController
  fullName.vb: Quickie.Apis.Crud.CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).New
  nameWithType: CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.CrudForCollectionController
  nameWithType.vb: CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).New
- uid: Quickie.Apis.Crud.CrudForCollectionController`3.CountAsync(System.Threading.CancellationToken)
  name: CountAsync(CancellationToken)
  href: api/Quickie.Apis.Crud.CrudForCollectionController-3.html#Quickie_Apis_Crud_CrudForCollectionController_3_CountAsync_System_Threading_CancellationToken_
  commentId: M:Quickie.Apis.Crud.CrudForCollectionController`3.CountAsync(System.Threading.CancellationToken)
  fullName: Quickie.Apis.Crud.CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.CountAsync(System.Threading.CancellationToken)
  fullName.vb: Quickie.Apis.Crud.CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).CountAsync(System.Threading.CancellationToken)
  nameWithType: CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.CountAsync(CancellationToken)
  nameWithType.vb: CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).CountAsync(CancellationToken)
- uid: Quickie.Apis.Crud.CrudForCollectionController`3.CountAsync*
  name: CountAsync
  href: api/Quickie.Apis.Crud.CrudForCollectionController-3.html#Quickie_Apis_Crud_CrudForCollectionController_3_CountAsync_
  commentId: Overload:Quickie.Apis.Crud.CrudForCollectionController`3.CountAsync
  isSpec: "True"
  fullName: Quickie.Apis.Crud.CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.CountAsync
  fullName.vb: Quickie.Apis.Crud.CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).CountAsync
  nameWithType: CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.CountAsync
  nameWithType.vb: CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).CountAsync
- uid: Quickie.Apis.Crud.CrudForCollectionController`3.CreateAsync(System.String,System.Collections.Generic.ICollection{`0},System.Threading.CancellationToken)
  name: CreateAsync(string?, ICollection<TViewModel>, CancellationToken)
  href: api/Quickie.Apis.Crud.CrudForCollectionController-3.html#Quickie_Apis_Crud_CrudForCollectionController_3_CreateAsync_System_String_System_Collections_Generic_ICollection__0__System_Threading_CancellationToken_
  commentId: M:Quickie.Apis.Crud.CrudForCollectionController`3.CreateAsync(System.String,System.Collections.Generic.ICollection{`0},System.Threading.CancellationToken)
  name.vb: CreateAsync(String, ICollection(Of TViewModel), CancellationToken)
  fullName: Quickie.Apis.Crud.CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.CreateAsync(string?, System.Collections.Generic.ICollection<TViewModel>, System.Threading.CancellationToken)
  fullName.vb: Quickie.Apis.Crud.CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).CreateAsync(String, System.Collections.Generic.ICollection(Of TViewModel), System.Threading.CancellationToken)
  nameWithType: CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.CreateAsync(string?, ICollection<TViewModel>, CancellationToken)
  nameWithType.vb: CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).CreateAsync(String, ICollection(Of TViewModel), CancellationToken)
- uid: Quickie.Apis.Crud.CrudForCollectionController`3.CreateAsync*
  name: CreateAsync
  href: api/Quickie.Apis.Crud.CrudForCollectionController-3.html#Quickie_Apis_Crud_CrudForCollectionController_3_CreateAsync_
  commentId: Overload:Quickie.Apis.Crud.CrudForCollectionController`3.CreateAsync
  isSpec: "True"
  fullName: Quickie.Apis.Crud.CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.CreateAsync
  fullName.vb: Quickie.Apis.Crud.CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).CreateAsync
  nameWithType: CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.CreateAsync
  nameWithType.vb: CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).CreateAsync
- uid: Quickie.Apis.Crud.CrudForCollectionController`3.DeleteAsync(System.Collections.Generic.ICollection{`2},System.Threading.CancellationToken)
  name: DeleteAsync(ICollection<TIdType>, CancellationToken)
  href: api/Quickie.Apis.Crud.CrudForCollectionController-3.html#Quickie_Apis_Crud_CrudForCollectionController_3_DeleteAsync_System_Collections_Generic_ICollection__2__System_Threading_CancellationToken_
  commentId: M:Quickie.Apis.Crud.CrudForCollectionController`3.DeleteAsync(System.Collections.Generic.ICollection{`2},System.Threading.CancellationToken)
  name.vb: DeleteAsync(ICollection(Of TIdType), CancellationToken)
  fullName: Quickie.Apis.Crud.CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.DeleteAsync(System.Collections.Generic.ICollection<TIdType>, System.Threading.CancellationToken)
  fullName.vb: Quickie.Apis.Crud.CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).DeleteAsync(System.Collections.Generic.ICollection(Of TIdType), System.Threading.CancellationToken)
  nameWithType: CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.DeleteAsync(ICollection<TIdType>, CancellationToken)
  nameWithType.vb: CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).DeleteAsync(ICollection(Of TIdType), CancellationToken)
- uid: Quickie.Apis.Crud.CrudForCollectionController`3.DeleteAsync*
  name: DeleteAsync
  href: api/Quickie.Apis.Crud.CrudForCollectionController-3.html#Quickie_Apis_Crud_CrudForCollectionController_3_DeleteAsync_
  commentId: Overload:Quickie.Apis.Crud.CrudForCollectionController`3.DeleteAsync
  isSpec: "True"
  fullName: Quickie.Apis.Crud.CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.DeleteAsync
  fullName.vb: Quickie.Apis.Crud.CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).DeleteAsync
  nameWithType: CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.DeleteAsync
  nameWithType.vb: CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).DeleteAsync
- uid: Quickie.Apis.Crud.CrudForCollectionController`3.GetAllAsync(Quickie.DataObj.RequestForDataObj,System.Threading.CancellationToken)
  name: GetAllAsync(RequestForDataObj, CancellationToken)
  href: api/Quickie.Apis.Crud.CrudForCollectionController-3.html#Quickie_Apis_Crud_CrudForCollectionController_3_GetAllAsync_Quickie_DataObj_RequestForDataObj_System_Threading_CancellationToken_
  commentId: M:Quickie.Apis.Crud.CrudForCollectionController`3.GetAllAsync(Quickie.DataObj.RequestForDataObj,System.Threading.CancellationToken)
  fullName: Quickie.Apis.Crud.CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.GetAllAsync(Quickie.DataObj.RequestForDataObj, System.Threading.CancellationToken)
  fullName.vb: Quickie.Apis.Crud.CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).GetAllAsync(Quickie.DataObj.RequestForDataObj, System.Threading.CancellationToken)
  nameWithType: CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.GetAllAsync(RequestForDataObj, CancellationToken)
  nameWithType.vb: CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).GetAllAsync(RequestForDataObj, CancellationToken)
- uid: Quickie.Apis.Crud.CrudForCollectionController`3.GetAllAsync*
  name: GetAllAsync
  href: api/Quickie.Apis.Crud.CrudForCollectionController-3.html#Quickie_Apis_Crud_CrudForCollectionController_3_GetAllAsync_
  commentId: Overload:Quickie.Apis.Crud.CrudForCollectionController`3.GetAllAsync
  isSpec: "True"
  fullName: Quickie.Apis.Crud.CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.GetAllAsync
  fullName.vb: Quickie.Apis.Crud.CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).GetAllAsync
  nameWithType: CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.GetAllAsync
  nameWithType.vb: CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).GetAllAsync
- uid: Quickie.Apis.Crud.CrudForCollectionController`3.UpdateAsync(System.Collections.Generic.ICollection{`0},System.Threading.CancellationToken)
  name: UpdateAsync(ICollection<TViewModel>, CancellationToken)
  href: api/Quickie.Apis.Crud.CrudForCollectionController-3.html#Quickie_Apis_Crud_CrudForCollectionController_3_UpdateAsync_System_Collections_Generic_ICollection__0__System_Threading_CancellationToken_
  commentId: M:Quickie.Apis.Crud.CrudForCollectionController`3.UpdateAsync(System.Collections.Generic.ICollection{`0},System.Threading.CancellationToken)
  name.vb: UpdateAsync(ICollection(Of TViewModel), CancellationToken)
  fullName: Quickie.Apis.Crud.CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.UpdateAsync(System.Collections.Generic.ICollection<TViewModel>, System.Threading.CancellationToken)
  fullName.vb: Quickie.Apis.Crud.CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).UpdateAsync(System.Collections.Generic.ICollection(Of TViewModel), System.Threading.CancellationToken)
  nameWithType: CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.UpdateAsync(ICollection<TViewModel>, CancellationToken)
  nameWithType.vb: CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).UpdateAsync(ICollection(Of TViewModel), CancellationToken)
- uid: Quickie.Apis.Crud.CrudForCollectionController`3.UpdateAsync*
  name: UpdateAsync
  href: api/Quickie.Apis.Crud.CrudForCollectionController-3.html#Quickie_Apis_Crud_CrudForCollectionController_3_UpdateAsync_
  commentId: Overload:Quickie.Apis.Crud.CrudForCollectionController`3.UpdateAsync
  isSpec: "True"
  fullName: Quickie.Apis.Crud.CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.UpdateAsync
  fullName.vb: Quickie.Apis.Crud.CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).UpdateAsync
  nameWithType: CrudForCollectionController<TViewModel, TRequestHandler, TIdType>.UpdateAsync
  nameWithType.vb: CrudForCollectionController(Of TViewModel, TRequestHandler, TIdType).UpdateAsync
- uid: Quickie.Apis.CrudlController
  name: CrudlController
  href: api/Quickie.Apis.CrudlController.html
  commentId: T:Quickie.Apis.CrudlController
  fullName: Quickie.Apis.CrudlController
  nameWithType: CrudlController
- uid: Quickie.Apis.Editonly
  name: Quickie.Apis.Editonly
  href: api/Quickie.Apis.Editonly.html
  commentId: N:Quickie.Apis.Editonly
  fullName: Quickie.Apis.Editonly
  nameWithType: Quickie.Apis.Editonly
- uid: Quickie.Apis.Editonly.EditOnlyController`3
  name: EditOnlyController<TViewModel, TRequestHandler, TIdType>
  href: api/Quickie.Apis.Editonly.EditOnlyController-3.html
  commentId: T:Quickie.Apis.Editonly.EditOnlyController`3
  name.vb: EditOnlyController(Of TViewModel, TRequestHandler, TIdType)
  fullName: Quickie.Apis.Editonly.EditOnlyController<TViewModel, TRequestHandler, TIdType>
  fullName.vb: Quickie.Apis.Editonly.EditOnlyController(Of TViewModel, TRequestHandler, TIdType)
  nameWithType: EditOnlyController<TViewModel, TRequestHandler, TIdType>
  nameWithType.vb: EditOnlyController(Of TViewModel, TRequestHandler, TIdType)
- uid: Quickie.Apis.Editonly.EditOnlyController`3.#ctor(Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler{`0,`2})
  name: EditOnlyController(IEditOnlyRequestHandler<TViewModel, TIdType>)
  href: api/Quickie.Apis.Editonly.EditOnlyController-3.html#Quickie_Apis_Editonly_EditOnlyController_3__ctor_Quickie_Handlers_Editonly_Definition_IEditOnlyRequestHandler__0__2__
  commentId: M:Quickie.Apis.Editonly.EditOnlyController`3.#ctor(Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler{`0,`2})
  name.vb: New(IEditOnlyRequestHandler(Of TViewModel, TIdType))
  fullName: Quickie.Apis.Editonly.EditOnlyController<TViewModel, TRequestHandler, TIdType>.EditOnlyController(Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler<TViewModel, TIdType>)
  fullName.vb: Quickie.Apis.Editonly.EditOnlyController(Of TViewModel, TRequestHandler, TIdType).New(Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler(Of TViewModel, TIdType))
  nameWithType: EditOnlyController<TViewModel, TRequestHandler, TIdType>.EditOnlyController(IEditOnlyRequestHandler<TViewModel, TIdType>)
  nameWithType.vb: EditOnlyController(Of TViewModel, TRequestHandler, TIdType).New(IEditOnlyRequestHandler(Of TViewModel, TIdType))
- uid: Quickie.Apis.Editonly.EditOnlyController`3.#ctor*
  name: EditOnlyController
  href: api/Quickie.Apis.Editonly.EditOnlyController-3.html#Quickie_Apis_Editonly_EditOnlyController_3__ctor_
  commentId: Overload:Quickie.Apis.Editonly.EditOnlyController`3.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Apis.Editonly.EditOnlyController<TViewModel, TRequestHandler, TIdType>.EditOnlyController
  fullName.vb: Quickie.Apis.Editonly.EditOnlyController(Of TViewModel, TRequestHandler, TIdType).New
  nameWithType: EditOnlyController<TViewModel, TRequestHandler, TIdType>.EditOnlyController
  nameWithType.vb: EditOnlyController(Of TViewModel, TRequestHandler, TIdType).New
- uid: Quickie.Apis.Editonly.EditOnlyController`3.EditAsync(`2,`0,System.Threading.CancellationToken)
  name: EditAsync(TIdType, TViewModel, CancellationToken)
  href: api/Quickie.Apis.Editonly.EditOnlyController-3.html#Quickie_Apis_Editonly_EditOnlyController_3_EditAsync__2__0_System_Threading_CancellationToken_
  commentId: M:Quickie.Apis.Editonly.EditOnlyController`3.EditAsync(`2,`0,System.Threading.CancellationToken)
  fullName: Quickie.Apis.Editonly.EditOnlyController<TViewModel, TRequestHandler, TIdType>.EditAsync(TIdType, TViewModel, System.Threading.CancellationToken)
  fullName.vb: Quickie.Apis.Editonly.EditOnlyController(Of TViewModel, TRequestHandler, TIdType).EditAsync(TIdType, TViewModel, System.Threading.CancellationToken)
  nameWithType: EditOnlyController<TViewModel, TRequestHandler, TIdType>.EditAsync(TIdType, TViewModel, CancellationToken)
  nameWithType.vb: EditOnlyController(Of TViewModel, TRequestHandler, TIdType).EditAsync(TIdType, TViewModel, CancellationToken)
- uid: Quickie.Apis.Editonly.EditOnlyController`3.EditAsync*
  name: EditAsync
  href: api/Quickie.Apis.Editonly.EditOnlyController-3.html#Quickie_Apis_Editonly_EditOnlyController_3_EditAsync_
  commentId: Overload:Quickie.Apis.Editonly.EditOnlyController`3.EditAsync
  isSpec: "True"
  fullName: Quickie.Apis.Editonly.EditOnlyController<TViewModel, TRequestHandler, TIdType>.EditAsync
  fullName.vb: Quickie.Apis.Editonly.EditOnlyController(Of TViewModel, TRequestHandler, TIdType).EditAsync
  nameWithType: EditOnlyController<TViewModel, TRequestHandler, TIdType>.EditAsync
  nameWithType.vb: EditOnlyController(Of TViewModel, TRequestHandler, TIdType).EditAsync
- uid: Quickie.Apis.Editonly.EditOnlyController`3.EditCollectionAsync(System.Collections.Generic.ICollection{`0},System.Threading.CancellationToken)
  name: EditCollectionAsync(ICollection<TViewModel>, CancellationToken)
  href: api/Quickie.Apis.Editonly.EditOnlyController-3.html#Quickie_Apis_Editonly_EditOnlyController_3_EditCollectionAsync_System_Collections_Generic_ICollection__0__System_Threading_CancellationToken_
  commentId: M:Quickie.Apis.Editonly.EditOnlyController`3.EditCollectionAsync(System.Collections.Generic.ICollection{`0},System.Threading.CancellationToken)
  name.vb: EditCollectionAsync(ICollection(Of TViewModel), CancellationToken)
  fullName: Quickie.Apis.Editonly.EditOnlyController<TViewModel, TRequestHandler, TIdType>.EditCollectionAsync(System.Collections.Generic.ICollection<TViewModel>, System.Threading.CancellationToken)
  fullName.vb: Quickie.Apis.Editonly.EditOnlyController(Of TViewModel, TRequestHandler, TIdType).EditCollectionAsync(System.Collections.Generic.ICollection(Of TViewModel), System.Threading.CancellationToken)
  nameWithType: EditOnlyController<TViewModel, TRequestHandler, TIdType>.EditCollectionAsync(ICollection<TViewModel>, CancellationToken)
  nameWithType.vb: EditOnlyController(Of TViewModel, TRequestHandler, TIdType).EditCollectionAsync(ICollection(Of TViewModel), CancellationToken)
- uid: Quickie.Apis.Editonly.EditOnlyController`3.EditCollectionAsync*
  name: EditCollectionAsync
  href: api/Quickie.Apis.Editonly.EditOnlyController-3.html#Quickie_Apis_Editonly_EditOnlyController_3_EditCollectionAsync_
  commentId: Overload:Quickie.Apis.Editonly.EditOnlyController`3.EditCollectionAsync
  isSpec: "True"
  fullName: Quickie.Apis.Editonly.EditOnlyController<TViewModel, TRequestHandler, TIdType>.EditCollectionAsync
  fullName.vb: Quickie.Apis.Editonly.EditOnlyController(Of TViewModel, TRequestHandler, TIdType).EditCollectionAsync
  nameWithType: EditOnlyController<TViewModel, TRequestHandler, TIdType>.EditCollectionAsync
  nameWithType.vb: EditOnlyController(Of TViewModel, TRequestHandler, TIdType).EditCollectionAsync
- uid: Quickie.Apis.Readonly
  name: Quickie.Apis.Readonly
  href: api/Quickie.Apis.Readonly.html
  commentId: N:Quickie.Apis.Readonly
  fullName: Quickie.Apis.Readonly
  nameWithType: Quickie.Apis.Readonly
- uid: Quickie.Apis.Readonly.ReadOnlyCollectionController`3
  name: ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel>
  href: api/Quickie.Apis.Readonly.ReadOnlyCollectionController-3.html
  commentId: T:Quickie.Apis.Readonly.ReadOnlyCollectionController`3
  name.vb: ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel)
  fullName: Quickie.Apis.Readonly.ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel>
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel)
  nameWithType: ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel>
  nameWithType.vb: ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel)
- uid: Quickie.Apis.Readonly.ReadOnlyCollectionController`3.#ctor(`1)
  name: ReadOnlyCollectionController(TRequestHandler)
  href: api/Quickie.Apis.Readonly.ReadOnlyCollectionController-3.html#Quickie_Apis_Readonly_ReadOnlyCollectionController_3__ctor__1_
  commentId: M:Quickie.Apis.Readonly.ReadOnlyCollectionController`3.#ctor(`1)
  name.vb: New(TRequestHandler)
  fullName: Quickie.Apis.Readonly.ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel>.ReadOnlyCollectionController(TRequestHandler)
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel).New(TRequestHandler)
  nameWithType: ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel>.ReadOnlyCollectionController(TRequestHandler)
  nameWithType.vb: ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel).New(TRequestHandler)
- uid: Quickie.Apis.Readonly.ReadOnlyCollectionController`3.#ctor*
  name: ReadOnlyCollectionController
  href: api/Quickie.Apis.Readonly.ReadOnlyCollectionController-3.html#Quickie_Apis_Readonly_ReadOnlyCollectionController_3__ctor_
  commentId: Overload:Quickie.Apis.Readonly.ReadOnlyCollectionController`3.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Apis.Readonly.ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel>.ReadOnlyCollectionController
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel).New
  nameWithType: ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel>.ReadOnlyCollectionController
  nameWithType.vb: ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel).New
- uid: Quickie.Apis.Readonly.ReadOnlyCollectionController`3.GetAsync(`2,System.Threading.CancellationToken)
  name: GetAsync(TRequestForDataModel, CancellationToken)
  href: api/Quickie.Apis.Readonly.ReadOnlyCollectionController-3.html#Quickie_Apis_Readonly_ReadOnlyCollectionController_3_GetAsync__2_System_Threading_CancellationToken_
  commentId: M:Quickie.Apis.Readonly.ReadOnlyCollectionController`3.GetAsync(`2,System.Threading.CancellationToken)
  fullName: Quickie.Apis.Readonly.ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel>.GetAsync(TRequestForDataModel, System.Threading.CancellationToken)
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel).GetAsync(TRequestForDataModel, System.Threading.CancellationToken)
  nameWithType: ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel>.GetAsync(TRequestForDataModel, CancellationToken)
  nameWithType.vb: ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel).GetAsync(TRequestForDataModel, CancellationToken)
- uid: Quickie.Apis.Readonly.ReadOnlyCollectionController`3.GetAsync*
  name: GetAsync
  href: api/Quickie.Apis.Readonly.ReadOnlyCollectionController-3.html#Quickie_Apis_Readonly_ReadOnlyCollectionController_3_GetAsync_
  commentId: Overload:Quickie.Apis.Readonly.ReadOnlyCollectionController`3.GetAsync
  isSpec: "True"
  fullName: Quickie.Apis.Readonly.ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel>.GetAsync
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel).GetAsync
  nameWithType: ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel>.GetAsync
  nameWithType.vb: ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel).GetAsync
- uid: Quickie.Apis.Readonly.ReadOnlyCollectionController`3.GetByIdAsync(System.Int64,`2,System.Threading.CancellationToken)
  name: GetByIdAsync(long, TRequestForDataModel?, CancellationToken)
  href: api/Quickie.Apis.Readonly.ReadOnlyCollectionController-3.html#Quickie_Apis_Readonly_ReadOnlyCollectionController_3_GetByIdAsync_System_Int64__2_System_Threading_CancellationToken_
  commentId: M:Quickie.Apis.Readonly.ReadOnlyCollectionController`3.GetByIdAsync(System.Int64,`2,System.Threading.CancellationToken)
  name.vb: GetByIdAsync(Long, TRequestForDataModel, CancellationToken)
  fullName: Quickie.Apis.Readonly.ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel>.GetByIdAsync(long, TRequestForDataModel?, System.Threading.CancellationToken)
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel).GetByIdAsync(Long, TRequestForDataModel, System.Threading.CancellationToken)
  nameWithType: ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel>.GetByIdAsync(long, TRequestForDataModel?, CancellationToken)
  nameWithType.vb: ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel).GetByIdAsync(Long, TRequestForDataModel, CancellationToken)
- uid: Quickie.Apis.Readonly.ReadOnlyCollectionController`3.GetByIdAsync*
  name: GetByIdAsync
  href: api/Quickie.Apis.Readonly.ReadOnlyCollectionController-3.html#Quickie_Apis_Readonly_ReadOnlyCollectionController_3_GetByIdAsync_
  commentId: Overload:Quickie.Apis.Readonly.ReadOnlyCollectionController`3.GetByIdAsync
  isSpec: "True"
  fullName: Quickie.Apis.Readonly.ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel>.GetByIdAsync
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel).GetByIdAsync
  nameWithType: ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel>.GetByIdAsync
  nameWithType.vb: ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel).GetByIdAsync
- uid: Quickie.Apis.Readonly.ReadOnlyCollectionController`4
  name: ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType>
  href: api/Quickie.Apis.Readonly.ReadOnlyCollectionController-4.html
  commentId: T:Quickie.Apis.Readonly.ReadOnlyCollectionController`4
  name.vb: ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel, TIdType)
  fullName: Quickie.Apis.Readonly.ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType>
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel, TIdType)
  nameWithType: ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType>
  nameWithType.vb: ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel, TIdType)
- uid: Quickie.Apis.Readonly.ReadOnlyCollectionController`4.#ctor(`1)
  name: ReadOnlyCollectionController(TRequestHandler)
  href: api/Quickie.Apis.Readonly.ReadOnlyCollectionController-4.html#Quickie_Apis_Readonly_ReadOnlyCollectionController_4__ctor__1_
  commentId: M:Quickie.Apis.Readonly.ReadOnlyCollectionController`4.#ctor(`1)
  name.vb: New(TRequestHandler)
  fullName: Quickie.Apis.Readonly.ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType>.ReadOnlyCollectionController(TRequestHandler)
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel, TIdType).New(TRequestHandler)
  nameWithType: ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType>.ReadOnlyCollectionController(TRequestHandler)
  nameWithType.vb: ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel, TIdType).New(TRequestHandler)
- uid: Quickie.Apis.Readonly.ReadOnlyCollectionController`4.#ctor*
  name: ReadOnlyCollectionController
  href: api/Quickie.Apis.Readonly.ReadOnlyCollectionController-4.html#Quickie_Apis_Readonly_ReadOnlyCollectionController_4__ctor_
  commentId: Overload:Quickie.Apis.Readonly.ReadOnlyCollectionController`4.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Apis.Readonly.ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType>.ReadOnlyCollectionController
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel, TIdType).New
  nameWithType: ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType>.ReadOnlyCollectionController
  nameWithType.vb: ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel, TIdType).New
- uid: Quickie.Apis.Readonly.ReadOnlyCollectionController`4.GetAsync(`2,System.Threading.CancellationToken)
  name: GetAsync(TRequestForDataModel, CancellationToken)
  href: api/Quickie.Apis.Readonly.ReadOnlyCollectionController-4.html#Quickie_Apis_Readonly_ReadOnlyCollectionController_4_GetAsync__2_System_Threading_CancellationToken_
  commentId: M:Quickie.Apis.Readonly.ReadOnlyCollectionController`4.GetAsync(`2,System.Threading.CancellationToken)
  fullName: Quickie.Apis.Readonly.ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType>.GetAsync(TRequestForDataModel, System.Threading.CancellationToken)
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel, TIdType).GetAsync(TRequestForDataModel, System.Threading.CancellationToken)
  nameWithType: ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType>.GetAsync(TRequestForDataModel, CancellationToken)
  nameWithType.vb: ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel, TIdType).GetAsync(TRequestForDataModel, CancellationToken)
- uid: Quickie.Apis.Readonly.ReadOnlyCollectionController`4.GetAsync*
  name: GetAsync
  href: api/Quickie.Apis.Readonly.ReadOnlyCollectionController-4.html#Quickie_Apis_Readonly_ReadOnlyCollectionController_4_GetAsync_
  commentId: Overload:Quickie.Apis.Readonly.ReadOnlyCollectionController`4.GetAsync
  isSpec: "True"
  fullName: Quickie.Apis.Readonly.ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType>.GetAsync
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel, TIdType).GetAsync
  nameWithType: ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType>.GetAsync
  nameWithType.vb: ReadOnlyCollectionController(Of TViewModel, TRequestHandler, TRequestForDataModel, TIdType).GetAsync
- uid: Quickie.Apis.Readonly.ReadOnlyController`2
  name: ReadOnlyController<TViewModel, TRequestHandler>
  href: api/Quickie.Apis.Readonly.ReadOnlyController-2.html
  commentId: T:Quickie.Apis.Readonly.ReadOnlyController`2
  name.vb: ReadOnlyController(Of TViewModel, TRequestHandler)
  fullName: Quickie.Apis.Readonly.ReadOnlyController<TViewModel, TRequestHandler>
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyController(Of TViewModel, TRequestHandler)
  nameWithType: ReadOnlyController<TViewModel, TRequestHandler>
  nameWithType.vb: ReadOnlyController(Of TViewModel, TRequestHandler)
- uid: Quickie.Apis.Readonly.ReadOnlyController`2.#ctor(`1)
  name: ReadOnlyController(TRequestHandler)
  href: api/Quickie.Apis.Readonly.ReadOnlyController-2.html#Quickie_Apis_Readonly_ReadOnlyController_2__ctor__1_
  commentId: M:Quickie.Apis.Readonly.ReadOnlyController`2.#ctor(`1)
  name.vb: New(TRequestHandler)
  fullName: Quickie.Apis.Readonly.ReadOnlyController<TViewModel, TRequestHandler>.ReadOnlyController(TRequestHandler)
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyController(Of TViewModel, TRequestHandler).New(TRequestHandler)
  nameWithType: ReadOnlyController<TViewModel, TRequestHandler>.ReadOnlyController(TRequestHandler)
  nameWithType.vb: ReadOnlyController(Of TViewModel, TRequestHandler).New(TRequestHandler)
- uid: Quickie.Apis.Readonly.ReadOnlyController`2.#ctor*
  name: ReadOnlyController
  href: api/Quickie.Apis.Readonly.ReadOnlyController-2.html#Quickie_Apis_Readonly_ReadOnlyController_2__ctor_
  commentId: Overload:Quickie.Apis.Readonly.ReadOnlyController`2.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Apis.Readonly.ReadOnlyController<TViewModel, TRequestHandler>.ReadOnlyController
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyController(Of TViewModel, TRequestHandler).New
  nameWithType: ReadOnlyController<TViewModel, TRequestHandler>.ReadOnlyController
  nameWithType.vb: ReadOnlyController(Of TViewModel, TRequestHandler).New
- uid: Quickie.Apis.Readonly.ReadOnlyController`2.GetByIdAsync(System.Int64,System.Threading.CancellationToken)
  name: GetByIdAsync(long, CancellationToken)
  href: api/Quickie.Apis.Readonly.ReadOnlyController-2.html#Quickie_Apis_Readonly_ReadOnlyController_2_GetByIdAsync_System_Int64_System_Threading_CancellationToken_
  commentId: M:Quickie.Apis.Readonly.ReadOnlyController`2.GetByIdAsync(System.Int64,System.Threading.CancellationToken)
  name.vb: GetByIdAsync(Long, CancellationToken)
  fullName: Quickie.Apis.Readonly.ReadOnlyController<TViewModel, TRequestHandler>.GetByIdAsync(long, System.Threading.CancellationToken)
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyController(Of TViewModel, TRequestHandler).GetByIdAsync(Long, System.Threading.CancellationToken)
  nameWithType: ReadOnlyController<TViewModel, TRequestHandler>.GetByIdAsync(long, CancellationToken)
  nameWithType.vb: ReadOnlyController(Of TViewModel, TRequestHandler).GetByIdAsync(Long, CancellationToken)
- uid: Quickie.Apis.Readonly.ReadOnlyController`2.GetByIdAsync*
  name: GetByIdAsync
  href: api/Quickie.Apis.Readonly.ReadOnlyController-2.html#Quickie_Apis_Readonly_ReadOnlyController_2_GetByIdAsync_
  commentId: Overload:Quickie.Apis.Readonly.ReadOnlyController`2.GetByIdAsync
  isSpec: "True"
  fullName: Quickie.Apis.Readonly.ReadOnlyController<TViewModel, TRequestHandler>.GetByIdAsync
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyController(Of TViewModel, TRequestHandler).GetByIdAsync
  nameWithType: ReadOnlyController<TViewModel, TRequestHandler>.GetByIdAsync
  nameWithType.vb: ReadOnlyController(Of TViewModel, TRequestHandler).GetByIdAsync
- uid: Quickie.Apis.Readonly.ReadOnlyController`3
  name: ReadOnlyController<TViewModel, TRequestHandler, TIdType>
  href: api/Quickie.Apis.Readonly.ReadOnlyController-3.html
  commentId: T:Quickie.Apis.Readonly.ReadOnlyController`3
  name.vb: ReadOnlyController(Of TViewModel, TRequestHandler, TIdType)
  fullName: Quickie.Apis.Readonly.ReadOnlyController<TViewModel, TRequestHandler, TIdType>
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyController(Of TViewModel, TRequestHandler, TIdType)
  nameWithType: ReadOnlyController<TViewModel, TRequestHandler, TIdType>
  nameWithType.vb: ReadOnlyController(Of TViewModel, TRequestHandler, TIdType)
- uid: Quickie.Apis.Readonly.ReadOnlyController`3.#ctor(`1)
  name: ReadOnlyController(TRequestHandler)
  href: api/Quickie.Apis.Readonly.ReadOnlyController-3.html#Quickie_Apis_Readonly_ReadOnlyController_3__ctor__1_
  commentId: M:Quickie.Apis.Readonly.ReadOnlyController`3.#ctor(`1)
  name.vb: New(TRequestHandler)
  fullName: Quickie.Apis.Readonly.ReadOnlyController<TViewModel, TRequestHandler, TIdType>.ReadOnlyController(TRequestHandler)
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyController(Of TViewModel, TRequestHandler, TIdType).New(TRequestHandler)
  nameWithType: ReadOnlyController<TViewModel, TRequestHandler, TIdType>.ReadOnlyController(TRequestHandler)
  nameWithType.vb: ReadOnlyController(Of TViewModel, TRequestHandler, TIdType).New(TRequestHandler)
- uid: Quickie.Apis.Readonly.ReadOnlyController`3.#ctor*
  name: ReadOnlyController
  href: api/Quickie.Apis.Readonly.ReadOnlyController-3.html#Quickie_Apis_Readonly_ReadOnlyController_3__ctor_
  commentId: Overload:Quickie.Apis.Readonly.ReadOnlyController`3.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Apis.Readonly.ReadOnlyController<TViewModel, TRequestHandler, TIdType>.ReadOnlyController
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyController(Of TViewModel, TRequestHandler, TIdType).New
  nameWithType: ReadOnlyController<TViewModel, TRequestHandler, TIdType>.ReadOnlyController
  nameWithType.vb: ReadOnlyController(Of TViewModel, TRequestHandler, TIdType).New
- uid: Quickie.Apis.Readonly.ReadOnlyController`3.GetByIdAsync(`2,System.Threading.CancellationToken)
  name: GetByIdAsync(TIdType, CancellationToken)
  href: api/Quickie.Apis.Readonly.ReadOnlyController-3.html#Quickie_Apis_Readonly_ReadOnlyController_3_GetByIdAsync__2_System_Threading_CancellationToken_
  commentId: M:Quickie.Apis.Readonly.ReadOnlyController`3.GetByIdAsync(`2,System.Threading.CancellationToken)
  fullName: Quickie.Apis.Readonly.ReadOnlyController<TViewModel, TRequestHandler, TIdType>.GetByIdAsync(TIdType, System.Threading.CancellationToken)
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyController(Of TViewModel, TRequestHandler, TIdType).GetByIdAsync(TIdType, System.Threading.CancellationToken)
  nameWithType: ReadOnlyController<TViewModel, TRequestHandler, TIdType>.GetByIdAsync(TIdType, CancellationToken)
  nameWithType.vb: ReadOnlyController(Of TViewModel, TRequestHandler, TIdType).GetByIdAsync(TIdType, CancellationToken)
- uid: Quickie.Apis.Readonly.ReadOnlyController`3.GetByIdAsync*
  name: GetByIdAsync
  href: api/Quickie.Apis.Readonly.ReadOnlyController-3.html#Quickie_Apis_Readonly_ReadOnlyController_3_GetByIdAsync_
  commentId: Overload:Quickie.Apis.Readonly.ReadOnlyController`3.GetByIdAsync
  isSpec: "True"
  fullName: Quickie.Apis.Readonly.ReadOnlyController<TViewModel, TRequestHandler, TIdType>.GetByIdAsync
  fullName.vb: Quickie.Apis.Readonly.ReadOnlyController(Of TViewModel, TRequestHandler, TIdType).GetByIdAsync
  nameWithType: ReadOnlyController<TViewModel, TRequestHandler, TIdType>.GetByIdAsync
  nameWithType.vb: ReadOnlyController(Of TViewModel, TRequestHandler, TIdType).GetByIdAsync
- uid: Quickie.Apis.Writeonly
  name: Quickie.Apis.Writeonly
  href: api/Quickie.Apis.Writeonly.html
  commentId: N:Quickie.Apis.Writeonly
  fullName: Quickie.Apis.Writeonly
  nameWithType: Quickie.Apis.Writeonly
- uid: Quickie.Apis.Writeonly.WriteOnlyController`2
  name: WriteOnlyController<TViewModel, TRequestHandler>
  href: api/Quickie.Apis.Writeonly.WriteOnlyController-2.html
  commentId: T:Quickie.Apis.Writeonly.WriteOnlyController`2
  name.vb: WriteOnlyController(Of TViewModel, TRequestHandler)
  fullName: Quickie.Apis.Writeonly.WriteOnlyController<TViewModel, TRequestHandler>
  fullName.vb: Quickie.Apis.Writeonly.WriteOnlyController(Of TViewModel, TRequestHandler)
  nameWithType: WriteOnlyController<TViewModel, TRequestHandler>
  nameWithType.vb: WriteOnlyController(Of TViewModel, TRequestHandler)
- uid: Quickie.Apis.Writeonly.WriteOnlyController`2.#ctor(Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler{`0})
  name: WriteOnlyController(IWriteOnlyRequestHandler<TViewModel>)
  href: api/Quickie.Apis.Writeonly.WriteOnlyController-2.html#Quickie_Apis_Writeonly_WriteOnlyController_2__ctor_Quickie_Handlers_Writeonly_Definition_IWriteOnlyRequestHandler__0__
  commentId: M:Quickie.Apis.Writeonly.WriteOnlyController`2.#ctor(Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler{`0})
  name.vb: New(IWriteOnlyRequestHandler(Of TViewModel))
  fullName: Quickie.Apis.Writeonly.WriteOnlyController<TViewModel, TRequestHandler>.WriteOnlyController(Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler<TViewModel>)
  fullName.vb: Quickie.Apis.Writeonly.WriteOnlyController(Of TViewModel, TRequestHandler).New(Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler(Of TViewModel))
  nameWithType: WriteOnlyController<TViewModel, TRequestHandler>.WriteOnlyController(IWriteOnlyRequestHandler<TViewModel>)
  nameWithType.vb: WriteOnlyController(Of TViewModel, TRequestHandler).New(IWriteOnlyRequestHandler(Of TViewModel))
- uid: Quickie.Apis.Writeonly.WriteOnlyController`2.#ctor*
  name: WriteOnlyController
  href: api/Quickie.Apis.Writeonly.WriteOnlyController-2.html#Quickie_Apis_Writeonly_WriteOnlyController_2__ctor_
  commentId: Overload:Quickie.Apis.Writeonly.WriteOnlyController`2.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Apis.Writeonly.WriteOnlyController<TViewModel, TRequestHandler>.WriteOnlyController
  fullName.vb: Quickie.Apis.Writeonly.WriteOnlyController(Of TViewModel, TRequestHandler).New
  nameWithType: WriteOnlyController<TViewModel, TRequestHandler>.WriteOnlyController
  nameWithType.vb: WriteOnlyController(Of TViewModel, TRequestHandler).New
- uid: Quickie.Apis.Writeonly.WriteOnlyController`2.CreateItemAsync(System.String,`0,System.Threading.CancellationToken)
  name: CreateItemAsync(string?, TViewModel, CancellationToken)
  href: api/Quickie.Apis.Writeonly.WriteOnlyController-2.html#Quickie_Apis_Writeonly_WriteOnlyController_2_CreateItemAsync_System_String__0_System_Threading_CancellationToken_
  commentId: M:Quickie.Apis.Writeonly.WriteOnlyController`2.CreateItemAsync(System.String,`0,System.Threading.CancellationToken)
  name.vb: CreateItemAsync(String, TViewModel, CancellationToken)
  fullName: Quickie.Apis.Writeonly.WriteOnlyController<TViewModel, TRequestHandler>.CreateItemAsync(string?, TViewModel, System.Threading.CancellationToken)
  fullName.vb: Quickie.Apis.Writeonly.WriteOnlyController(Of TViewModel, TRequestHandler).CreateItemAsync(String, TViewModel, System.Threading.CancellationToken)
  nameWithType: WriteOnlyController<TViewModel, TRequestHandler>.CreateItemAsync(string?, TViewModel, CancellationToken)
  nameWithType.vb: WriteOnlyController(Of TViewModel, TRequestHandler).CreateItemAsync(String, TViewModel, CancellationToken)
- uid: Quickie.Apis.Writeonly.WriteOnlyController`2.CreateItemAsync*
  name: CreateItemAsync
  href: api/Quickie.Apis.Writeonly.WriteOnlyController-2.html#Quickie_Apis_Writeonly_WriteOnlyController_2_CreateItemAsync_
  commentId: Overload:Quickie.Apis.Writeonly.WriteOnlyController`2.CreateItemAsync
  isSpec: "True"
  fullName: Quickie.Apis.Writeonly.WriteOnlyController<TViewModel, TRequestHandler>.CreateItemAsync
  fullName.vb: Quickie.Apis.Writeonly.WriteOnlyController(Of TViewModel, TRequestHandler).CreateItemAsync
  nameWithType: WriteOnlyController<TViewModel, TRequestHandler>.CreateItemAsync
  nameWithType.vb: WriteOnlyController(Of TViewModel, TRequestHandler).CreateItemAsync
- uid: Quickie.Apis.Writeonly.WriteOnlyController`2.CreateItemsAsync(System.String,System.Collections.Generic.ICollection{`0},System.Threading.CancellationToken)
  name: CreateItemsAsync(string?, ICollection<TViewModel>, CancellationToken)
  href: api/Quickie.Apis.Writeonly.WriteOnlyController-2.html#Quickie_Apis_Writeonly_WriteOnlyController_2_CreateItemsAsync_System_String_System_Collections_Generic_ICollection__0__System_Threading_CancellationToken_
  commentId: M:Quickie.Apis.Writeonly.WriteOnlyController`2.CreateItemsAsync(System.String,System.Collections.Generic.ICollection{`0},System.Threading.CancellationToken)
  name.vb: CreateItemsAsync(String, ICollection(Of TViewModel), CancellationToken)
  fullName: Quickie.Apis.Writeonly.WriteOnlyController<TViewModel, TRequestHandler>.CreateItemsAsync(string?, System.Collections.Generic.ICollection<TViewModel>, System.Threading.CancellationToken)
  fullName.vb: Quickie.Apis.Writeonly.WriteOnlyController(Of TViewModel, TRequestHandler).CreateItemsAsync(String, System.Collections.Generic.ICollection(Of TViewModel), System.Threading.CancellationToken)
  nameWithType: WriteOnlyController<TViewModel, TRequestHandler>.CreateItemsAsync(string?, ICollection<TViewModel>, CancellationToken)
  nameWithType.vb: WriteOnlyController(Of TViewModel, TRequestHandler).CreateItemsAsync(String, ICollection(Of TViewModel), CancellationToken)
- uid: Quickie.Apis.Writeonly.WriteOnlyController`2.CreateItemsAsync*
  name: CreateItemsAsync
  href: api/Quickie.Apis.Writeonly.WriteOnlyController-2.html#Quickie_Apis_Writeonly_WriteOnlyController_2_CreateItemsAsync_
  commentId: Overload:Quickie.Apis.Writeonly.WriteOnlyController`2.CreateItemsAsync
  isSpec: "True"
  fullName: Quickie.Apis.Writeonly.WriteOnlyController<TViewModel, TRequestHandler>.CreateItemsAsync
  fullName.vb: Quickie.Apis.Writeonly.WriteOnlyController(Of TViewModel, TRequestHandler).CreateItemsAsync
  nameWithType: WriteOnlyController<TViewModel, TRequestHandler>.CreateItemsAsync
  nameWithType.vb: WriteOnlyController(Of TViewModel, TRequestHandler).CreateItemsAsync
- uid: Quickie.Base
  name: Quickie.Base
  href: api/Quickie.Base.html
  commentId: N:Quickie.Base
  fullName: Quickie.Base
  nameWithType: Quickie.Base
- uid: Quickie.Base.QuickieBaseApi
  name: QuickieBaseApi
  href: api/Quickie.Base.QuickieBaseApi.html
  commentId: T:Quickie.Base.QuickieBaseApi
  fullName: Quickie.Base.QuickieBaseApi
  nameWithType: QuickieBaseApi
- uid: Quickie.Configuration
  name: Quickie.Configuration
  href: api/Quickie.Configuration.html
  commentId: N:Quickie.Configuration
  fullName: Quickie.Configuration
  nameWithType: Quickie.Configuration
- uid: Quickie.Configuration.DependencyResolver
  name: DependencyResolver
  href: api/Quickie.Configuration.DependencyResolver.html
  commentId: T:Quickie.Configuration.DependencyResolver
  fullName: Quickie.Configuration.DependencyResolver
  nameWithType: DependencyResolver
- uid: Quickie.Configuration.DependencyResolver.AddDataHandlersDependency(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name: AddDataHandlersDependency(IServiceCollection)
  href: api/Quickie.Configuration.DependencyResolver.html#Quickie_Configuration_DependencyResolver_AddDataHandlersDependency_Microsoft_Extensions_DependencyInjection_IServiceCollection_
  commentId: M:Quickie.Configuration.DependencyResolver.AddDataHandlersDependency(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  fullName: Quickie.Configuration.DependencyResolver.AddDataHandlersDependency(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  nameWithType: DependencyResolver.AddDataHandlersDependency(IServiceCollection)
- uid: Quickie.Configuration.DependencyResolver.AddDataHandlersDependency*
  name: AddDataHandlersDependency
  href: api/Quickie.Configuration.DependencyResolver.html#Quickie_Configuration_DependencyResolver_AddDataHandlersDependency_
  commentId: Overload:Quickie.Configuration.DependencyResolver.AddDataHandlersDependency
  isSpec: "True"
  fullName: Quickie.Configuration.DependencyResolver.AddDataHandlersDependency
  nameWithType: DependencyResolver.AddDataHandlersDependency
- uid: Quickie.Configuration.Idempotency
  name: Quickie.Configuration.Idempotency
  href: api/Quickie.Configuration.Idempotency.html
  commentId: N:Quickie.Configuration.Idempotency
  fullName: Quickie.Configuration.Idempotency
  nameWithType: Quickie.Configuration.Idempotency
- uid: Quickie.Configuration.Idempotency.DefaultProvider
  name: Quickie.Configuration.Idempotency.DefaultProvider
  href: api/Quickie.Configuration.Idempotency.DefaultProvider.html
  commentId: N:Quickie.Configuration.Idempotency.DefaultProvider
  fullName: Quickie.Configuration.Idempotency.DefaultProvider
  nameWithType: Quickie.Configuration.Idempotency.DefaultProvider
- uid: Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider
  name: InMemoryIdempotencyProvider
  href: api/Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.html
  commentId: T:Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider
  fullName: Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider
  nameWithType: InMemoryIdempotencyProvider
- uid: Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.ExistsAsync(System.String)
  name: ExistsAsync(string)
  href: api/Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.html#Quickie_Configuration_Idempotency_DefaultProvider_InMemoryIdempotencyProvider_ExistsAsync_System_String_
  commentId: M:Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.ExistsAsync(System.String)
  name.vb: ExistsAsync(String)
  fullName: Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.ExistsAsync(string)
  fullName.vb: Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.ExistsAsync(String)
  nameWithType: InMemoryIdempotencyProvider.ExistsAsync(string)
  nameWithType.vb: InMemoryIdempotencyProvider.ExistsAsync(String)
- uid: Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.ExistsAsync*
  name: ExistsAsync
  href: api/Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.html#Quickie_Configuration_Idempotency_DefaultProvider_InMemoryIdempotencyProvider_ExistsAsync_
  commentId: Overload:Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.ExistsAsync
  isSpec: "True"
  fullName: Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.ExistsAsync
  nameWithType: InMemoryIdempotencyProvider.ExistsAsync
- uid: Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.MarkAsync(System.String)
  name: MarkAsync(string)
  href: api/Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.html#Quickie_Configuration_Idempotency_DefaultProvider_InMemoryIdempotencyProvider_MarkAsync_System_String_
  commentId: M:Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.MarkAsync(System.String)
  name.vb: MarkAsync(String)
  fullName: Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.MarkAsync(string)
  fullName.vb: Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.MarkAsync(String)
  nameWithType: InMemoryIdempotencyProvider.MarkAsync(string)
  nameWithType.vb: InMemoryIdempotencyProvider.MarkAsync(String)
- uid: Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.MarkAsync*
  name: MarkAsync
  href: api/Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.html#Quickie_Configuration_Idempotency_DefaultProvider_InMemoryIdempotencyProvider_MarkAsync_
  commentId: Overload:Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.MarkAsync
  isSpec: "True"
  fullName: Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.MarkAsync
  nameWithType: InMemoryIdempotencyProvider.MarkAsync
- uid: Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.RemoveExpiredKeys
  name: RemoveExpiredKeys()
  href: api/Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.html#Quickie_Configuration_Idempotency_DefaultProvider_InMemoryIdempotencyProvider_RemoveExpiredKeys
  commentId: M:Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.RemoveExpiredKeys
  fullName: Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.RemoveExpiredKeys()
  nameWithType: InMemoryIdempotencyProvider.RemoveExpiredKeys()
- uid: Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.RemoveExpiredKeys*
  name: RemoveExpiredKeys
  href: api/Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.html#Quickie_Configuration_Idempotency_DefaultProvider_InMemoryIdempotencyProvider_RemoveExpiredKeys_
  commentId: Overload:Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.RemoveExpiredKeys
  isSpec: "True"
  fullName: Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.RemoveExpiredKeys
  nameWithType: InMemoryIdempotencyProvider.RemoveExpiredKeys
- uid: Quickie.Configuration.Idempotency.IIdempotencyProvider
  name: IIdempotencyProvider
  href: api/Quickie.Configuration.Idempotency.IIdempotencyProvider.html
  commentId: T:Quickie.Configuration.Idempotency.IIdempotencyProvider
  fullName: Quickie.Configuration.Idempotency.IIdempotencyProvider
  nameWithType: IIdempotencyProvider
- uid: Quickie.Configuration.Idempotency.IIdempotencyProvider.ExistsAsync(System.String)
  name: ExistsAsync(string)
  href: api/Quickie.Configuration.Idempotency.IIdempotencyProvider.html#Quickie_Configuration_Idempotency_IIdempotencyProvider_ExistsAsync_System_String_
  commentId: M:Quickie.Configuration.Idempotency.IIdempotencyProvider.ExistsAsync(System.String)
  name.vb: ExistsAsync(String)
  fullName: Quickie.Configuration.Idempotency.IIdempotencyProvider.ExistsAsync(string)
  fullName.vb: Quickie.Configuration.Idempotency.IIdempotencyProvider.ExistsAsync(String)
  nameWithType: IIdempotencyProvider.ExistsAsync(string)
  nameWithType.vb: IIdempotencyProvider.ExistsAsync(String)
- uid: Quickie.Configuration.Idempotency.IIdempotencyProvider.ExistsAsync*
  name: ExistsAsync
  href: api/Quickie.Configuration.Idempotency.IIdempotencyProvider.html#Quickie_Configuration_Idempotency_IIdempotencyProvider_ExistsAsync_
  commentId: Overload:Quickie.Configuration.Idempotency.IIdempotencyProvider.ExistsAsync
  isSpec: "True"
  fullName: Quickie.Configuration.Idempotency.IIdempotencyProvider.ExistsAsync
  nameWithType: IIdempotencyProvider.ExistsAsync
- uid: Quickie.Configuration.Idempotency.IIdempotencyProvider.MarkAsync(System.String)
  name: MarkAsync(string)
  href: api/Quickie.Configuration.Idempotency.IIdempotencyProvider.html#Quickie_Configuration_Idempotency_IIdempotencyProvider_MarkAsync_System_String_
  commentId: M:Quickie.Configuration.Idempotency.IIdempotencyProvider.MarkAsync(System.String)
  name.vb: MarkAsync(String)
  fullName: Quickie.Configuration.Idempotency.IIdempotencyProvider.MarkAsync(string)
  fullName.vb: Quickie.Configuration.Idempotency.IIdempotencyProvider.MarkAsync(String)
  nameWithType: IIdempotencyProvider.MarkAsync(string)
  nameWithType.vb: IIdempotencyProvider.MarkAsync(String)
- uid: Quickie.Configuration.Idempotency.IIdempotencyProvider.MarkAsync*
  name: MarkAsync
  href: api/Quickie.Configuration.Idempotency.IIdempotencyProvider.html#Quickie_Configuration_Idempotency_IIdempotencyProvider_MarkAsync_
  commentId: Overload:Quickie.Configuration.Idempotency.IIdempotencyProvider.MarkAsync
  isSpec: "True"
  fullName: Quickie.Configuration.Idempotency.IIdempotencyProvider.MarkAsync
  nameWithType: IIdempotencyProvider.MarkAsync
- uid: Quickie.Configuration.Idempotency.IIdempotencyProvider.RemoveExpiredKeys
  name: RemoveExpiredKeys()
  href: api/Quickie.Configuration.Idempotency.IIdempotencyProvider.html#Quickie_Configuration_Idempotency_IIdempotencyProvider_RemoveExpiredKeys
  commentId: M:Quickie.Configuration.Idempotency.IIdempotencyProvider.RemoveExpiredKeys
  fullName: Quickie.Configuration.Idempotency.IIdempotencyProvider.RemoveExpiredKeys()
  nameWithType: IIdempotencyProvider.RemoveExpiredKeys()
- uid: Quickie.Configuration.Idempotency.IIdempotencyProvider.RemoveExpiredKeys*
  name: RemoveExpiredKeys
  href: api/Quickie.Configuration.Idempotency.IIdempotencyProvider.html#Quickie_Configuration_Idempotency_IIdempotencyProvider_RemoveExpiredKeys_
  commentId: Overload:Quickie.Configuration.Idempotency.IIdempotencyProvider.RemoveExpiredKeys
  isSpec: "True"
  fullName: Quickie.Configuration.Idempotency.IIdempotencyProvider.RemoveExpiredKeys
  nameWithType: IIdempotencyProvider.RemoveExpiredKeys
- uid: Quickie.Configuration.Idempotency.IdempotencyBackgroundService
  name: IdempotencyBackgroundService
  href: api/Quickie.Configuration.Idempotency.IdempotencyBackgroundService.html
  commentId: T:Quickie.Configuration.Idempotency.IdempotencyBackgroundService
  fullName: Quickie.Configuration.Idempotency.IdempotencyBackgroundService
  nameWithType: IdempotencyBackgroundService
- uid: Quickie.Configuration.Idempotency.IdempotencyBackgroundService.#ctor(Quickie.Configuration.Idempotency.IIdempotencyProvider)
  name: IdempotencyBackgroundService(IIdempotencyProvider)
  href: api/Quickie.Configuration.Idempotency.IdempotencyBackgroundService.html#Quickie_Configuration_Idempotency_IdempotencyBackgroundService__ctor_Quickie_Configuration_Idempotency_IIdempotencyProvider_
  commentId: M:Quickie.Configuration.Idempotency.IdempotencyBackgroundService.#ctor(Quickie.Configuration.Idempotency.IIdempotencyProvider)
  name.vb: New(IIdempotencyProvider)
  fullName: Quickie.Configuration.Idempotency.IdempotencyBackgroundService.IdempotencyBackgroundService(Quickie.Configuration.Idempotency.IIdempotencyProvider)
  fullName.vb: Quickie.Configuration.Idempotency.IdempotencyBackgroundService.New(Quickie.Configuration.Idempotency.IIdempotencyProvider)
  nameWithType: IdempotencyBackgroundService.IdempotencyBackgroundService(IIdempotencyProvider)
  nameWithType.vb: IdempotencyBackgroundService.New(IIdempotencyProvider)
- uid: Quickie.Configuration.Idempotency.IdempotencyBackgroundService.#ctor*
  name: IdempotencyBackgroundService
  href: api/Quickie.Configuration.Idempotency.IdempotencyBackgroundService.html#Quickie_Configuration_Idempotency_IdempotencyBackgroundService__ctor_
  commentId: Overload:Quickie.Configuration.Idempotency.IdempotencyBackgroundService.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Configuration.Idempotency.IdempotencyBackgroundService.IdempotencyBackgroundService
  fullName.vb: Quickie.Configuration.Idempotency.IdempotencyBackgroundService.New
  nameWithType: IdempotencyBackgroundService.IdempotencyBackgroundService
  nameWithType.vb: IdempotencyBackgroundService.New
- uid: Quickie.Configuration.Idempotency.IdempotencyBackgroundService.ExecuteAsync(System.Threading.CancellationToken)
  name: ExecuteAsync(CancellationToken)
  href: api/Quickie.Configuration.Idempotency.IdempotencyBackgroundService.html#Quickie_Configuration_Idempotency_IdempotencyBackgroundService_ExecuteAsync_System_Threading_CancellationToken_
  commentId: M:Quickie.Configuration.Idempotency.IdempotencyBackgroundService.ExecuteAsync(System.Threading.CancellationToken)
  fullName: Quickie.Configuration.Idempotency.IdempotencyBackgroundService.ExecuteAsync(System.Threading.CancellationToken)
  nameWithType: IdempotencyBackgroundService.ExecuteAsync(CancellationToken)
- uid: Quickie.Configuration.Idempotency.IdempotencyBackgroundService.ExecuteAsync*
  name: ExecuteAsync
  href: api/Quickie.Configuration.Idempotency.IdempotencyBackgroundService.html#Quickie_Configuration_Idempotency_IdempotencyBackgroundService_ExecuteAsync_
  commentId: Overload:Quickie.Configuration.Idempotency.IdempotencyBackgroundService.ExecuteAsync
  isSpec: "True"
  fullName: Quickie.Configuration.Idempotency.IdempotencyBackgroundService.ExecuteAsync
  nameWithType: IdempotencyBackgroundService.ExecuteAsync
- uid: Quickie.Configuration.Idempotency.IdempotentConfiguration
  name: IdempotentConfiguration
  href: api/Quickie.Configuration.Idempotency.IdempotentConfiguration.html
  commentId: T:Quickie.Configuration.Idempotency.IdempotentConfiguration
  fullName: Quickie.Configuration.Idempotency.IdempotentConfiguration
  nameWithType: IdempotentConfiguration
- uid: Quickie.Configuration.Idempotency.IdempotentConfiguration.Enable
  name: Enable
  href: api/Quickie.Configuration.Idempotency.IdempotentConfiguration.html#Quickie_Configuration_Idempotency_IdempotentConfiguration_Enable
  commentId: P:Quickie.Configuration.Idempotency.IdempotentConfiguration.Enable
  fullName: Quickie.Configuration.Idempotency.IdempotentConfiguration.Enable
  nameWithType: IdempotentConfiguration.Enable
- uid: Quickie.Configuration.Idempotency.IdempotentConfiguration.Enable*
  name: Enable
  href: api/Quickie.Configuration.Idempotency.IdempotentConfiguration.html#Quickie_Configuration_Idempotency_IdempotentConfiguration_Enable_
  commentId: Overload:Quickie.Configuration.Idempotency.IdempotentConfiguration.Enable
  isSpec: "True"
  fullName: Quickie.Configuration.Idempotency.IdempotentConfiguration.Enable
  nameWithType: IdempotentConfiguration.Enable
- uid: Quickie.Configuration.Idempotency.IdempotentConfiguration.IdempotencyLifespan
  name: IdempotencyLifespan
  href: api/Quickie.Configuration.Idempotency.IdempotentConfiguration.html#Quickie_Configuration_Idempotency_IdempotentConfiguration_IdempotencyLifespan
  commentId: P:Quickie.Configuration.Idempotency.IdempotentConfiguration.IdempotencyLifespan
  fullName: Quickie.Configuration.Idempotency.IdempotentConfiguration.IdempotencyLifespan
  nameWithType: IdempotentConfiguration.IdempotencyLifespan
- uid: Quickie.Configuration.Idempotency.IdempotentConfiguration.IdempotencyLifespan*
  name: IdempotencyLifespan
  href: api/Quickie.Configuration.Idempotency.IdempotentConfiguration.html#Quickie_Configuration_Idempotency_IdempotentConfiguration_IdempotencyLifespan_
  commentId: Overload:Quickie.Configuration.Idempotency.IdempotentConfiguration.IdempotencyLifespan
  isSpec: "True"
  fullName: Quickie.Configuration.Idempotency.IdempotentConfiguration.IdempotencyLifespan
  nameWithType: IdempotentConfiguration.IdempotencyLifespan
- uid: Quickie.Configuration.Idempotency.IdempotentConfiguration.Provider
  name: Provider
  href: api/Quickie.Configuration.Idempotency.IdempotentConfiguration.html#Quickie_Configuration_Idempotency_IdempotentConfiguration_Provider
  commentId: P:Quickie.Configuration.Idempotency.IdempotentConfiguration.Provider
  fullName: Quickie.Configuration.Idempotency.IdempotentConfiguration.Provider
  nameWithType: IdempotentConfiguration.Provider
- uid: Quickie.Configuration.Idempotency.IdempotentConfiguration.Provider*
  name: Provider
  href: api/Quickie.Configuration.Idempotency.IdempotentConfiguration.html#Quickie_Configuration_Idempotency_IdempotentConfiguration_Provider_
  commentId: Overload:Quickie.Configuration.Idempotency.IdempotentConfiguration.Provider
  isSpec: "True"
  fullName: Quickie.Configuration.Idempotency.IdempotentConfiguration.Provider
  nameWithType: IdempotentConfiguration.Provider
- uid: Quickie.Configuration.Idempotency.IdempotentConfiguration.RunBackgroundServiceEveryHour
  name: RunBackgroundServiceEveryHour
  href: api/Quickie.Configuration.Idempotency.IdempotentConfiguration.html#Quickie_Configuration_Idempotency_IdempotentConfiguration_RunBackgroundServiceEveryHour
  commentId: P:Quickie.Configuration.Idempotency.IdempotentConfiguration.RunBackgroundServiceEveryHour
  fullName: Quickie.Configuration.Idempotency.IdempotentConfiguration.RunBackgroundServiceEveryHour
  nameWithType: IdempotentConfiguration.RunBackgroundServiceEveryHour
- uid: Quickie.Configuration.Idempotency.IdempotentConfiguration.RunBackgroundServiceEveryHour*
  name: RunBackgroundServiceEveryHour
  href: api/Quickie.Configuration.Idempotency.IdempotentConfiguration.html#Quickie_Configuration_Idempotency_IdempotentConfiguration_RunBackgroundServiceEveryHour_
  commentId: Overload:Quickie.Configuration.Idempotency.IdempotentConfiguration.RunBackgroundServiceEveryHour
  isSpec: "True"
  fullName: Quickie.Configuration.Idempotency.IdempotentConfiguration.RunBackgroundServiceEveryHour
  nameWithType: IdempotentConfiguration.RunBackgroundServiceEveryHour
- uid: Quickie.Configuration.Middleware
  name: Quickie.Configuration.Middleware
  href: api/Quickie.Configuration.Middleware.html
  commentId: N:Quickie.Configuration.Middleware
  fullName: Quickie.Configuration.Middleware
  nameWithType: Quickie.Configuration.Middleware
- uid: Quickie.Configuration.Middleware.IdempotencyMiddleware
  name: IdempotencyMiddleware
  href: api/Quickie.Configuration.Middleware.IdempotencyMiddleware.html
  commentId: T:Quickie.Configuration.Middleware.IdempotencyMiddleware
  fullName: Quickie.Configuration.Middleware.IdempotencyMiddleware
  nameWithType: IdempotencyMiddleware
- uid: Quickie.Configuration.Middleware.IdempotencyMiddleware.#ctor(Quickie.Configuration.Idempotency.IIdempotencyProvider,Microsoft.AspNetCore.Http.RequestDelegate)
  name: IdempotencyMiddleware(IIdempotencyProvider, RequestDelegate)
  href: api/Quickie.Configuration.Middleware.IdempotencyMiddleware.html#Quickie_Configuration_Middleware_IdempotencyMiddleware__ctor_Quickie_Configuration_Idempotency_IIdempotencyProvider_Microsoft_AspNetCore_Http_RequestDelegate_
  commentId: M:Quickie.Configuration.Middleware.IdempotencyMiddleware.#ctor(Quickie.Configuration.Idempotency.IIdempotencyProvider,Microsoft.AspNetCore.Http.RequestDelegate)
  name.vb: New(IIdempotencyProvider, RequestDelegate)
  fullName: Quickie.Configuration.Middleware.IdempotencyMiddleware.IdempotencyMiddleware(Quickie.Configuration.Idempotency.IIdempotencyProvider, Microsoft.AspNetCore.Http.RequestDelegate)
  fullName.vb: Quickie.Configuration.Middleware.IdempotencyMiddleware.New(Quickie.Configuration.Idempotency.IIdempotencyProvider, Microsoft.AspNetCore.Http.RequestDelegate)
  nameWithType: IdempotencyMiddleware.IdempotencyMiddleware(IIdempotencyProvider, RequestDelegate)
  nameWithType.vb: IdempotencyMiddleware.New(IIdempotencyProvider, RequestDelegate)
- uid: Quickie.Configuration.Middleware.IdempotencyMiddleware.#ctor*
  name: IdempotencyMiddleware
  href: api/Quickie.Configuration.Middleware.IdempotencyMiddleware.html#Quickie_Configuration_Middleware_IdempotencyMiddleware__ctor_
  commentId: Overload:Quickie.Configuration.Middleware.IdempotencyMiddleware.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Configuration.Middleware.IdempotencyMiddleware.IdempotencyMiddleware
  fullName.vb: Quickie.Configuration.Middleware.IdempotencyMiddleware.New
  nameWithType: IdempotencyMiddleware.IdempotencyMiddleware
  nameWithType.vb: IdempotencyMiddleware.New
- uid: Quickie.Configuration.Middleware.IdempotencyMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)
  name: InvokeAsync(HttpContext)
  href: api/Quickie.Configuration.Middleware.IdempotencyMiddleware.html#Quickie_Configuration_Middleware_IdempotencyMiddleware_InvokeAsync_Microsoft_AspNetCore_Http_HttpContext_
  commentId: M:Quickie.Configuration.Middleware.IdempotencyMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)
  fullName: Quickie.Configuration.Middleware.IdempotencyMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)
  nameWithType: IdempotencyMiddleware.InvokeAsync(HttpContext)
- uid: Quickie.Configuration.Middleware.IdempotencyMiddleware.InvokeAsync*
  name: InvokeAsync
  href: api/Quickie.Configuration.Middleware.IdempotencyMiddleware.html#Quickie_Configuration_Middleware_IdempotencyMiddleware_InvokeAsync_
  commentId: Overload:Quickie.Configuration.Middleware.IdempotencyMiddleware.InvokeAsync
  isSpec: "True"
  fullName: Quickie.Configuration.Middleware.IdempotencyMiddleware.InvokeAsync
  nameWithType: IdempotencyMiddleware.InvokeAsync
- uid: Quickie.Configuration.Options
  name: Quickie.Configuration.Options
  href: api/Quickie.Configuration.Options.html
  commentId: N:Quickie.Configuration.Options
  fullName: Quickie.Configuration.Options
  nameWithType: Quickie.Configuration.Options
- uid: Quickie.Configuration.Options.GlobalQuickieConfigData
  name: GlobalQuickieConfigData
  href: api/Quickie.Configuration.Options.GlobalQuickieConfigData.html
  commentId: T:Quickie.Configuration.Options.GlobalQuickieConfigData
  fullName: Quickie.Configuration.Options.GlobalQuickieConfigData
  nameWithType: GlobalQuickieConfigData
- uid: Quickie.Configuration.Options.GlobalQuickieConfigData.Initialize(Quickie.Configuration.QuickieOptions)
  name: Initialize(QuickieOptions)
  href: api/Quickie.Configuration.Options.GlobalQuickieConfigData.html#Quickie_Configuration_Options_GlobalQuickieConfigData_Initialize_Quickie_Configuration_QuickieOptions_
  commentId: M:Quickie.Configuration.Options.GlobalQuickieConfigData.Initialize(Quickie.Configuration.QuickieOptions)
  fullName: Quickie.Configuration.Options.GlobalQuickieConfigData.Initialize(Quickie.Configuration.QuickieOptions)
  nameWithType: GlobalQuickieConfigData.Initialize(QuickieOptions)
- uid: Quickie.Configuration.Options.GlobalQuickieConfigData.Initialize*
  name: Initialize
  href: api/Quickie.Configuration.Options.GlobalQuickieConfigData.html#Quickie_Configuration_Options_GlobalQuickieConfigData_Initialize_
  commentId: Overload:Quickie.Configuration.Options.GlobalQuickieConfigData.Initialize
  isSpec: "True"
  fullName: Quickie.Configuration.Options.GlobalQuickieConfigData.Initialize
  nameWithType: GlobalQuickieConfigData.Initialize
- uid: Quickie.Configuration.Options.GlobalQuickieConfigData.Options
  name: Options
  href: api/Quickie.Configuration.Options.GlobalQuickieConfigData.html#Quickie_Configuration_Options_GlobalQuickieConfigData_Options
  commentId: P:Quickie.Configuration.Options.GlobalQuickieConfigData.Options
  fullName: Quickie.Configuration.Options.GlobalQuickieConfigData.Options
  nameWithType: GlobalQuickieConfigData.Options
- uid: Quickie.Configuration.Options.GlobalQuickieConfigData.Options*
  name: Options
  href: api/Quickie.Configuration.Options.GlobalQuickieConfigData.html#Quickie_Configuration_Options_GlobalQuickieConfigData_Options_
  commentId: Overload:Quickie.Configuration.Options.GlobalQuickieConfigData.Options
  isSpec: "True"
  fullName: Quickie.Configuration.Options.GlobalQuickieConfigData.Options
  nameWithType: GlobalQuickieConfigData.Options
- uid: Quickie.Configuration.Options.RateLimitConfiguration
  name: RateLimitConfiguration
  href: api/Quickie.Configuration.Options.RateLimitConfiguration.html
  commentId: T:Quickie.Configuration.Options.RateLimitConfiguration
  fullName: Quickie.Configuration.Options.RateLimitConfiguration
  nameWithType: RateLimitConfiguration
- uid: Quickie.Configuration.Options.RateLimitConfiguration.DisableRateLimiting
  name: DisableRateLimiting
  href: api/Quickie.Configuration.Options.RateLimitConfiguration.html#Quickie_Configuration_Options_RateLimitConfiguration_DisableRateLimiting
  commentId: P:Quickie.Configuration.Options.RateLimitConfiguration.DisableRateLimiting
  fullName: Quickie.Configuration.Options.RateLimitConfiguration.DisableRateLimiting
  nameWithType: RateLimitConfiguration.DisableRateLimiting
- uid: Quickie.Configuration.Options.RateLimitConfiguration.DisableRateLimiting*
  name: DisableRateLimiting
  href: api/Quickie.Configuration.Options.RateLimitConfiguration.html#Quickie_Configuration_Options_RateLimitConfiguration_DisableRateLimiting_
  commentId: Overload:Quickie.Configuration.Options.RateLimitConfiguration.DisableRateLimiting
  isSpec: "True"
  fullName: Quickie.Configuration.Options.RateLimitConfiguration.DisableRateLimiting
  nameWithType: RateLimitConfiguration.DisableRateLimiting
- uid: Quickie.Configuration.Options.RateLimitConfiguration.FromSeconds
  name: FromSeconds
  href: api/Quickie.Configuration.Options.RateLimitConfiguration.html#Quickie_Configuration_Options_RateLimitConfiguration_FromSeconds
  commentId: P:Quickie.Configuration.Options.RateLimitConfiguration.FromSeconds
  fullName: Quickie.Configuration.Options.RateLimitConfiguration.FromSeconds
  nameWithType: RateLimitConfiguration.FromSeconds
- uid: Quickie.Configuration.Options.RateLimitConfiguration.FromSeconds*
  name: FromSeconds
  href: api/Quickie.Configuration.Options.RateLimitConfiguration.html#Quickie_Configuration_Options_RateLimitConfiguration_FromSeconds_
  commentId: Overload:Quickie.Configuration.Options.RateLimitConfiguration.FromSeconds
  isSpec: "True"
  fullName: Quickie.Configuration.Options.RateLimitConfiguration.FromSeconds
  nameWithType: RateLimitConfiguration.FromSeconds
- uid: Quickie.Configuration.Options.RateLimitConfiguration.PermitLimit
  name: PermitLimit
  href: api/Quickie.Configuration.Options.RateLimitConfiguration.html#Quickie_Configuration_Options_RateLimitConfiguration_PermitLimit
  commentId: P:Quickie.Configuration.Options.RateLimitConfiguration.PermitLimit
  fullName: Quickie.Configuration.Options.RateLimitConfiguration.PermitLimit
  nameWithType: RateLimitConfiguration.PermitLimit
- uid: Quickie.Configuration.Options.RateLimitConfiguration.PermitLimit*
  name: PermitLimit
  href: api/Quickie.Configuration.Options.RateLimitConfiguration.html#Quickie_Configuration_Options_RateLimitConfiguration_PermitLimit_
  commentId: Overload:Quickie.Configuration.Options.RateLimitConfiguration.PermitLimit
  isSpec: "True"
  fullName: Quickie.Configuration.Options.RateLimitConfiguration.PermitLimit
  nameWithType: RateLimitConfiguration.PermitLimit
- uid: Quickie.Configuration.Options.RateLimitConfiguration.PolicyName
  name: PolicyName
  href: api/Quickie.Configuration.Options.RateLimitConfiguration.html#Quickie_Configuration_Options_RateLimitConfiguration_PolicyName
  commentId: P:Quickie.Configuration.Options.RateLimitConfiguration.PolicyName
  fullName: Quickie.Configuration.Options.RateLimitConfiguration.PolicyName
  nameWithType: RateLimitConfiguration.PolicyName
- uid: Quickie.Configuration.Options.RateLimitConfiguration.PolicyName*
  name: PolicyName
  href: api/Quickie.Configuration.Options.RateLimitConfiguration.html#Quickie_Configuration_Options_RateLimitConfiguration_PolicyName_
  commentId: Overload:Quickie.Configuration.Options.RateLimitConfiguration.PolicyName
  isSpec: "True"
  fullName: Quickie.Configuration.Options.RateLimitConfiguration.PolicyName
  nameWithType: RateLimitConfiguration.PolicyName
- uid: Quickie.Configuration.QuickieExtension
  name: QuickieExtension
  href: api/Quickie.Configuration.QuickieExtension.html
  commentId: T:Quickie.Configuration.QuickieExtension
  fullName: Quickie.Configuration.QuickieExtension
  nameWithType: QuickieExtension
- uid: Quickie.Configuration.QuickieExtension.AddQuickie(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: AddQuickie(IApplicationBuilder)
  href: api/Quickie.Configuration.QuickieExtension.html#Quickie_Configuration_QuickieExtension_AddQuickie_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:Quickie.Configuration.QuickieExtension.AddQuickie(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: Quickie.Configuration.QuickieExtension.AddQuickie(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: QuickieExtension.AddQuickie(IApplicationBuilder)
- uid: Quickie.Configuration.QuickieExtension.AddQuickie*
  name: AddQuickie
  href: api/Quickie.Configuration.QuickieExtension.html#Quickie_Configuration_QuickieExtension_AddQuickie_
  commentId: Overload:Quickie.Configuration.QuickieExtension.AddQuickie
  isSpec: "True"
  fullName: Quickie.Configuration.QuickieExtension.AddQuickie
  nameWithType: QuickieExtension.AddQuickie
- uid: Quickie.Configuration.QuickieExtension.QuickieConfig(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Quickie.Configuration.QuickieOptions})
  name: QuickieConfig(IServiceCollection, Action<QuickieOptions>?)
  href: api/Quickie.Configuration.QuickieExtension.html#Quickie_Configuration_QuickieExtension_QuickieConfig_Microsoft_Extensions_DependencyInjection_IServiceCollection_System_Action_Quickie_Configuration_QuickieOptions__
  commentId: M:Quickie.Configuration.QuickieExtension.QuickieConfig(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Quickie.Configuration.QuickieOptions})
  name.vb: QuickieConfig(IServiceCollection, Action(Of QuickieOptions))
  fullName: Quickie.Configuration.QuickieExtension.QuickieConfig(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Quickie.Configuration.QuickieOptions>?)
  fullName.vb: Quickie.Configuration.QuickieExtension.QuickieConfig(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Quickie.Configuration.QuickieOptions))
  nameWithType: QuickieExtension.QuickieConfig(IServiceCollection, Action<QuickieOptions>?)
  nameWithType.vb: QuickieExtension.QuickieConfig(IServiceCollection, Action(Of QuickieOptions))
- uid: Quickie.Configuration.QuickieExtension.QuickieConfig*
  name: QuickieConfig
  href: api/Quickie.Configuration.QuickieExtension.html#Quickie_Configuration_QuickieExtension_QuickieConfig_
  commentId: Overload:Quickie.Configuration.QuickieExtension.QuickieConfig
  isSpec: "True"
  fullName: Quickie.Configuration.QuickieExtension.QuickieConfig
  nameWithType: QuickieExtension.QuickieConfig
- uid: Quickie.Configuration.QuickieOptions
  name: QuickieOptions
  href: api/Quickie.Configuration.QuickieOptions.html
  commentId: T:Quickie.Configuration.QuickieOptions
  fullName: Quickie.Configuration.QuickieOptions
  nameWithType: QuickieOptions
- uid: Quickie.Configuration.QuickieOptions.IdempotencyConfiguration
  name: IdempotencyConfiguration
  href: api/Quickie.Configuration.QuickieOptions.html#Quickie_Configuration_QuickieOptions_IdempotencyConfiguration
  commentId: P:Quickie.Configuration.QuickieOptions.IdempotencyConfiguration
  fullName: Quickie.Configuration.QuickieOptions.IdempotencyConfiguration
  nameWithType: QuickieOptions.IdempotencyConfiguration
- uid: Quickie.Configuration.QuickieOptions.IdempotencyConfiguration*
  name: IdempotencyConfiguration
  href: api/Quickie.Configuration.QuickieOptions.html#Quickie_Configuration_QuickieOptions_IdempotencyConfiguration_
  commentId: Overload:Quickie.Configuration.QuickieOptions.IdempotencyConfiguration
  isSpec: "True"
  fullName: Quickie.Configuration.QuickieOptions.IdempotencyConfiguration
  nameWithType: QuickieOptions.IdempotencyConfiguration
- uid: Quickie.Configuration.QuickieOptions.RateLimitingConfiguration
  name: RateLimitingConfiguration
  href: api/Quickie.Configuration.QuickieOptions.html#Quickie_Configuration_QuickieOptions_RateLimitingConfiguration
  commentId: P:Quickie.Configuration.QuickieOptions.RateLimitingConfiguration
  fullName: Quickie.Configuration.QuickieOptions.RateLimitingConfiguration
  nameWithType: QuickieOptions.RateLimitingConfiguration
- uid: Quickie.Configuration.QuickieOptions.RateLimitingConfiguration*
  name: RateLimitingConfiguration
  href: api/Quickie.Configuration.QuickieOptions.html#Quickie_Configuration_QuickieOptions_RateLimitingConfiguration_
  commentId: Overload:Quickie.Configuration.QuickieOptions.RateLimitingConfiguration
  isSpec: "True"
  fullName: Quickie.Configuration.QuickieOptions.RateLimitingConfiguration
  nameWithType: QuickieOptions.RateLimitingConfiguration
- uid: Quickie.Configuration.QuickieOptions.ShowCustomErrorMessage
  name: ShowCustomErrorMessage
  href: api/Quickie.Configuration.QuickieOptions.html#Quickie_Configuration_QuickieOptions_ShowCustomErrorMessage
  commentId: P:Quickie.Configuration.QuickieOptions.ShowCustomErrorMessage
  fullName: Quickie.Configuration.QuickieOptions.ShowCustomErrorMessage
  nameWithType: QuickieOptions.ShowCustomErrorMessage
- uid: Quickie.Configuration.QuickieOptions.ShowCustomErrorMessage*
  name: ShowCustomErrorMessage
  href: api/Quickie.Configuration.QuickieOptions.html#Quickie_Configuration_QuickieOptions_ShowCustomErrorMessage_
  commentId: Overload:Quickie.Configuration.QuickieOptions.ShowCustomErrorMessage
  isSpec: "True"
  fullName: Quickie.Configuration.QuickieOptions.ShowCustomErrorMessage
  nameWithType: QuickieOptions.ShowCustomErrorMessage
- uid: Quickie.Controllers.Readonly
  name: Quickie.Controllers.Readonly
  href: api/Quickie.Controllers.Readonly.html
  commentId: N:Quickie.Controllers.Readonly
  fullName: Quickie.Controllers.Readonly
  nameWithType: Quickie.Controllers.Readonly
- uid: Quickie.Controllers.Readonly.ReadOnlyController`2
  name: ReadOnlyController<TViewModel, TRequestHandler>
  href: api/Quickie.Controllers.Readonly.ReadOnlyController-2.html
  commentId: T:Quickie.Controllers.Readonly.ReadOnlyController`2
  name.vb: ReadOnlyController(Of TViewModel, TRequestHandler)
  fullName: Quickie.Controllers.Readonly.ReadOnlyController<TViewModel, TRequestHandler>
  fullName.vb: Quickie.Controllers.Readonly.ReadOnlyController(Of TViewModel, TRequestHandler)
  nameWithType: ReadOnlyController<TViewModel, TRequestHandler>
  nameWithType.vb: ReadOnlyController(Of TViewModel, TRequestHandler)
- uid: Quickie.Controllers.Readonly.ReadOnlyController`2.#ctor(`1)
  name: ReadOnlyController(TRequestHandler)
  href: api/Quickie.Controllers.Readonly.ReadOnlyController-2.html#Quickie_Controllers_Readonly_ReadOnlyController_2__ctor__1_
  commentId: M:Quickie.Controllers.Readonly.ReadOnlyController`2.#ctor(`1)
  name.vb: New(TRequestHandler)
  fullName: Quickie.Controllers.Readonly.ReadOnlyController<TViewModel, TRequestHandler>.ReadOnlyController(TRequestHandler)
  fullName.vb: Quickie.Controllers.Readonly.ReadOnlyController(Of TViewModel, TRequestHandler).New(TRequestHandler)
  nameWithType: ReadOnlyController<TViewModel, TRequestHandler>.ReadOnlyController(TRequestHandler)
  nameWithType.vb: ReadOnlyController(Of TViewModel, TRequestHandler).New(TRequestHandler)
- uid: Quickie.Controllers.Readonly.ReadOnlyController`2.#ctor*
  name: ReadOnlyController
  href: api/Quickie.Controllers.Readonly.ReadOnlyController-2.html#Quickie_Controllers_Readonly_ReadOnlyController_2__ctor_
  commentId: Overload:Quickie.Controllers.Readonly.ReadOnlyController`2.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Controllers.Readonly.ReadOnlyController<TViewModel, TRequestHandler>.ReadOnlyController
  fullName.vb: Quickie.Controllers.Readonly.ReadOnlyController(Of TViewModel, TRequestHandler).New
  nameWithType: ReadOnlyController<TViewModel, TRequestHandler>.ReadOnlyController
  nameWithType.vb: ReadOnlyController(Of TViewModel, TRequestHandler).New
- uid: Quickie.DataHandlers.Crud.Definition
  name: Quickie.DataHandlers.Crud.Definition
  href: api/Quickie.DataHandlers.Crud.Definition.html
  commentId: N:Quickie.DataHandlers.Crud.Definition
  fullName: Quickie.DataHandlers.Crud.Definition
  nameWithType: Quickie.DataHandlers.Crud.Definition
- uid: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler`2
  name: ICrudDataHandler<TEntity, TIdType>
  href: api/Quickie.DataHandlers.Crud.Definition.ICrudDataHandler-2.html
  commentId: T:Quickie.DataHandlers.Crud.Definition.ICrudDataHandler`2
  name.vb: ICrudDataHandler(Of TEntity, TIdType)
  fullName: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler<TEntity, TIdType>
  fullName.vb: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler(Of TEntity, TIdType)
  nameWithType: ICrudDataHandler<TEntity, TIdType>
  nameWithType.vb: ICrudDataHandler(Of TEntity, TIdType)
- uid: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler`2.CreateAsync(`0,System.Nullable{System.Threading.CancellationToken})
  name: CreateAsync(TEntity, CancellationToken?)
  href: api/Quickie.DataHandlers.Crud.Definition.ICrudDataHandler-2.html#Quickie_DataHandlers_Crud_Definition_ICrudDataHandler_2_CreateAsync__0_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Crud.Definition.ICrudDataHandler`2.CreateAsync(`0,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler<TEntity, TIdType>.CreateAsync(TEntity, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler(Of TEntity, TIdType).CreateAsync(TEntity, System.Threading.CancellationToken?)
  nameWithType: ICrudDataHandler<TEntity, TIdType>.CreateAsync(TEntity, CancellationToken?)
  nameWithType.vb: ICrudDataHandler(Of TEntity, TIdType).CreateAsync(TEntity, CancellationToken?)
- uid: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler`2.CreateAsync*
  name: CreateAsync
  href: api/Quickie.DataHandlers.Crud.Definition.ICrudDataHandler-2.html#Quickie_DataHandlers_Crud_Definition_ICrudDataHandler_2_CreateAsync_
  commentId: Overload:Quickie.DataHandlers.Crud.Definition.ICrudDataHandler`2.CreateAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler<TEntity, TIdType>.CreateAsync
  fullName.vb: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler(Of TEntity, TIdType).CreateAsync
  nameWithType: ICrudDataHandler<TEntity, TIdType>.CreateAsync
  nameWithType.vb: ICrudDataHandler(Of TEntity, TIdType).CreateAsync
- uid: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler`2.DeleteAsync(`1,System.Nullable{System.Threading.CancellationToken})
  name: DeleteAsync(TIdType, CancellationToken?)
  href: api/Quickie.DataHandlers.Crud.Definition.ICrudDataHandler-2.html#Quickie_DataHandlers_Crud_Definition_ICrudDataHandler_2_DeleteAsync__1_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Crud.Definition.ICrudDataHandler`2.DeleteAsync(`1,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler<TEntity, TIdType>.DeleteAsync(TIdType, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler(Of TEntity, TIdType).DeleteAsync(TIdType, System.Threading.CancellationToken?)
  nameWithType: ICrudDataHandler<TEntity, TIdType>.DeleteAsync(TIdType, CancellationToken?)
  nameWithType.vb: ICrudDataHandler(Of TEntity, TIdType).DeleteAsync(TIdType, CancellationToken?)
- uid: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler`2.DeleteAsync*
  name: DeleteAsync
  href: api/Quickie.DataHandlers.Crud.Definition.ICrudDataHandler-2.html#Quickie_DataHandlers_Crud_Definition_ICrudDataHandler_2_DeleteAsync_
  commentId: Overload:Quickie.DataHandlers.Crud.Definition.ICrudDataHandler`2.DeleteAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler<TEntity, TIdType>.DeleteAsync
  fullName.vb: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler(Of TEntity, TIdType).DeleteAsync
  nameWithType: ICrudDataHandler<TEntity, TIdType>.DeleteAsync
  nameWithType.vb: ICrudDataHandler(Of TEntity, TIdType).DeleteAsync
- uid: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler`2.GetByIdAsync(`1,System.Nullable{System.Threading.CancellationToken})
  name: GetByIdAsync(TIdType, CancellationToken?)
  href: api/Quickie.DataHandlers.Crud.Definition.ICrudDataHandler-2.html#Quickie_DataHandlers_Crud_Definition_ICrudDataHandler_2_GetByIdAsync__1_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Crud.Definition.ICrudDataHandler`2.GetByIdAsync(`1,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler<TEntity, TIdType>.GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler(Of TEntity, TIdType).GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  nameWithType: ICrudDataHandler<TEntity, TIdType>.GetByIdAsync(TIdType, CancellationToken?)
  nameWithType.vb: ICrudDataHandler(Of TEntity, TIdType).GetByIdAsync(TIdType, CancellationToken?)
- uid: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler`2.GetByIdAsync*
  name: GetByIdAsync
  href: api/Quickie.DataHandlers.Crud.Definition.ICrudDataHandler-2.html#Quickie_DataHandlers_Crud_Definition_ICrudDataHandler_2_GetByIdAsync_
  commentId: Overload:Quickie.DataHandlers.Crud.Definition.ICrudDataHandler`2.GetByIdAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler<TEntity, TIdType>.GetByIdAsync
  fullName.vb: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler(Of TEntity, TIdType).GetByIdAsync
  nameWithType: ICrudDataHandler<TEntity, TIdType>.GetByIdAsync
  nameWithType.vb: ICrudDataHandler(Of TEntity, TIdType).GetByIdAsync
- uid: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler`2.UpdateAsync(`1,`0,System.Nullable{System.Threading.CancellationToken})
  name: UpdateAsync(TIdType, TEntity, CancellationToken?)
  href: api/Quickie.DataHandlers.Crud.Definition.ICrudDataHandler-2.html#Quickie_DataHandlers_Crud_Definition_ICrudDataHandler_2_UpdateAsync__1__0_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Crud.Definition.ICrudDataHandler`2.UpdateAsync(`1,`0,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler<TEntity, TIdType>.UpdateAsync(TIdType, TEntity, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler(Of TEntity, TIdType).UpdateAsync(TIdType, TEntity, System.Threading.CancellationToken?)
  nameWithType: ICrudDataHandler<TEntity, TIdType>.UpdateAsync(TIdType, TEntity, CancellationToken?)
  nameWithType.vb: ICrudDataHandler(Of TEntity, TIdType).UpdateAsync(TIdType, TEntity, CancellationToken?)
- uid: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler`2.UpdateAsync*
  name: UpdateAsync
  href: api/Quickie.DataHandlers.Crud.Definition.ICrudDataHandler-2.html#Quickie_DataHandlers_Crud_Definition_ICrudDataHandler_2_UpdateAsync_
  commentId: Overload:Quickie.DataHandlers.Crud.Definition.ICrudDataHandler`2.UpdateAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler<TEntity, TIdType>.UpdateAsync
  fullName.vb: Quickie.DataHandlers.Crud.Definition.ICrudDataHandler(Of TEntity, TIdType).UpdateAsync
  nameWithType: ICrudDataHandler<TEntity, TIdType>.UpdateAsync
  nameWithType.vb: ICrudDataHandler(Of TEntity, TIdType).UpdateAsync
- uid: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2
  name: ICrudForCollectionDataHandler<TEntity, TIdType>
  href: api/Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler-2.html
  commentId: T:Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2
  name.vb: ICrudForCollectionDataHandler(Of TEntity, TIdType)
  fullName: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler<TEntity, TIdType>
  fullName.vb: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler(Of TEntity, TIdType)
  nameWithType: ICrudForCollectionDataHandler<TEntity, TIdType>
  nameWithType.vb: ICrudForCollectionDataHandler(Of TEntity, TIdType)
- uid: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2.CountAsync(System.Nullable{System.Threading.CancellationToken})
  name: CountAsync(CancellationToken?)
  href: api/Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler-2.html#Quickie_DataHandlers_Crud_Definition_ICrudForCollectionDataHandler_2_CountAsync_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2.CountAsync(System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler<TEntity, TIdType>.CountAsync(System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler(Of TEntity, TIdType).CountAsync(System.Threading.CancellationToken?)
  nameWithType: ICrudForCollectionDataHandler<TEntity, TIdType>.CountAsync(CancellationToken?)
  nameWithType.vb: ICrudForCollectionDataHandler(Of TEntity, TIdType).CountAsync(CancellationToken?)
- uid: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2.CountAsync*
  name: CountAsync
  href: api/Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler-2.html#Quickie_DataHandlers_Crud_Definition_ICrudForCollectionDataHandler_2_CountAsync_
  commentId: Overload:Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2.CountAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler<TEntity, TIdType>.CountAsync
  fullName.vb: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler(Of TEntity, TIdType).CountAsync
  nameWithType: ICrudForCollectionDataHandler<TEntity, TIdType>.CountAsync
  nameWithType.vb: ICrudForCollectionDataHandler(Of TEntity, TIdType).CountAsync
- uid: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2.CreateRangeAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name: CreateRangeAsync(ICollection<TEntity>, CancellationToken?)
  href: api/Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler-2.html#Quickie_DataHandlers_Crud_Definition_ICrudForCollectionDataHandler_2_CreateRangeAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2.CreateRangeAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name.vb: CreateRangeAsync(ICollection(Of TEntity), CancellationToken?)
  fullName: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler<TEntity, TIdType>.CreateRangeAsync(System.Collections.Generic.ICollection<TEntity>, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler(Of TEntity, TIdType).CreateRangeAsync(System.Collections.Generic.ICollection(Of TEntity), System.Threading.CancellationToken?)
  nameWithType: ICrudForCollectionDataHandler<TEntity, TIdType>.CreateRangeAsync(ICollection<TEntity>, CancellationToken?)
  nameWithType.vb: ICrudForCollectionDataHandler(Of TEntity, TIdType).CreateRangeAsync(ICollection(Of TEntity), CancellationToken?)
- uid: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2.CreateRangeAsync*
  name: CreateRangeAsync
  href: api/Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler-2.html#Quickie_DataHandlers_Crud_Definition_ICrudForCollectionDataHandler_2_CreateRangeAsync_
  commentId: Overload:Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2.CreateRangeAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler<TEntity, TIdType>.CreateRangeAsync
  fullName.vb: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler(Of TEntity, TIdType).CreateRangeAsync
  nameWithType: ICrudForCollectionDataHandler<TEntity, TIdType>.CreateRangeAsync
  nameWithType.vb: ICrudForCollectionDataHandler(Of TEntity, TIdType).CreateRangeAsync
- uid: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2.DeleteRangeAsync(System.Collections.Generic.ICollection{`1},System.Nullable{System.Threading.CancellationToken})
  name: DeleteRangeAsync(ICollection<TIdType>, CancellationToken?)
  href: api/Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler-2.html#Quickie_DataHandlers_Crud_Definition_ICrudForCollectionDataHandler_2_DeleteRangeAsync_System_Collections_Generic_ICollection__1__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2.DeleteRangeAsync(System.Collections.Generic.ICollection{`1},System.Nullable{System.Threading.CancellationToken})
  name.vb: DeleteRangeAsync(ICollection(Of TIdType), CancellationToken?)
  fullName: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler<TEntity, TIdType>.DeleteRangeAsync(System.Collections.Generic.ICollection<TIdType>, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler(Of TEntity, TIdType).DeleteRangeAsync(System.Collections.Generic.ICollection(Of TIdType), System.Threading.CancellationToken?)
  nameWithType: ICrudForCollectionDataHandler<TEntity, TIdType>.DeleteRangeAsync(ICollection<TIdType>, CancellationToken?)
  nameWithType.vb: ICrudForCollectionDataHandler(Of TEntity, TIdType).DeleteRangeAsync(ICollection(Of TIdType), CancellationToken?)
- uid: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2.DeleteRangeAsync*
  name: DeleteRangeAsync
  href: api/Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler-2.html#Quickie_DataHandlers_Crud_Definition_ICrudForCollectionDataHandler_2_DeleteRangeAsync_
  commentId: Overload:Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2.DeleteRangeAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler<TEntity, TIdType>.DeleteRangeAsync
  fullName.vb: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler(Of TEntity, TIdType).DeleteRangeAsync
  nameWithType: ICrudForCollectionDataHandler<TEntity, TIdType>.DeleteRangeAsync
  nameWithType.vb: ICrudForCollectionDataHandler(Of TEntity, TIdType).DeleteRangeAsync
- uid: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2.GetAllAsync(Quickie.DataObj.RequestForDataObj,System.Nullable{System.Threading.CancellationToken})
  name: GetAllAsync(RequestForDataObj, CancellationToken?)
  href: api/Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler-2.html#Quickie_DataHandlers_Crud_Definition_ICrudForCollectionDataHandler_2_GetAllAsync_Quickie_DataObj_RequestForDataObj_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2.GetAllAsync(Quickie.DataObj.RequestForDataObj,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler<TEntity, TIdType>.GetAllAsync(Quickie.DataObj.RequestForDataObj, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler(Of TEntity, TIdType).GetAllAsync(Quickie.DataObj.RequestForDataObj, System.Threading.CancellationToken?)
  nameWithType: ICrudForCollectionDataHandler<TEntity, TIdType>.GetAllAsync(RequestForDataObj, CancellationToken?)
  nameWithType.vb: ICrudForCollectionDataHandler(Of TEntity, TIdType).GetAllAsync(RequestForDataObj, CancellationToken?)
- uid: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2.GetAllAsync*
  name: GetAllAsync
  href: api/Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler-2.html#Quickie_DataHandlers_Crud_Definition_ICrudForCollectionDataHandler_2_GetAllAsync_
  commentId: Overload:Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2.GetAllAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler<TEntity, TIdType>.GetAllAsync
  fullName.vb: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler(Of TEntity, TIdType).GetAllAsync
  nameWithType: ICrudForCollectionDataHandler<TEntity, TIdType>.GetAllAsync
  nameWithType.vb: ICrudForCollectionDataHandler(Of TEntity, TIdType).GetAllAsync
- uid: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2.UpdateRangeAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name: UpdateRangeAsync(ICollection<TEntity>, CancellationToken?)
  href: api/Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler-2.html#Quickie_DataHandlers_Crud_Definition_ICrudForCollectionDataHandler_2_UpdateRangeAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2.UpdateRangeAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name.vb: UpdateRangeAsync(ICollection(Of TEntity), CancellationToken?)
  fullName: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler<TEntity, TIdType>.UpdateRangeAsync(System.Collections.Generic.ICollection<TEntity>, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler(Of TEntity, TIdType).UpdateRangeAsync(System.Collections.Generic.ICollection(Of TEntity), System.Threading.CancellationToken?)
  nameWithType: ICrudForCollectionDataHandler<TEntity, TIdType>.UpdateRangeAsync(ICollection<TEntity>, CancellationToken?)
  nameWithType.vb: ICrudForCollectionDataHandler(Of TEntity, TIdType).UpdateRangeAsync(ICollection(Of TEntity), CancellationToken?)
- uid: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2.UpdateRangeAsync*
  name: UpdateRangeAsync
  href: api/Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler-2.html#Quickie_DataHandlers_Crud_Definition_ICrudForCollectionDataHandler_2_UpdateRangeAsync_
  commentId: Overload:Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler`2.UpdateRangeAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler<TEntity, TIdType>.UpdateRangeAsync
  fullName.vb: Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler(Of TEntity, TIdType).UpdateRangeAsync
  nameWithType: ICrudForCollectionDataHandler<TEntity, TIdType>.UpdateRangeAsync
  nameWithType.vb: ICrudForCollectionDataHandler(Of TEntity, TIdType).UpdateRangeAsync
- uid: Quickie.DataHandlers.Crud.Implementation
  name: Quickie.DataHandlers.Crud.Implementation
  href: api/Quickie.DataHandlers.Crud.Implementation.html
  commentId: N:Quickie.DataHandlers.Crud.Implementation
  fullName: Quickie.DataHandlers.Crud.Implementation
  nameWithType: Quickie.DataHandlers.Crud.Implementation
- uid: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3
  name: CrudDataHandler<TEntity, TDbContext, TIdType>
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudDataHandler-3.html
  commentId: T:Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3
  name.vb: CrudDataHandler(Of TEntity, TDbContext, TIdType)
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler<TEntity, TDbContext, TIdType>
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler(Of TEntity, TDbContext, TIdType)
  nameWithType: CrudDataHandler<TEntity, TDbContext, TIdType>
  nameWithType.vb: CrudDataHandler(Of TEntity, TDbContext, TIdType)
- uid: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3.#ctor(`1)
  name: CrudDataHandler(TDbContext)
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudDataHandler_3__ctor__1_
  commentId: M:Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3.#ctor(`1)
  name.vb: New(TDbContext)
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler<TEntity, TDbContext, TIdType>.CrudDataHandler(TDbContext)
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler(Of TEntity, TDbContext, TIdType).New(TDbContext)
  nameWithType: CrudDataHandler<TEntity, TDbContext, TIdType>.CrudDataHandler(TDbContext)
  nameWithType.vb: CrudDataHandler(Of TEntity, TDbContext, TIdType).New(TDbContext)
- uid: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3.#ctor*
  name: CrudDataHandler
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudDataHandler_3__ctor_
  commentId: Overload:Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler<TEntity, TDbContext, TIdType>.CrudDataHandler
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler(Of TEntity, TDbContext, TIdType).New
  nameWithType: CrudDataHandler<TEntity, TDbContext, TIdType>.CrudDataHandler
  nameWithType.vb: CrudDataHandler(Of TEntity, TDbContext, TIdType).New
- uid: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3.CreateAsync(`0,System.Nullable{System.Threading.CancellationToken})
  name: CreateAsync(TEntity, CancellationToken?)
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudDataHandler_3_CreateAsync__0_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3.CreateAsync(`0,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler<TEntity, TDbContext, TIdType>.CreateAsync(TEntity, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler(Of TEntity, TDbContext, TIdType).CreateAsync(TEntity, System.Threading.CancellationToken?)
  nameWithType: CrudDataHandler<TEntity, TDbContext, TIdType>.CreateAsync(TEntity, CancellationToken?)
  nameWithType.vb: CrudDataHandler(Of TEntity, TDbContext, TIdType).CreateAsync(TEntity, CancellationToken?)
- uid: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3.CreateAsync*
  name: CreateAsync
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudDataHandler_3_CreateAsync_
  commentId: Overload:Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3.CreateAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler<TEntity, TDbContext, TIdType>.CreateAsync
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler(Of TEntity, TDbContext, TIdType).CreateAsync
  nameWithType: CrudDataHandler<TEntity, TDbContext, TIdType>.CreateAsync
  nameWithType.vb: CrudDataHandler(Of TEntity, TDbContext, TIdType).CreateAsync
- uid: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3.DeleteAsync(`2,System.Nullable{System.Threading.CancellationToken})
  name: DeleteAsync(TIdType, CancellationToken?)
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudDataHandler_3_DeleteAsync__2_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3.DeleteAsync(`2,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler<TEntity, TDbContext, TIdType>.DeleteAsync(TIdType, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler(Of TEntity, TDbContext, TIdType).DeleteAsync(TIdType, System.Threading.CancellationToken?)
  nameWithType: CrudDataHandler<TEntity, TDbContext, TIdType>.DeleteAsync(TIdType, CancellationToken?)
  nameWithType.vb: CrudDataHandler(Of TEntity, TDbContext, TIdType).DeleteAsync(TIdType, CancellationToken?)
- uid: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3.DeleteAsync*
  name: DeleteAsync
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudDataHandler_3_DeleteAsync_
  commentId: Overload:Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3.DeleteAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler<TEntity, TDbContext, TIdType>.DeleteAsync
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler(Of TEntity, TDbContext, TIdType).DeleteAsync
  nameWithType: CrudDataHandler<TEntity, TDbContext, TIdType>.DeleteAsync
  nameWithType.vb: CrudDataHandler(Of TEntity, TDbContext, TIdType).DeleteAsync
- uid: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3.GetByIdAsync(`2,System.Nullable{System.Threading.CancellationToken})
  name: GetByIdAsync(TIdType, CancellationToken?)
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudDataHandler_3_GetByIdAsync__2_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3.GetByIdAsync(`2,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler<TEntity, TDbContext, TIdType>.GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler(Of TEntity, TDbContext, TIdType).GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  nameWithType: CrudDataHandler<TEntity, TDbContext, TIdType>.GetByIdAsync(TIdType, CancellationToken?)
  nameWithType.vb: CrudDataHandler(Of TEntity, TDbContext, TIdType).GetByIdAsync(TIdType, CancellationToken?)
- uid: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3.GetByIdAsync*
  name: GetByIdAsync
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudDataHandler_3_GetByIdAsync_
  commentId: Overload:Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3.GetByIdAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler<TEntity, TDbContext, TIdType>.GetByIdAsync
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler(Of TEntity, TDbContext, TIdType).GetByIdAsync
  nameWithType: CrudDataHandler<TEntity, TDbContext, TIdType>.GetByIdAsync
  nameWithType.vb: CrudDataHandler(Of TEntity, TDbContext, TIdType).GetByIdAsync
- uid: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3.UpdateAsync(`2,`0,System.Nullable{System.Threading.CancellationToken})
  name: UpdateAsync(TIdType, TEntity, CancellationToken?)
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudDataHandler_3_UpdateAsync__2__0_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3.UpdateAsync(`2,`0,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler<TEntity, TDbContext, TIdType>.UpdateAsync(TIdType, TEntity, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler(Of TEntity, TDbContext, TIdType).UpdateAsync(TIdType, TEntity, System.Threading.CancellationToken?)
  nameWithType: CrudDataHandler<TEntity, TDbContext, TIdType>.UpdateAsync(TIdType, TEntity, CancellationToken?)
  nameWithType.vb: CrudDataHandler(Of TEntity, TDbContext, TIdType).UpdateAsync(TIdType, TEntity, CancellationToken?)
- uid: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3.UpdateAsync*
  name: UpdateAsync
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudDataHandler_3_UpdateAsync_
  commentId: Overload:Quickie.DataHandlers.Crud.Implementation.CrudDataHandler`3.UpdateAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler<TEntity, TDbContext, TIdType>.UpdateAsync
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudDataHandler(Of TEntity, TDbContext, TIdType).UpdateAsync
  nameWithType: CrudDataHandler<TEntity, TDbContext, TIdType>.UpdateAsync
  nameWithType.vb: CrudDataHandler(Of TEntity, TDbContext, TIdType).UpdateAsync
- uid: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3
  name: CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler-3.html
  commentId: T:Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3
  name.vb: CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext)
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext)
  nameWithType: CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>
  nameWithType.vb: CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext)
- uid: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.#ctor(`2)
  name: CrudForCollectionDataDataHandler(TDbContext)
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudForCollectionDataDataHandler_3__ctor__2_
  commentId: M:Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.#ctor(`2)
  name.vb: New(TDbContext)
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.CrudForCollectionDataDataHandler(TDbContext)
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).New(TDbContext)
  nameWithType: CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.CrudForCollectionDataDataHandler(TDbContext)
  nameWithType.vb: CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).New(TDbContext)
- uid: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.#ctor*
  name: CrudForCollectionDataDataHandler
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudForCollectionDataDataHandler_3__ctor_
  commentId: Overload:Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.CrudForCollectionDataDataHandler
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).New
  nameWithType: CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.CrudForCollectionDataDataHandler
  nameWithType.vb: CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).New
- uid: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.CountAsync(System.Nullable{System.Threading.CancellationToken})
  name: CountAsync(CancellationToken?)
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudForCollectionDataDataHandler_3_CountAsync_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.CountAsync(System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.CountAsync(System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).CountAsync(System.Threading.CancellationToken?)
  nameWithType: CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.CountAsync(CancellationToken?)
  nameWithType.vb: CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).CountAsync(CancellationToken?)
- uid: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.CountAsync*
  name: CountAsync
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudForCollectionDataDataHandler_3_CountAsync_
  commentId: Overload:Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.CountAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.CountAsync
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).CountAsync
  nameWithType: CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.CountAsync
  nameWithType.vb: CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).CountAsync
- uid: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.CreateRangeAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name: CreateRangeAsync(ICollection<TEntity>, CancellationToken?)
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudForCollectionDataDataHandler_3_CreateRangeAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.CreateRangeAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name.vb: CreateRangeAsync(ICollection(Of TEntity), CancellationToken?)
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.CreateRangeAsync(System.Collections.Generic.ICollection<TEntity>, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).CreateRangeAsync(System.Collections.Generic.ICollection(Of TEntity), System.Threading.CancellationToken?)
  nameWithType: CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.CreateRangeAsync(ICollection<TEntity>, CancellationToken?)
  nameWithType.vb: CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).CreateRangeAsync(ICollection(Of TEntity), CancellationToken?)
- uid: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.CreateRangeAsync*
  name: CreateRangeAsync
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudForCollectionDataDataHandler_3_CreateRangeAsync_
  commentId: Overload:Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.CreateRangeAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.CreateRangeAsync
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).CreateRangeAsync
  nameWithType: CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.CreateRangeAsync
  nameWithType.vb: CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).CreateRangeAsync
- uid: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.DeleteRangeAsync(System.Collections.Generic.ICollection{`1},System.Nullable{System.Threading.CancellationToken})
  name: DeleteRangeAsync(ICollection<TIdType>, CancellationToken?)
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudForCollectionDataDataHandler_3_DeleteRangeAsync_System_Collections_Generic_ICollection__1__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.DeleteRangeAsync(System.Collections.Generic.ICollection{`1},System.Nullable{System.Threading.CancellationToken})
  name.vb: DeleteRangeAsync(ICollection(Of TIdType), CancellationToken?)
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.DeleteRangeAsync(System.Collections.Generic.ICollection<TIdType>, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).DeleteRangeAsync(System.Collections.Generic.ICollection(Of TIdType), System.Threading.CancellationToken?)
  nameWithType: CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.DeleteRangeAsync(ICollection<TIdType>, CancellationToken?)
  nameWithType.vb: CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).DeleteRangeAsync(ICollection(Of TIdType), CancellationToken?)
- uid: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.DeleteRangeAsync*
  name: DeleteRangeAsync
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudForCollectionDataDataHandler_3_DeleteRangeAsync_
  commentId: Overload:Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.DeleteRangeAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.DeleteRangeAsync
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).DeleteRangeAsync
  nameWithType: CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.DeleteRangeAsync
  nameWithType.vb: CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).DeleteRangeAsync
- uid: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.GetAllAsync(Quickie.DataObj.RequestForDataObj,System.Nullable{System.Threading.CancellationToken})
  name: GetAllAsync(RequestForDataObj, CancellationToken?)
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudForCollectionDataDataHandler_3_GetAllAsync_Quickie_DataObj_RequestForDataObj_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.GetAllAsync(Quickie.DataObj.RequestForDataObj,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.GetAllAsync(Quickie.DataObj.RequestForDataObj, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).GetAllAsync(Quickie.DataObj.RequestForDataObj, System.Threading.CancellationToken?)
  nameWithType: CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.GetAllAsync(RequestForDataObj, CancellationToken?)
  nameWithType.vb: CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).GetAllAsync(RequestForDataObj, CancellationToken?)
- uid: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.GetAllAsync*
  name: GetAllAsync
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudForCollectionDataDataHandler_3_GetAllAsync_
  commentId: Overload:Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.GetAllAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.GetAllAsync
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).GetAllAsync
  nameWithType: CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.GetAllAsync
  nameWithType.vb: CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).GetAllAsync
- uid: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.UpdateRangeAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name: UpdateRangeAsync(ICollection<TEntity>, CancellationToken?)
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudForCollectionDataDataHandler_3_UpdateRangeAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.UpdateRangeAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name.vb: UpdateRangeAsync(ICollection(Of TEntity), CancellationToken?)
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.UpdateRangeAsync(System.Collections.Generic.ICollection<TEntity>, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).UpdateRangeAsync(System.Collections.Generic.ICollection(Of TEntity), System.Threading.CancellationToken?)
  nameWithType: CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.UpdateRangeAsync(ICollection<TEntity>, CancellationToken?)
  nameWithType.vb: CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).UpdateRangeAsync(ICollection(Of TEntity), CancellationToken?)
- uid: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.UpdateRangeAsync*
  name: UpdateRangeAsync
  href: api/Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler-3.html#Quickie_DataHandlers_Crud_Implementation_CrudForCollectionDataDataHandler_3_UpdateRangeAsync_
  commentId: Overload:Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler`3.UpdateRangeAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.UpdateRangeAsync
  fullName.vb: Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).UpdateRangeAsync
  nameWithType: CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext>.UpdateRangeAsync
  nameWithType.vb: CrudForCollectionDataDataHandler(Of TEntity, TIdType, TDbContext).UpdateRangeAsync
- uid: Quickie.DataHandlers.Editonly.Definition
  name: Quickie.DataHandlers.Editonly.Definition
  href: api/Quickie.DataHandlers.Editonly.Definition.html
  commentId: N:Quickie.DataHandlers.Editonly.Definition
  fullName: Quickie.DataHandlers.Editonly.Definition
  nameWithType: Quickie.DataHandlers.Editonly.Definition
- uid: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2
  name: IEditOnlyDataHandler<TEntity, TIdType>
  href: api/Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler-2.html
  commentId: T:Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2
  name.vb: IEditOnlyDataHandler(Of TEntity, TIdType)
  fullName: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler<TEntity, TIdType>
  fullName.vb: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler(Of TEntity, TIdType)
  nameWithType: IEditOnlyDataHandler<TEntity, TIdType>
  nameWithType.vb: IEditOnlyDataHandler(Of TEntity, TIdType)
- uid: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2.EditAsync(`1,`0,System.Nullable{System.Threading.CancellationToken})
  name: EditAsync(TIdType, TEntity, CancellationToken?)
  href: api/Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler-2.html#Quickie_DataHandlers_Editonly_Definition_IEditOnlyDataHandler_2_EditAsync__1__0_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2.EditAsync(`1,`0,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler<TEntity, TIdType>.EditAsync(TIdType, TEntity, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler(Of TEntity, TIdType).EditAsync(TIdType, TEntity, System.Threading.CancellationToken?)
  nameWithType: IEditOnlyDataHandler<TEntity, TIdType>.EditAsync(TIdType, TEntity, CancellationToken?)
  nameWithType.vb: IEditOnlyDataHandler(Of TEntity, TIdType).EditAsync(TIdType, TEntity, CancellationToken?)
- uid: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2.EditAsync*
  name: EditAsync
  href: api/Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler-2.html#Quickie_DataHandlers_Editonly_Definition_IEditOnlyDataHandler_2_EditAsync_
  commentId: Overload:Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2.EditAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler<TEntity, TIdType>.EditAsync
  fullName.vb: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler(Of TEntity, TIdType).EditAsync
  nameWithType: IEditOnlyDataHandler<TEntity, TIdType>.EditAsync
  nameWithType.vb: IEditOnlyDataHandler(Of TEntity, TIdType).EditAsync
- uid: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2.EditCollectionAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name: EditCollectionAsync(ICollection<TEntity>, CancellationToken?)
  href: api/Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler-2.html#Quickie_DataHandlers_Editonly_Definition_IEditOnlyDataHandler_2_EditCollectionAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2.EditCollectionAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name.vb: EditCollectionAsync(ICollection(Of TEntity), CancellationToken?)
  fullName: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler<TEntity, TIdType>.EditCollectionAsync(System.Collections.Generic.ICollection<TEntity>, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler(Of TEntity, TIdType).EditCollectionAsync(System.Collections.Generic.ICollection(Of TEntity), System.Threading.CancellationToken?)
  nameWithType: IEditOnlyDataHandler<TEntity, TIdType>.EditCollectionAsync(ICollection<TEntity>, CancellationToken?)
  nameWithType.vb: IEditOnlyDataHandler(Of TEntity, TIdType).EditCollectionAsync(ICollection(Of TEntity), CancellationToken?)
- uid: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2.EditCollectionAsync*
  name: EditCollectionAsync
  href: api/Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler-2.html#Quickie_DataHandlers_Editonly_Definition_IEditOnlyDataHandler_2_EditCollectionAsync_
  commentId: Overload:Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2.EditCollectionAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler<TEntity, TIdType>.EditCollectionAsync
  fullName.vb: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler(Of TEntity, TIdType).EditCollectionAsync
  nameWithType: IEditOnlyDataHandler<TEntity, TIdType>.EditCollectionAsync
  nameWithType.vb: IEditOnlyDataHandler(Of TEntity, TIdType).EditCollectionAsync
- uid: Quickie.DataHandlers.Editonly.Implementation
  name: Quickie.DataHandlers.Editonly.Implementation
  href: api/Quickie.DataHandlers.Editonly.Implementation.html
  commentId: N:Quickie.DataHandlers.Editonly.Implementation
  fullName: Quickie.DataHandlers.Editonly.Implementation
  nameWithType: Quickie.DataHandlers.Editonly.Implementation
- uid: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler`2
  name: EditOnlyDataHandler<TEntity, TIdType>
  href: api/Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler-2.html
  commentId: T:Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler`2
  name.vb: EditOnlyDataHandler(Of TEntity, TIdType)
  fullName: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler<TEntity, TIdType>
  fullName.vb: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler(Of TEntity, TIdType)
  nameWithType: EditOnlyDataHandler<TEntity, TIdType>
  nameWithType.vb: EditOnlyDataHandler(Of TEntity, TIdType)
- uid: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler`2.#ctor(Microsoft.EntityFrameworkCore.DbContext)
  name: EditOnlyDataHandler(DbContext)
  href: api/Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler-2.html#Quickie_DataHandlers_Editonly_Implementation_EditOnlyDataHandler_2__ctor_Microsoft_EntityFrameworkCore_DbContext_
  commentId: M:Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler`2.#ctor(Microsoft.EntityFrameworkCore.DbContext)
  name.vb: New(DbContext)
  fullName: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler<TEntity, TIdType>.EditOnlyDataHandler(Microsoft.EntityFrameworkCore.DbContext)
  fullName.vb: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler(Of TEntity, TIdType).New(Microsoft.EntityFrameworkCore.DbContext)
  nameWithType: EditOnlyDataHandler<TEntity, TIdType>.EditOnlyDataHandler(DbContext)
  nameWithType.vb: EditOnlyDataHandler(Of TEntity, TIdType).New(DbContext)
- uid: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler`2.#ctor*
  name: EditOnlyDataHandler
  href: api/Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler-2.html#Quickie_DataHandlers_Editonly_Implementation_EditOnlyDataHandler_2__ctor_
  commentId: Overload:Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler`2.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler<TEntity, TIdType>.EditOnlyDataHandler
  fullName.vb: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler(Of TEntity, TIdType).New
  nameWithType: EditOnlyDataHandler<TEntity, TIdType>.EditOnlyDataHandler
  nameWithType.vb: EditOnlyDataHandler(Of TEntity, TIdType).New
- uid: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler`2.EditAsync(`1,`0,System.Nullable{System.Threading.CancellationToken})
  name: EditAsync(TIdType, TEntity, CancellationToken?)
  href: api/Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler-2.html#Quickie_DataHandlers_Editonly_Implementation_EditOnlyDataHandler_2_EditAsync__1__0_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler`2.EditAsync(`1,`0,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler<TEntity, TIdType>.EditAsync(TIdType, TEntity, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler(Of TEntity, TIdType).EditAsync(TIdType, TEntity, System.Threading.CancellationToken?)
  nameWithType: EditOnlyDataHandler<TEntity, TIdType>.EditAsync(TIdType, TEntity, CancellationToken?)
  nameWithType.vb: EditOnlyDataHandler(Of TEntity, TIdType).EditAsync(TIdType, TEntity, CancellationToken?)
- uid: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler`2.EditAsync*
  name: EditAsync
  href: api/Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler-2.html#Quickie_DataHandlers_Editonly_Implementation_EditOnlyDataHandler_2_EditAsync_
  commentId: Overload:Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler`2.EditAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler<TEntity, TIdType>.EditAsync
  fullName.vb: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler(Of TEntity, TIdType).EditAsync
  nameWithType: EditOnlyDataHandler<TEntity, TIdType>.EditAsync
  nameWithType.vb: EditOnlyDataHandler(Of TEntity, TIdType).EditAsync
- uid: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler`2.EditCollectionAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name: EditCollectionAsync(ICollection<TEntity>, CancellationToken?)
  href: api/Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler-2.html#Quickie_DataHandlers_Editonly_Implementation_EditOnlyDataHandler_2_EditCollectionAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler`2.EditCollectionAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name.vb: EditCollectionAsync(ICollection(Of TEntity), CancellationToken?)
  fullName: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler<TEntity, TIdType>.EditCollectionAsync(System.Collections.Generic.ICollection<TEntity>, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler(Of TEntity, TIdType).EditCollectionAsync(System.Collections.Generic.ICollection(Of TEntity), System.Threading.CancellationToken?)
  nameWithType: EditOnlyDataHandler<TEntity, TIdType>.EditCollectionAsync(ICollection<TEntity>, CancellationToken?)
  nameWithType.vb: EditOnlyDataHandler(Of TEntity, TIdType).EditCollectionAsync(ICollection(Of TEntity), CancellationToken?)
- uid: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler`2.EditCollectionAsync*
  name: EditCollectionAsync
  href: api/Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler-2.html#Quickie_DataHandlers_Editonly_Implementation_EditOnlyDataHandler_2_EditCollectionAsync_
  commentId: Overload:Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler`2.EditCollectionAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler<TEntity, TIdType>.EditCollectionAsync
  fullName.vb: Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler(Of TEntity, TIdType).EditCollectionAsync
  nameWithType: EditOnlyDataHandler<TEntity, TIdType>.EditCollectionAsync
  nameWithType.vb: EditOnlyDataHandler(Of TEntity, TIdType).EditCollectionAsync
- uid: Quickie.DataHandlers.Readonly.Definition
  name: Quickie.DataHandlers.Readonly.Definition
  href: api/Quickie.DataHandlers.Readonly.Definition.html
  commentId: N:Quickie.DataHandlers.Readonly.Definition
  fullName: Quickie.DataHandlers.Readonly.Definition
  nameWithType: Quickie.DataHandlers.Readonly.Definition
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`1
  name: IReadOnlyCollectionDataHandler<TEntity>
  href: api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler-1.html
  commentId: T:Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`1
  name.vb: IReadOnlyCollectionDataHandler(Of TEntity)
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler<TEntity>
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler(Of TEntity)
  nameWithType: IReadOnlyCollectionDataHandler<TEntity>
  nameWithType.vb: IReadOnlyCollectionDataHandler(Of TEntity)
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`1.GetByFilterAsync*
  name: GetByFilterAsync
  href: api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler-1.html#Quickie_DataHandlers_Readonly_Definition_IReadOnlyCollectionDataHandler_1_GetByFilterAsync_
  commentId: Overload:Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`1.GetByFilterAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler<TEntity>.GetByFilterAsync
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler(Of TEntity).GetByFilterAsync
  nameWithType: IReadOnlyCollectionDataHandler<TEntity>.GetByFilterAsync
  nameWithType.vb: IReadOnlyCollectionDataHandler(Of TEntity).GetByFilterAsync
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`1.GetByFilterAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},``0,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  name: GetByFilterAsync<TRequestModel>(Expression<Func<TEntity, bool>>, TRequestModel?, bool?, CancellationToken)
  href: api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler-1.html#Quickie_DataHandlers_Readonly_Definition_IReadOnlyCollectionDataHandler_1_GetByFilterAsync__1_System_Linq_Expressions_Expression_System_Func__0_System_Boolean_____0_System_Nullable_System_Boolean__System_Threading_CancellationToken_
  commentId: M:Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`1.GetByFilterAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},``0,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  name.vb: GetByFilterAsync(Of TRequestModel)(Expression(Of Func(Of TEntity, Boolean)), TRequestModel, Boolean?, CancellationToken)
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler<TEntity>.GetByFilterAsync<TRequestModel>(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, TRequestModel?, bool?, System.Threading.CancellationToken)
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler(Of TEntity).GetByFilterAsync(Of TRequestModel)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), TRequestModel, Boolean?, System.Threading.CancellationToken)
  nameWithType: IReadOnlyCollectionDataHandler<TEntity>.GetByFilterAsync<TRequestModel>(Expression<Func<TEntity, bool>>, TRequestModel?, bool?, CancellationToken)
  nameWithType.vb: IReadOnlyCollectionDataHandler(Of TEntity).GetByFilterAsync(Of TRequestModel)(Expression(Of Func(Of TEntity, Boolean)), TRequestModel, Boolean?, CancellationToken)
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`1.GetCollectionByIdAsync*
  name: GetCollectionByIdAsync
  href: api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler-1.html#Quickie_DataHandlers_Readonly_Definition_IReadOnlyCollectionDataHandler_1_GetCollectionByIdAsync_
  commentId: Overload:Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`1.GetCollectionByIdAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler<TEntity>.GetCollectionByIdAsync
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler(Of TEntity).GetCollectionByIdAsync
  nameWithType: IReadOnlyCollectionDataHandler<TEntity>.GetCollectionByIdAsync
  nameWithType.vb: IReadOnlyCollectionDataHandler(Of TEntity).GetCollectionByIdAsync
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`1.GetCollectionByIdAsync``1(System.Int64,``0,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  name: GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, bool?, CancellationToken)
  href: api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler-1.html#Quickie_DataHandlers_Readonly_Definition_IReadOnlyCollectionDataHandler_1_GetCollectionByIdAsync__1_System_Int64___0_System_Nullable_System_Boolean__System_Threading_CancellationToken_
  commentId: M:Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`1.GetCollectionByIdAsync``1(System.Int64,``0,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  name.vb: GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, Boolean?, CancellationToken)
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler<TEntity>.GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, bool?, System.Threading.CancellationToken)
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler(Of TEntity).GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, Boolean?, System.Threading.CancellationToken)
  nameWithType: IReadOnlyCollectionDataHandler<TEntity>.GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, bool?, CancellationToken)
  nameWithType.vb: IReadOnlyCollectionDataHandler(Of TEntity).GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, Boolean?, CancellationToken)
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`2
  name: IReadOnlyCollectionDataHandler<TEntity, TIdType>
  href: api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler-2.html
  commentId: T:Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`2
  name.vb: IReadOnlyCollectionDataHandler(Of TEntity, TIdType)
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler<TEntity, TIdType>
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler(Of TEntity, TIdType)
  nameWithType: IReadOnlyCollectionDataHandler<TEntity, TIdType>
  nameWithType.vb: IReadOnlyCollectionDataHandler(Of TEntity, TIdType)
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`2.GetByFilterAsync*
  name: GetByFilterAsync
  href: api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler-2.html#Quickie_DataHandlers_Readonly_Definition_IReadOnlyCollectionDataHandler_2_GetByFilterAsync_
  commentId: Overload:Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`2.GetByFilterAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler<TEntity, TIdType>.GetByFilterAsync
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler(Of TEntity, TIdType).GetByFilterAsync
  nameWithType: IReadOnlyCollectionDataHandler<TEntity, TIdType>.GetByFilterAsync
  nameWithType.vb: IReadOnlyCollectionDataHandler(Of TEntity, TIdType).GetByFilterAsync
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`2.GetByFilterAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},``0,System.Nullable{System.Boolean},System.Nullable{System.Threading.CancellationToken})
  name: GetByFilterAsync<TRequestModel>(Expression<Func<TEntity, bool>>?, TRequestModel?, bool?, CancellationToken?)
  href: api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler-2.html#Quickie_DataHandlers_Readonly_Definition_IReadOnlyCollectionDataHandler_2_GetByFilterAsync__1_System_Linq_Expressions_Expression_System_Func__0_System_Boolean_____0_System_Nullable_System_Boolean__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`2.GetByFilterAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},``0,System.Nullable{System.Boolean},System.Nullable{System.Threading.CancellationToken})
  name.vb: GetByFilterAsync(Of TRequestModel)(Expression(Of Func(Of TEntity, Boolean)), TRequestModel, Boolean?, CancellationToken?)
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler<TEntity, TIdType>.GetByFilterAsync<TRequestModel>(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>?, TRequestModel?, bool?, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler(Of TEntity, TIdType).GetByFilterAsync(Of TRequestModel)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), TRequestModel, Boolean?, System.Threading.CancellationToken?)
  nameWithType: IReadOnlyCollectionDataHandler<TEntity, TIdType>.GetByFilterAsync<TRequestModel>(Expression<Func<TEntity, bool>>?, TRequestModel?, bool?, CancellationToken?)
  nameWithType.vb: IReadOnlyCollectionDataHandler(Of TEntity, TIdType).GetByFilterAsync(Of TRequestModel)(Expression(Of Func(Of TEntity, Boolean)), TRequestModel, Boolean?, CancellationToken?)
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`1
  name: IReadOnlyDataHandler<TEntity>
  href: api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-1.html
  commentId: T:Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`1
  name.vb: IReadOnlyDataHandler(Of TEntity)
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler<TEntity>
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler(Of TEntity)
  nameWithType: IReadOnlyDataHandler<TEntity>
  nameWithType.vb: IReadOnlyDataHandler(Of TEntity)
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`1.GetByIdAsync(System.Object,System.Threading.CancellationToken)
  name: GetByIdAsync(object, CancellationToken)
  href: api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-1.html#Quickie_DataHandlers_Readonly_Definition_IReadOnlyDataHandler_1_GetByIdAsync_System_Object_System_Threading_CancellationToken_
  commentId: M:Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`1.GetByIdAsync(System.Object,System.Threading.CancellationToken)
  name.vb: GetByIdAsync(Object, CancellationToken)
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler<TEntity>.GetByIdAsync(object, System.Threading.CancellationToken)
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler(Of TEntity).GetByIdAsync(Object, System.Threading.CancellationToken)
  nameWithType: IReadOnlyDataHandler<TEntity>.GetByIdAsync(object, CancellationToken)
  nameWithType.vb: IReadOnlyDataHandler(Of TEntity).GetByIdAsync(Object, CancellationToken)
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`1.GetByIdAsync*
  name: GetByIdAsync
  href: api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-1.html#Quickie_DataHandlers_Readonly_Definition_IReadOnlyDataHandler_1_GetByIdAsync_
  commentId: Overload:Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`1.GetByIdAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler<TEntity>.GetByIdAsync
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler(Of TEntity).GetByIdAsync
  nameWithType: IReadOnlyDataHandler<TEntity>.GetByIdAsync
  nameWithType.vb: IReadOnlyDataHandler(Of TEntity).GetByIdAsync
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2
  name: IReadOnlyDataHandler<TEntity, TIdType>
  href: api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html
  commentId: T:Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2
  name.vb: IReadOnlyDataHandler(Of TEntity, TIdType)
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler<TEntity, TIdType>
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler(Of TEntity, TIdType)
  nameWithType: IReadOnlyDataHandler<TEntity, TIdType>
  nameWithType.vb: IReadOnlyDataHandler(Of TEntity, TIdType)
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2.GetByIdAsync(`1,System.Nullable{System.Threading.CancellationToken})
  name: GetByIdAsync(TIdType, CancellationToken?)
  href: api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html#Quickie_DataHandlers_Readonly_Definition_IReadOnlyDataHandler_2_GetByIdAsync__1_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2.GetByIdAsync(`1,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler<TEntity, TIdType>.GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler(Of TEntity, TIdType).GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  nameWithType: IReadOnlyDataHandler<TEntity, TIdType>.GetByIdAsync(TIdType, CancellationToken?)
  nameWithType.vb: IReadOnlyDataHandler(Of TEntity, TIdType).GetByIdAsync(TIdType, CancellationToken?)
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2.GetByIdAsync*
  name: GetByIdAsync
  href: api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html#Quickie_DataHandlers_Readonly_Definition_IReadOnlyDataHandler_2_GetByIdAsync_
  commentId: Overload:Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2.GetByIdAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler<TEntity, TIdType>.GetByIdAsync
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler(Of TEntity, TIdType).GetByIdAsync
  nameWithType: IReadOnlyDataHandler<TEntity, TIdType>.GetByIdAsync
  nameWithType.vb: IReadOnlyDataHandler(Of TEntity, TIdType).GetByIdAsync
- uid: Quickie.DataHandlers.Readonly.Implementation
  name: Quickie.DataHandlers.Readonly.Implementation
  href: api/Quickie.DataHandlers.Readonly.Implementation.html
  commentId: N:Quickie.DataHandlers.Readonly.Implementation
  fullName: Quickie.DataHandlers.Readonly.Implementation
  nameWithType: Quickie.DataHandlers.Readonly.Implementation
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`2
  name: ReadOnlyCollectionDataHandler<TEntity, TDbContext>
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler-2.html
  commentId: T:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`2
  name.vb: ReadOnlyCollectionDataHandler(Of TEntity, TDbContext)
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler<TEntity, TDbContext>
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler(Of TEntity, TDbContext)
  nameWithType: ReadOnlyCollectionDataHandler<TEntity, TDbContext>
  nameWithType.vb: ReadOnlyCollectionDataHandler(Of TEntity, TDbContext)
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`2.#ctor(Microsoft.EntityFrameworkCore.DbContext)
  name: ReadOnlyCollectionDataHandler(DbContext)
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler-2.html#Quickie_DataHandlers_Readonly_Implementation_ReadOnlyCollectionDataHandler_2__ctor_Microsoft_EntityFrameworkCore_DbContext_
  commentId: M:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`2.#ctor(Microsoft.EntityFrameworkCore.DbContext)
  name.vb: New(DbContext)
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler<TEntity, TDbContext>.ReadOnlyCollectionDataHandler(Microsoft.EntityFrameworkCore.DbContext)
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler(Of TEntity, TDbContext).New(Microsoft.EntityFrameworkCore.DbContext)
  nameWithType: ReadOnlyCollectionDataHandler<TEntity, TDbContext>.ReadOnlyCollectionDataHandler(DbContext)
  nameWithType.vb: ReadOnlyCollectionDataHandler(Of TEntity, TDbContext).New(DbContext)
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`2.#ctor*
  name: ReadOnlyCollectionDataHandler
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler-2.html#Quickie_DataHandlers_Readonly_Implementation_ReadOnlyCollectionDataHandler_2__ctor_
  commentId: Overload:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`2.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler<TEntity, TDbContext>.ReadOnlyCollectionDataHandler
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler(Of TEntity, TDbContext).New
  nameWithType: ReadOnlyCollectionDataHandler<TEntity, TDbContext>.ReadOnlyCollectionDataHandler
  nameWithType.vb: ReadOnlyCollectionDataHandler(Of TEntity, TDbContext).New
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`2.GetByFilterAsync*
  name: GetByFilterAsync
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler-2.html#Quickie_DataHandlers_Readonly_Implementation_ReadOnlyCollectionDataHandler_2_GetByFilterAsync_
  commentId: Overload:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`2.GetByFilterAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler<TEntity, TDbContext>.GetByFilterAsync
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler(Of TEntity, TDbContext).GetByFilterAsync
  nameWithType: ReadOnlyCollectionDataHandler<TEntity, TDbContext>.GetByFilterAsync
  nameWithType.vb: ReadOnlyCollectionDataHandler(Of TEntity, TDbContext).GetByFilterAsync
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`2.GetByFilterAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},``0,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  name: GetByFilterAsync<TRequestModel>(Expression<Func<TEntity, bool>>, TRequestModel?, bool?, CancellationToken)
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler-2.html#Quickie_DataHandlers_Readonly_Implementation_ReadOnlyCollectionDataHandler_2_GetByFilterAsync__1_System_Linq_Expressions_Expression_System_Func__0_System_Boolean_____0_System_Nullable_System_Boolean__System_Threading_CancellationToken_
  commentId: M:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`2.GetByFilterAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},``0,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  name.vb: GetByFilterAsync(Of TRequestModel)(Expression(Of Func(Of TEntity, Boolean)), TRequestModel, Boolean?, CancellationToken)
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler<TEntity, TDbContext>.GetByFilterAsync<TRequestModel>(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, TRequestModel?, bool?, System.Threading.CancellationToken)
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler(Of TEntity, TDbContext).GetByFilterAsync(Of TRequestModel)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), TRequestModel, Boolean?, System.Threading.CancellationToken)
  nameWithType: ReadOnlyCollectionDataHandler<TEntity, TDbContext>.GetByFilterAsync<TRequestModel>(Expression<Func<TEntity, bool>>, TRequestModel?, bool?, CancellationToken)
  nameWithType.vb: ReadOnlyCollectionDataHandler(Of TEntity, TDbContext).GetByFilterAsync(Of TRequestModel)(Expression(Of Func(Of TEntity, Boolean)), TRequestModel, Boolean?, CancellationToken)
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`2.GetCollectionByIdAsync*
  name: GetCollectionByIdAsync
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler-2.html#Quickie_DataHandlers_Readonly_Implementation_ReadOnlyCollectionDataHandler_2_GetCollectionByIdAsync_
  commentId: Overload:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`2.GetCollectionByIdAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler<TEntity, TDbContext>.GetCollectionByIdAsync
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler(Of TEntity, TDbContext).GetCollectionByIdAsync
  nameWithType: ReadOnlyCollectionDataHandler<TEntity, TDbContext>.GetCollectionByIdAsync
  nameWithType.vb: ReadOnlyCollectionDataHandler(Of TEntity, TDbContext).GetCollectionByIdAsync
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`2.GetCollectionByIdAsync``1(System.Int64,``0,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  name: GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, bool?, CancellationToken)
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler-2.html#Quickie_DataHandlers_Readonly_Implementation_ReadOnlyCollectionDataHandler_2_GetCollectionByIdAsync__1_System_Int64___0_System_Nullable_System_Boolean__System_Threading_CancellationToken_
  commentId: M:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`2.GetCollectionByIdAsync``1(System.Int64,``0,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  name.vb: GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, Boolean?, CancellationToken)
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler<TEntity, TDbContext>.GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, bool?, System.Threading.CancellationToken)
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler(Of TEntity, TDbContext).GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, Boolean?, System.Threading.CancellationToken)
  nameWithType: ReadOnlyCollectionDataHandler<TEntity, TDbContext>.GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, bool?, CancellationToken)
  nameWithType.vb: ReadOnlyCollectionDataHandler(Of TEntity, TDbContext).GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, Boolean?, CancellationToken)
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`3
  name: ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType>
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler-3.html
  commentId: T:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`3
  name.vb: ReadOnlyCollectionDataHandler(Of TEntity, TDbContext, TIdType)
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType>
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler(Of TEntity, TDbContext, TIdType)
  nameWithType: ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType>
  nameWithType.vb: ReadOnlyCollectionDataHandler(Of TEntity, TDbContext, TIdType)
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`3.#ctor(Microsoft.EntityFrameworkCore.DbContext)
  name: ReadOnlyCollectionDataHandler(DbContext)
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler-3.html#Quickie_DataHandlers_Readonly_Implementation_ReadOnlyCollectionDataHandler_3__ctor_Microsoft_EntityFrameworkCore_DbContext_
  commentId: M:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`3.#ctor(Microsoft.EntityFrameworkCore.DbContext)
  name.vb: New(DbContext)
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType>.ReadOnlyCollectionDataHandler(Microsoft.EntityFrameworkCore.DbContext)
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler(Of TEntity, TDbContext, TIdType).New(Microsoft.EntityFrameworkCore.DbContext)
  nameWithType: ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType>.ReadOnlyCollectionDataHandler(DbContext)
  nameWithType.vb: ReadOnlyCollectionDataHandler(Of TEntity, TDbContext, TIdType).New(DbContext)
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`3.#ctor*
  name: ReadOnlyCollectionDataHandler
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler-3.html#Quickie_DataHandlers_Readonly_Implementation_ReadOnlyCollectionDataHandler_3__ctor_
  commentId: Overload:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`3.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType>.ReadOnlyCollectionDataHandler
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler(Of TEntity, TDbContext, TIdType).New
  nameWithType: ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType>.ReadOnlyCollectionDataHandler
  nameWithType.vb: ReadOnlyCollectionDataHandler(Of TEntity, TDbContext, TIdType).New
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`3.GetByFilterAsync*
  name: GetByFilterAsync
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler-3.html#Quickie_DataHandlers_Readonly_Implementation_ReadOnlyCollectionDataHandler_3_GetByFilterAsync_
  commentId: Overload:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`3.GetByFilterAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType>.GetByFilterAsync
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler(Of TEntity, TDbContext, TIdType).GetByFilterAsync
  nameWithType: ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType>.GetByFilterAsync
  nameWithType.vb: ReadOnlyCollectionDataHandler(Of TEntity, TDbContext, TIdType).GetByFilterAsync
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`3.GetByFilterAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},``0,System.Nullable{System.Boolean},System.Nullable{System.Threading.CancellationToken})
  name: GetByFilterAsync<TRequestModel>(Expression<Func<TEntity, bool>>?, TRequestModel?, bool?, CancellationToken?)
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler-3.html#Quickie_DataHandlers_Readonly_Implementation_ReadOnlyCollectionDataHandler_3_GetByFilterAsync__1_System_Linq_Expressions_Expression_System_Func__0_System_Boolean_____0_System_Nullable_System_Boolean__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler`3.GetByFilterAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},``0,System.Nullable{System.Boolean},System.Nullable{System.Threading.CancellationToken})
  name.vb: GetByFilterAsync(Of TRequestModel)(Expression(Of Func(Of TEntity, Boolean)), TRequestModel, Boolean?, CancellationToken?)
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType>.GetByFilterAsync<TRequestModel>(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>?, TRequestModel?, bool?, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler(Of TEntity, TDbContext, TIdType).GetByFilterAsync(Of TRequestModel)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), TRequestModel, Boolean?, System.Threading.CancellationToken?)
  nameWithType: ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType>.GetByFilterAsync<TRequestModel>(Expression<Func<TEntity, bool>>?, TRequestModel?, bool?, CancellationToken?)
  nameWithType.vb: ReadOnlyCollectionDataHandler(Of TEntity, TDbContext, TIdType).GetByFilterAsync(Of TRequestModel)(Expression(Of Func(Of TEntity, Boolean)), TRequestModel, Boolean?, CancellationToken?)
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`2
  name: ReadOnlyDataHandler<TEntity, TDbContext>
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler-2.html
  commentId: T:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`2
  name.vb: ReadOnlyDataHandler(Of TEntity, TDbContext)
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler<TEntity, TDbContext>
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler(Of TEntity, TDbContext)
  nameWithType: ReadOnlyDataHandler<TEntity, TDbContext>
  nameWithType.vb: ReadOnlyDataHandler(Of TEntity, TDbContext)
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`2.#ctor(Microsoft.EntityFrameworkCore.DbContext)
  name: ReadOnlyDataHandler(DbContext)
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler-2.html#Quickie_DataHandlers_Readonly_Implementation_ReadOnlyDataHandler_2__ctor_Microsoft_EntityFrameworkCore_DbContext_
  commentId: M:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`2.#ctor(Microsoft.EntityFrameworkCore.DbContext)
  name.vb: New(DbContext)
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler<TEntity, TDbContext>.ReadOnlyDataHandler(Microsoft.EntityFrameworkCore.DbContext)
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler(Of TEntity, TDbContext).New(Microsoft.EntityFrameworkCore.DbContext)
  nameWithType: ReadOnlyDataHandler<TEntity, TDbContext>.ReadOnlyDataHandler(DbContext)
  nameWithType.vb: ReadOnlyDataHandler(Of TEntity, TDbContext).New(DbContext)
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`2.#ctor*
  name: ReadOnlyDataHandler
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler-2.html#Quickie_DataHandlers_Readonly_Implementation_ReadOnlyDataHandler_2__ctor_
  commentId: Overload:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`2.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler<TEntity, TDbContext>.ReadOnlyDataHandler
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler(Of TEntity, TDbContext).New
  nameWithType: ReadOnlyDataHandler<TEntity, TDbContext>.ReadOnlyDataHandler
  nameWithType.vb: ReadOnlyDataHandler(Of TEntity, TDbContext).New
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`2.GetByIdAsync(System.Object,System.Threading.CancellationToken)
  name: GetByIdAsync(object, CancellationToken)
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler-2.html#Quickie_DataHandlers_Readonly_Implementation_ReadOnlyDataHandler_2_GetByIdAsync_System_Object_System_Threading_CancellationToken_
  commentId: M:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`2.GetByIdAsync(System.Object,System.Threading.CancellationToken)
  name.vb: GetByIdAsync(Object, CancellationToken)
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler<TEntity, TDbContext>.GetByIdAsync(object, System.Threading.CancellationToken)
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler(Of TEntity, TDbContext).GetByIdAsync(Object, System.Threading.CancellationToken)
  nameWithType: ReadOnlyDataHandler<TEntity, TDbContext>.GetByIdAsync(object, CancellationToken)
  nameWithType.vb: ReadOnlyDataHandler(Of TEntity, TDbContext).GetByIdAsync(Object, CancellationToken)
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`2.GetByIdAsync*
  name: GetByIdAsync
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler-2.html#Quickie_DataHandlers_Readonly_Implementation_ReadOnlyDataHandler_2_GetByIdAsync_
  commentId: Overload:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`2.GetByIdAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler<TEntity, TDbContext>.GetByIdAsync
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler(Of TEntity, TDbContext).GetByIdAsync
  nameWithType: ReadOnlyDataHandler<TEntity, TDbContext>.GetByIdAsync
  nameWithType.vb: ReadOnlyDataHandler(Of TEntity, TDbContext).GetByIdAsync
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3
  name: ReadOnlyDataHandler<TEntity, TDbContext, TIdType>
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler-3.html
  commentId: T:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3
  name.vb: ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType)
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler<TEntity, TDbContext, TIdType>
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType)
  nameWithType: ReadOnlyDataHandler<TEntity, TDbContext, TIdType>
  nameWithType.vb: ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType)
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3.#ctor(Microsoft.EntityFrameworkCore.DbContext)
  name: ReadOnlyDataHandler(DbContext)
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler-3.html#Quickie_DataHandlers_Readonly_Implementation_ReadOnlyDataHandler_3__ctor_Microsoft_EntityFrameworkCore_DbContext_
  commentId: M:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3.#ctor(Microsoft.EntityFrameworkCore.DbContext)
  name.vb: New(DbContext)
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler<TEntity, TDbContext, TIdType>.ReadOnlyDataHandler(Microsoft.EntityFrameworkCore.DbContext)
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType).New(Microsoft.EntityFrameworkCore.DbContext)
  nameWithType: ReadOnlyDataHandler<TEntity, TDbContext, TIdType>.ReadOnlyDataHandler(DbContext)
  nameWithType.vb: ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType).New(DbContext)
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3.#ctor*
  name: ReadOnlyDataHandler
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler-3.html#Quickie_DataHandlers_Readonly_Implementation_ReadOnlyDataHandler_3__ctor_
  commentId: Overload:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler<TEntity, TDbContext, TIdType>.ReadOnlyDataHandler
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType).New
  nameWithType: ReadOnlyDataHandler<TEntity, TDbContext, TIdType>.ReadOnlyDataHandler
  nameWithType.vb: ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType).New
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3.GetByIdAsync(`2,System.Nullable{System.Threading.CancellationToken})
  name: GetByIdAsync(TIdType, CancellationToken?)
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler-3.html#Quickie_DataHandlers_Readonly_Implementation_ReadOnlyDataHandler_3_GetByIdAsync__2_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3.GetByIdAsync(`2,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler<TEntity, TDbContext, TIdType>.GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType).GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  nameWithType: ReadOnlyDataHandler<TEntity, TDbContext, TIdType>.GetByIdAsync(TIdType, CancellationToken?)
  nameWithType.vb: ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType).GetByIdAsync(TIdType, CancellationToken?)
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3.GetByIdAsync*
  name: GetByIdAsync
  href: api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler-3.html#Quickie_DataHandlers_Readonly_Implementation_ReadOnlyDataHandler_3_GetByIdAsync_
  commentId: Overload:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3.GetByIdAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler<TEntity, TDbContext, TIdType>.GetByIdAsync
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType).GetByIdAsync
  nameWithType: ReadOnlyDataHandler<TEntity, TDbContext, TIdType>.GetByIdAsync
  nameWithType.vb: ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType).GetByIdAsync
- uid: Quickie.DataHandlers.Writeonly.Definition
  name: Quickie.DataHandlers.Writeonly.Definition
  href: api/Quickie.DataHandlers.Writeonly.Definition.html
  commentId: N:Quickie.DataHandlers.Writeonly.Definition
  fullName: Quickie.DataHandlers.Writeonly.Definition
  nameWithType: Quickie.DataHandlers.Writeonly.Definition
- uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1
  name: IWriteOnlyDataHandler<TEntity>
  href: api/Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html
  commentId: T:Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1
  name.vb: IWriteOnlyDataHandler(Of TEntity)
  fullName: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler<TEntity>
  fullName.vb: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler(Of TEntity)
  nameWithType: IWriteOnlyDataHandler<TEntity>
  nameWithType.vb: IWriteOnlyDataHandler(Of TEntity)
- uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1.CreateItemAsync(`0,System.Nullable{System.Threading.CancellationToken})
  name: CreateItemAsync(TEntity, CancellationToken?)
  href: api/Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html#Quickie_DataHandlers_Writeonly_Definition_IWriteOnlyDataHandler_1_CreateItemAsync__0_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1.CreateItemAsync(`0,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler<TEntity>.CreateItemAsync(TEntity, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler(Of TEntity).CreateItemAsync(TEntity, System.Threading.CancellationToken?)
  nameWithType: IWriteOnlyDataHandler<TEntity>.CreateItemAsync(TEntity, CancellationToken?)
  nameWithType.vb: IWriteOnlyDataHandler(Of TEntity).CreateItemAsync(TEntity, CancellationToken?)
- uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1.CreateItemAsync*
  name: CreateItemAsync
  href: api/Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html#Quickie_DataHandlers_Writeonly_Definition_IWriteOnlyDataHandler_1_CreateItemAsync_
  commentId: Overload:Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1.CreateItemAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler<TEntity>.CreateItemAsync
  fullName.vb: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler(Of TEntity).CreateItemAsync
  nameWithType: IWriteOnlyDataHandler<TEntity>.CreateItemAsync
  nameWithType.vb: IWriteOnlyDataHandler(Of TEntity).CreateItemAsync
- uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1.CreateItemsAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name: CreateItemsAsync(ICollection<TEntity>, CancellationToken?)
  href: api/Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html#Quickie_DataHandlers_Writeonly_Definition_IWriteOnlyDataHandler_1_CreateItemsAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1.CreateItemsAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name.vb: CreateItemsAsync(ICollection(Of TEntity), CancellationToken?)
  fullName: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler<TEntity>.CreateItemsAsync(System.Collections.Generic.ICollection<TEntity>, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler(Of TEntity).CreateItemsAsync(System.Collections.Generic.ICollection(Of TEntity), System.Threading.CancellationToken?)
  nameWithType: IWriteOnlyDataHandler<TEntity>.CreateItemsAsync(ICollection<TEntity>, CancellationToken?)
  nameWithType.vb: IWriteOnlyDataHandler(Of TEntity).CreateItemsAsync(ICollection(Of TEntity), CancellationToken?)
- uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1.CreateItemsAsync*
  name: CreateItemsAsync
  href: api/Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html#Quickie_DataHandlers_Writeonly_Definition_IWriteOnlyDataHandler_1_CreateItemsAsync_
  commentId: Overload:Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1.CreateItemsAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler<TEntity>.CreateItemsAsync
  fullName.vb: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler(Of TEntity).CreateItemsAsync
  nameWithType: IWriteOnlyDataHandler<TEntity>.CreateItemsAsync
  nameWithType.vb: IWriteOnlyDataHandler(Of TEntity).CreateItemsAsync
- uid: Quickie.DataHandlers.Writeonly.Implementation
  name: Quickie.DataHandlers.Writeonly.Implementation
  href: api/Quickie.DataHandlers.Writeonly.Implementation.html
  commentId: N:Quickie.DataHandlers.Writeonly.Implementation
  fullName: Quickie.DataHandlers.Writeonly.Implementation
  nameWithType: Quickie.DataHandlers.Writeonly.Implementation
- uid: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2
  name: WriteOnlyDataHandler<TEntity, TDbContext>
  href: api/Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler-2.html
  commentId: T:Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2
  name.vb: WriteOnlyDataHandler(Of TEntity, TDbContext)
  fullName: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler<TEntity, TDbContext>
  fullName.vb: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler(Of TEntity, TDbContext)
  nameWithType: WriteOnlyDataHandler<TEntity, TDbContext>
  nameWithType.vb: WriteOnlyDataHandler(Of TEntity, TDbContext)
- uid: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.#ctor(`1)
  name: WriteOnlyDataHandler(TDbContext)
  href: api/Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler-2.html#Quickie_DataHandlers_Writeonly_Implementation_WriteOnlyDataHandler_2__ctor__1_
  commentId: M:Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.#ctor(`1)
  name.vb: New(TDbContext)
  fullName: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler<TEntity, TDbContext>.WriteOnlyDataHandler(TDbContext)
  fullName.vb: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler(Of TEntity, TDbContext).New(TDbContext)
  nameWithType: WriteOnlyDataHandler<TEntity, TDbContext>.WriteOnlyDataHandler(TDbContext)
  nameWithType.vb: WriteOnlyDataHandler(Of TEntity, TDbContext).New(TDbContext)
- uid: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.#ctor*
  name: WriteOnlyDataHandler
  href: api/Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler-2.html#Quickie_DataHandlers_Writeonly_Implementation_WriteOnlyDataHandler_2__ctor_
  commentId: Overload:Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler<TEntity, TDbContext>.WriteOnlyDataHandler
  fullName.vb: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler(Of TEntity, TDbContext).New
  nameWithType: WriteOnlyDataHandler<TEntity, TDbContext>.WriteOnlyDataHandler
  nameWithType.vb: WriteOnlyDataHandler(Of TEntity, TDbContext).New
- uid: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.CreateItemAsync(`0,System.Nullable{System.Threading.CancellationToken})
  name: CreateItemAsync(TEntity, CancellationToken?)
  href: api/Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler-2.html#Quickie_DataHandlers_Writeonly_Implementation_WriteOnlyDataHandler_2_CreateItemAsync__0_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.CreateItemAsync(`0,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler<TEntity, TDbContext>.CreateItemAsync(TEntity, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler(Of TEntity, TDbContext).CreateItemAsync(TEntity, System.Threading.CancellationToken?)
  nameWithType: WriteOnlyDataHandler<TEntity, TDbContext>.CreateItemAsync(TEntity, CancellationToken?)
  nameWithType.vb: WriteOnlyDataHandler(Of TEntity, TDbContext).CreateItemAsync(TEntity, CancellationToken?)
- uid: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.CreateItemAsync*
  name: CreateItemAsync
  href: api/Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler-2.html#Quickie_DataHandlers_Writeonly_Implementation_WriteOnlyDataHandler_2_CreateItemAsync_
  commentId: Overload:Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.CreateItemAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler<TEntity, TDbContext>.CreateItemAsync
  fullName.vb: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler(Of TEntity, TDbContext).CreateItemAsync
  nameWithType: WriteOnlyDataHandler<TEntity, TDbContext>.CreateItemAsync
  nameWithType.vb: WriteOnlyDataHandler(Of TEntity, TDbContext).CreateItemAsync
- uid: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.CreateItemsAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name: CreateItemsAsync(ICollection<TEntity>, CancellationToken?)
  href: api/Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler-2.html#Quickie_DataHandlers_Writeonly_Implementation_WriteOnlyDataHandler_2_CreateItemsAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.CreateItemsAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name.vb: CreateItemsAsync(ICollection(Of TEntity), CancellationToken?)
  fullName: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler<TEntity, TDbContext>.CreateItemsAsync(System.Collections.Generic.ICollection<TEntity>, System.Threading.CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler(Of TEntity, TDbContext).CreateItemsAsync(System.Collections.Generic.ICollection(Of TEntity), System.Threading.CancellationToken?)
  nameWithType: WriteOnlyDataHandler<TEntity, TDbContext>.CreateItemsAsync(ICollection<TEntity>, CancellationToken?)
  nameWithType.vb: WriteOnlyDataHandler(Of TEntity, TDbContext).CreateItemsAsync(ICollection(Of TEntity), CancellationToken?)
- uid: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.CreateItemsAsync*
  name: CreateItemsAsync
  href: api/Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler-2.html#Quickie_DataHandlers_Writeonly_Implementation_WriteOnlyDataHandler_2_CreateItemsAsync_
  commentId: Overload:Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.CreateItemsAsync
  isSpec: "True"
  fullName: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler<TEntity, TDbContext>.CreateItemsAsync
  fullName.vb: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler(Of TEntity, TDbContext).CreateItemsAsync
  nameWithType: WriteOnlyDataHandler<TEntity, TDbContext>.CreateItemsAsync
  nameWithType.vb: WriteOnlyDataHandler(Of TEntity, TDbContext).CreateItemsAsync
- uid: Quickie.DataObj
  name: Quickie.DataObj
  href: api/Quickie.DataObj.html
  commentId: N:Quickie.DataObj
  fullName: Quickie.DataObj
  nameWithType: Quickie.DataObj
- uid: Quickie.DataObj.DetailedResponseObj
  name: DetailedResponseObj
  href: api/Quickie.DataObj.DetailedResponseObj.html
  commentId: T:Quickie.DataObj.DetailedResponseObj
  fullName: Quickie.DataObj.DetailedResponseObj
  nameWithType: DetailedResponseObj
- uid: Quickie.DataObj.DetailedResponseObj.Description
  name: Description
  href: api/Quickie.DataObj.DetailedResponseObj.html#Quickie_DataObj_DetailedResponseObj_Description
  commentId: P:Quickie.DataObj.DetailedResponseObj.Description
  fullName: Quickie.DataObj.DetailedResponseObj.Description
  nameWithType: DetailedResponseObj.Description
- uid: Quickie.DataObj.DetailedResponseObj.Description*
  name: Description
  href: api/Quickie.DataObj.DetailedResponseObj.html#Quickie_DataObj_DetailedResponseObj_Description_
  commentId: Overload:Quickie.DataObj.DetailedResponseObj.Description
  isSpec: "True"
  fullName: Quickie.DataObj.DetailedResponseObj.Description
  nameWithType: DetailedResponseObj.Description
- uid: Quickie.DataObj.DetailedResponseObj.ErrorStatus
  name: ErrorStatus
  href: api/Quickie.DataObj.DetailedResponseObj.html#Quickie_DataObj_DetailedResponseObj_ErrorStatus
  commentId: P:Quickie.DataObj.DetailedResponseObj.ErrorStatus
  fullName: Quickie.DataObj.DetailedResponseObj.ErrorStatus
  nameWithType: DetailedResponseObj.ErrorStatus
- uid: Quickie.DataObj.DetailedResponseObj.ErrorStatus*
  name: ErrorStatus
  href: api/Quickie.DataObj.DetailedResponseObj.html#Quickie_DataObj_DetailedResponseObj_ErrorStatus_
  commentId: Overload:Quickie.DataObj.DetailedResponseObj.ErrorStatus
  isSpec: "True"
  fullName: Quickie.DataObj.DetailedResponseObj.ErrorStatus
  nameWithType: DetailedResponseObj.ErrorStatus
- uid: Quickie.DataObj.DetailedResponseObj.Message
  name: Message
  href: api/Quickie.DataObj.DetailedResponseObj.html#Quickie_DataObj_DetailedResponseObj_Message
  commentId: P:Quickie.DataObj.DetailedResponseObj.Message
  fullName: Quickie.DataObj.DetailedResponseObj.Message
  nameWithType: DetailedResponseObj.Message
- uid: Quickie.DataObj.DetailedResponseObj.Message*
  name: Message
  href: api/Quickie.DataObj.DetailedResponseObj.html#Quickie_DataObj_DetailedResponseObj_Message_
  commentId: Overload:Quickie.DataObj.DetailedResponseObj.Message
  isSpec: "True"
  fullName: Quickie.DataObj.DetailedResponseObj.Message
  nameWithType: DetailedResponseObj.Message
- uid: Quickie.DataObj.DetailedResponseObj.Show
  name: Show
  href: api/Quickie.DataObj.DetailedResponseObj.html#Quickie_DataObj_DetailedResponseObj_Show
  commentId: P:Quickie.DataObj.DetailedResponseObj.Show
  fullName: Quickie.DataObj.DetailedResponseObj.Show
  nameWithType: DetailedResponseObj.Show
- uid: Quickie.DataObj.DetailedResponseObj.Show*
  name: Show
  href: api/Quickie.DataObj.DetailedResponseObj.html#Quickie_DataObj_DetailedResponseObj_Show_
  commentId: Overload:Quickie.DataObj.DetailedResponseObj.Show
  isSpec: "True"
  fullName: Quickie.DataObj.DetailedResponseObj.Show
  nameWithType: DetailedResponseObj.Show
- uid: Quickie.DataObj.PaginatedDataObj`1
  name: PaginatedDataObj<TObject>
  href: api/Quickie.DataObj.PaginatedDataObj-1.html
  commentId: T:Quickie.DataObj.PaginatedDataObj`1
  name.vb: PaginatedDataObj(Of TObject)
  fullName: Quickie.DataObj.PaginatedDataObj<TObject>
  fullName.vb: Quickie.DataObj.PaginatedDataObj(Of TObject)
  nameWithType: PaginatedDataObj<TObject>
  nameWithType.vb: PaginatedDataObj(Of TObject)
- uid: Quickie.DataObj.PaginatedDataObj`1.Items
  name: Items
  href: api/Quickie.DataObj.PaginatedDataObj-1.html#Quickie_DataObj_PaginatedDataObj_1_Items
  commentId: P:Quickie.DataObj.PaginatedDataObj`1.Items
  fullName: Quickie.DataObj.PaginatedDataObj<TObject>.Items
  fullName.vb: Quickie.DataObj.PaginatedDataObj(Of TObject).Items
  nameWithType: PaginatedDataObj<TObject>.Items
  nameWithType.vb: PaginatedDataObj(Of TObject).Items
- uid: Quickie.DataObj.PaginatedDataObj`1.Items*
  name: Items
  href: api/Quickie.DataObj.PaginatedDataObj-1.html#Quickie_DataObj_PaginatedDataObj_1_Items_
  commentId: Overload:Quickie.DataObj.PaginatedDataObj`1.Items
  isSpec: "True"
  fullName: Quickie.DataObj.PaginatedDataObj<TObject>.Items
  fullName.vb: Quickie.DataObj.PaginatedDataObj(Of TObject).Items
  nameWithType: PaginatedDataObj<TObject>.Items
  nameWithType.vb: PaginatedDataObj(Of TObject).Items
- uid: Quickie.DataObj.PaginatedDataObj`1.Total
  name: Total
  href: api/Quickie.DataObj.PaginatedDataObj-1.html#Quickie_DataObj_PaginatedDataObj_1_Total
  commentId: P:Quickie.DataObj.PaginatedDataObj`1.Total
  fullName: Quickie.DataObj.PaginatedDataObj<TObject>.Total
  fullName.vb: Quickie.DataObj.PaginatedDataObj(Of TObject).Total
  nameWithType: PaginatedDataObj<TObject>.Total
  nameWithType.vb: PaginatedDataObj(Of TObject).Total
- uid: Quickie.DataObj.PaginatedDataObj`1.Total*
  name: Total
  href: api/Quickie.DataObj.PaginatedDataObj-1.html#Quickie_DataObj_PaginatedDataObj_1_Total_
  commentId: Overload:Quickie.DataObj.PaginatedDataObj`1.Total
  isSpec: "True"
  fullName: Quickie.DataObj.PaginatedDataObj<TObject>.Total
  fullName.vb: Quickie.DataObj.PaginatedDataObj(Of TObject).Total
  nameWithType: PaginatedDataObj<TObject>.Total
  nameWithType.vb: PaginatedDataObj(Of TObject).Total
- uid: Quickie.DataObj.RequestForDataObj
  name: RequestForDataObj
  href: api/Quickie.DataObj.RequestForDataObj.html
  commentId: T:Quickie.DataObj.RequestForDataObj
  fullName: Quickie.DataObj.RequestForDataObj
  nameWithType: RequestForDataObj
- uid: Quickie.DataObj.RequestForDataObj.PageNumber
  name: PageNumber
  href: api/Quickie.DataObj.RequestForDataObj.html#Quickie_DataObj_RequestForDataObj_PageNumber
  commentId: P:Quickie.DataObj.RequestForDataObj.PageNumber
  fullName: Quickie.DataObj.RequestForDataObj.PageNumber
  nameWithType: RequestForDataObj.PageNumber
- uid: Quickie.DataObj.RequestForDataObj.PageNumber*
  name: PageNumber
  href: api/Quickie.DataObj.RequestForDataObj.html#Quickie_DataObj_RequestForDataObj_PageNumber_
  commentId: Overload:Quickie.DataObj.RequestForDataObj.PageNumber
  isSpec: "True"
  fullName: Quickie.DataObj.RequestForDataObj.PageNumber
  nameWithType: RequestForDataObj.PageNumber
- uid: Quickie.DataObj.RequestForDataObj.PageSize
  name: PageSize
  href: api/Quickie.DataObj.RequestForDataObj.html#Quickie_DataObj_RequestForDataObj_PageSize
  commentId: P:Quickie.DataObj.RequestForDataObj.PageSize
  fullName: Quickie.DataObj.RequestForDataObj.PageSize
  nameWithType: RequestForDataObj.PageSize
- uid: Quickie.DataObj.RequestForDataObj.PageSize*
  name: PageSize
  href: api/Quickie.DataObj.RequestForDataObj.html#Quickie_DataObj_RequestForDataObj_PageSize_
  commentId: Overload:Quickie.DataObj.RequestForDataObj.PageSize
  isSpec: "True"
  fullName: Quickie.DataObj.RequestForDataObj.PageSize
  nameWithType: RequestForDataObj.PageSize
- uid: Quickie.DataObj.ResponseObj
  name: ResponseObj
  href: api/Quickie.DataObj.ResponseObj.html
  commentId: T:Quickie.DataObj.ResponseObj
  fullName: Quickie.DataObj.ResponseObj
  nameWithType: ResponseObj
- uid: Quickie.DataObj.ResponseObj.IsSuccess
  name: IsSuccess
  href: api/Quickie.DataObj.ResponseObj.html#Quickie_DataObj_ResponseObj_IsSuccess
  commentId: P:Quickie.DataObj.ResponseObj.IsSuccess
  fullName: Quickie.DataObj.ResponseObj.IsSuccess
  nameWithType: ResponseObj.IsSuccess
- uid: Quickie.DataObj.ResponseObj.IsSuccess*
  name: IsSuccess
  href: api/Quickie.DataObj.ResponseObj.html#Quickie_DataObj_ResponseObj_IsSuccess_
  commentId: Overload:Quickie.DataObj.ResponseObj.IsSuccess
  isSpec: "True"
  fullName: Quickie.DataObj.ResponseObj.IsSuccess
  nameWithType: ResponseObj.IsSuccess
- uid: Quickie.DataObj.ResponseObj.Message
  name: Message
  href: api/Quickie.DataObj.ResponseObj.html#Quickie_DataObj_ResponseObj_Message
  commentId: P:Quickie.DataObj.ResponseObj.Message
  fullName: Quickie.DataObj.ResponseObj.Message
  nameWithType: ResponseObj.Message
- uid: Quickie.DataObj.ResponseObj.Message*
  name: Message
  href: api/Quickie.DataObj.ResponseObj.html#Quickie_DataObj_ResponseObj_Message_
  commentId: Overload:Quickie.DataObj.ResponseObj.Message
  isSpec: "True"
  fullName: Quickie.DataObj.ResponseObj.Message
  nameWithType: ResponseObj.Message
- uid: Quickie.DataObj.ResponseObj`1
  name: ResponseObj<TData>
  href: api/Quickie.DataObj.ResponseObj-1.html
  commentId: T:Quickie.DataObj.ResponseObj`1
  name.vb: ResponseObj(Of TData)
  fullName: Quickie.DataObj.ResponseObj<TData>
  fullName.vb: Quickie.DataObj.ResponseObj(Of TData)
  nameWithType: ResponseObj<TData>
  nameWithType.vb: ResponseObj(Of TData)
- uid: Quickie.DataObj.ResponseObj`1.Data
  name: Data
  href: api/Quickie.DataObj.ResponseObj-1.html#Quickie_DataObj_ResponseObj_1_Data
  commentId: P:Quickie.DataObj.ResponseObj`1.Data
  fullName: Quickie.DataObj.ResponseObj<TData>.Data
  fullName.vb: Quickie.DataObj.ResponseObj(Of TData).Data
  nameWithType: ResponseObj<TData>.Data
  nameWithType.vb: ResponseObj(Of TData).Data
- uid: Quickie.DataObj.ResponseObj`1.Data*
  name: Data
  href: api/Quickie.DataObj.ResponseObj-1.html#Quickie_DataObj_ResponseObj_1_Data_
  commentId: Overload:Quickie.DataObj.ResponseObj`1.Data
  isSpec: "True"
  fullName: Quickie.DataObj.ResponseObj<TData>.Data
  fullName.vb: Quickie.DataObj.ResponseObj(Of TData).Data
  nameWithType: ResponseObj<TData>.Data
  nameWithType.vb: ResponseObj(Of TData).Data
- uid: Quickie.DataObj.ResponseObj`1.IsSuccess
  name: IsSuccess
  href: api/Quickie.DataObj.ResponseObj-1.html#Quickie_DataObj_ResponseObj_1_IsSuccess
  commentId: P:Quickie.DataObj.ResponseObj`1.IsSuccess
  fullName: Quickie.DataObj.ResponseObj<TData>.IsSuccess
  fullName.vb: Quickie.DataObj.ResponseObj(Of TData).IsSuccess
  nameWithType: ResponseObj<TData>.IsSuccess
  nameWithType.vb: ResponseObj(Of TData).IsSuccess
- uid: Quickie.DataObj.ResponseObj`1.IsSuccess*
  name: IsSuccess
  href: api/Quickie.DataObj.ResponseObj-1.html#Quickie_DataObj_ResponseObj_1_IsSuccess_
  commentId: Overload:Quickie.DataObj.ResponseObj`1.IsSuccess
  isSpec: "True"
  fullName: Quickie.DataObj.ResponseObj<TData>.IsSuccess
  fullName.vb: Quickie.DataObj.ResponseObj(Of TData).IsSuccess
  nameWithType: ResponseObj<TData>.IsSuccess
  nameWithType.vb: ResponseObj(Of TData).IsSuccess
- uid: Quickie.DataObj.ResponseObj`1.Message
  name: Message
  href: api/Quickie.DataObj.ResponseObj-1.html#Quickie_DataObj_ResponseObj_1_Message
  commentId: P:Quickie.DataObj.ResponseObj`1.Message
  fullName: Quickie.DataObj.ResponseObj<TData>.Message
  fullName.vb: Quickie.DataObj.ResponseObj(Of TData).Message
  nameWithType: ResponseObj<TData>.Message
  nameWithType.vb: ResponseObj(Of TData).Message
- uid: Quickie.DataObj.ResponseObj`1.Message*
  name: Message
  href: api/Quickie.DataObj.ResponseObj-1.html#Quickie_DataObj_ResponseObj_1_Message_
  commentId: Overload:Quickie.DataObj.ResponseObj`1.Message
  isSpec: "True"
  fullName: Quickie.DataObj.ResponseObj<TData>.Message
  fullName.vb: Quickie.DataObj.ResponseObj(Of TData).Message
  nameWithType: ResponseObj<TData>.Message
  nameWithType.vb: ResponseObj(Of TData).Message
- uid: Quickie.Handlers.Crud.Definition
  name: Quickie.Handlers.Crud.Definition
  href: api/Quickie.Handlers.Crud.Definition.html
  commentId: N:Quickie.Handlers.Crud.Definition
  fullName: Quickie.Handlers.Crud.Definition
  nameWithType: Quickie.Handlers.Crud.Definition
- uid: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2
  name: ICrudForCollectionRequestHandler<TViewModel, TIdType>
  href: api/Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler-2.html
  commentId: T:Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2
  name.vb: ICrudForCollectionRequestHandler(Of TViewModel, TIdType)
  fullName: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler<TViewModel, TIdType>
  fullName.vb: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler(Of TViewModel, TIdType)
  nameWithType: ICrudForCollectionRequestHandler<TViewModel, TIdType>
  nameWithType.vb: ICrudForCollectionRequestHandler(Of TViewModel, TIdType)
- uid: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2.CountAsync(System.Nullable{System.Threading.CancellationToken})
  name: CountAsync(CancellationToken?)
  href: api/Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler-2.html#Quickie_Handlers_Crud_Definition_ICrudForCollectionRequestHandler_2_CountAsync_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2.CountAsync(System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler<TViewModel, TIdType>.CountAsync(System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler(Of TViewModel, TIdType).CountAsync(System.Threading.CancellationToken?)
  nameWithType: ICrudForCollectionRequestHandler<TViewModel, TIdType>.CountAsync(CancellationToken?)
  nameWithType.vb: ICrudForCollectionRequestHandler(Of TViewModel, TIdType).CountAsync(CancellationToken?)
- uid: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2.CountAsync*
  name: CountAsync
  href: api/Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler-2.html#Quickie_Handlers_Crud_Definition_ICrudForCollectionRequestHandler_2_CountAsync_
  commentId: Overload:Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2.CountAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler<TViewModel, TIdType>.CountAsync
  fullName.vb: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler(Of TViewModel, TIdType).CountAsync
  nameWithType: ICrudForCollectionRequestHandler<TViewModel, TIdType>.CountAsync
  nameWithType.vb: ICrudForCollectionRequestHandler(Of TViewModel, TIdType).CountAsync
- uid: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2.CreateRangeAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name: CreateRangeAsync(ICollection<TViewModel>, CancellationToken?)
  href: api/Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler-2.html#Quickie_Handlers_Crud_Definition_ICrudForCollectionRequestHandler_2_CreateRangeAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2.CreateRangeAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name.vb: CreateRangeAsync(ICollection(Of TViewModel), CancellationToken?)
  fullName: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler<TViewModel, TIdType>.CreateRangeAsync(System.Collections.Generic.ICollection<TViewModel>, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler(Of TViewModel, TIdType).CreateRangeAsync(System.Collections.Generic.ICollection(Of TViewModel), System.Threading.CancellationToken?)
  nameWithType: ICrudForCollectionRequestHandler<TViewModel, TIdType>.CreateRangeAsync(ICollection<TViewModel>, CancellationToken?)
  nameWithType.vb: ICrudForCollectionRequestHandler(Of TViewModel, TIdType).CreateRangeAsync(ICollection(Of TViewModel), CancellationToken?)
- uid: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2.CreateRangeAsync*
  name: CreateRangeAsync
  href: api/Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler-2.html#Quickie_Handlers_Crud_Definition_ICrudForCollectionRequestHandler_2_CreateRangeAsync_
  commentId: Overload:Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2.CreateRangeAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler<TViewModel, TIdType>.CreateRangeAsync
  fullName.vb: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler(Of TViewModel, TIdType).CreateRangeAsync
  nameWithType: ICrudForCollectionRequestHandler<TViewModel, TIdType>.CreateRangeAsync
  nameWithType.vb: ICrudForCollectionRequestHandler(Of TViewModel, TIdType).CreateRangeAsync
- uid: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2.DeleteRangeAsync(System.Collections.Generic.ICollection{`1},System.Nullable{System.Threading.CancellationToken})
  name: DeleteRangeAsync(ICollection<TIdType>, CancellationToken?)
  href: api/Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler-2.html#Quickie_Handlers_Crud_Definition_ICrudForCollectionRequestHandler_2_DeleteRangeAsync_System_Collections_Generic_ICollection__1__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2.DeleteRangeAsync(System.Collections.Generic.ICollection{`1},System.Nullable{System.Threading.CancellationToken})
  name.vb: DeleteRangeAsync(ICollection(Of TIdType), CancellationToken?)
  fullName: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler<TViewModel, TIdType>.DeleteRangeAsync(System.Collections.Generic.ICollection<TIdType>, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler(Of TViewModel, TIdType).DeleteRangeAsync(System.Collections.Generic.ICollection(Of TIdType), System.Threading.CancellationToken?)
  nameWithType: ICrudForCollectionRequestHandler<TViewModel, TIdType>.DeleteRangeAsync(ICollection<TIdType>, CancellationToken?)
  nameWithType.vb: ICrudForCollectionRequestHandler(Of TViewModel, TIdType).DeleteRangeAsync(ICollection(Of TIdType), CancellationToken?)
- uid: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2.DeleteRangeAsync*
  name: DeleteRangeAsync
  href: api/Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler-2.html#Quickie_Handlers_Crud_Definition_ICrudForCollectionRequestHandler_2_DeleteRangeAsync_
  commentId: Overload:Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2.DeleteRangeAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler<TViewModel, TIdType>.DeleteRangeAsync
  fullName.vb: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler(Of TViewModel, TIdType).DeleteRangeAsync
  nameWithType: ICrudForCollectionRequestHandler<TViewModel, TIdType>.DeleteRangeAsync
  nameWithType.vb: ICrudForCollectionRequestHandler(Of TViewModel, TIdType).DeleteRangeAsync
- uid: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2.GetAllAsync(Quickie.DataObj.RequestForDataObj,System.Nullable{System.Threading.CancellationToken})
  name: GetAllAsync(RequestForDataObj, CancellationToken?)
  href: api/Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler-2.html#Quickie_Handlers_Crud_Definition_ICrudForCollectionRequestHandler_2_GetAllAsync_Quickie_DataObj_RequestForDataObj_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2.GetAllAsync(Quickie.DataObj.RequestForDataObj,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler<TViewModel, TIdType>.GetAllAsync(Quickie.DataObj.RequestForDataObj, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler(Of TViewModel, TIdType).GetAllAsync(Quickie.DataObj.RequestForDataObj, System.Threading.CancellationToken?)
  nameWithType: ICrudForCollectionRequestHandler<TViewModel, TIdType>.GetAllAsync(RequestForDataObj, CancellationToken?)
  nameWithType.vb: ICrudForCollectionRequestHandler(Of TViewModel, TIdType).GetAllAsync(RequestForDataObj, CancellationToken?)
- uid: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2.GetAllAsync*
  name: GetAllAsync
  href: api/Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler-2.html#Quickie_Handlers_Crud_Definition_ICrudForCollectionRequestHandler_2_GetAllAsync_
  commentId: Overload:Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2.GetAllAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler<TViewModel, TIdType>.GetAllAsync
  fullName.vb: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler(Of TViewModel, TIdType).GetAllAsync
  nameWithType: ICrudForCollectionRequestHandler<TViewModel, TIdType>.GetAllAsync
  nameWithType.vb: ICrudForCollectionRequestHandler(Of TViewModel, TIdType).GetAllAsync
- uid: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2.UpdateRangeAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name: UpdateRangeAsync(ICollection<TViewModel>, CancellationToken?)
  href: api/Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler-2.html#Quickie_Handlers_Crud_Definition_ICrudForCollectionRequestHandler_2_UpdateRangeAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2.UpdateRangeAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name.vb: UpdateRangeAsync(ICollection(Of TViewModel), CancellationToken?)
  fullName: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler<TViewModel, TIdType>.UpdateRangeAsync(System.Collections.Generic.ICollection<TViewModel>, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler(Of TViewModel, TIdType).UpdateRangeAsync(System.Collections.Generic.ICollection(Of TViewModel), System.Threading.CancellationToken?)
  nameWithType: ICrudForCollectionRequestHandler<TViewModel, TIdType>.UpdateRangeAsync(ICollection<TViewModel>, CancellationToken?)
  nameWithType.vb: ICrudForCollectionRequestHandler(Of TViewModel, TIdType).UpdateRangeAsync(ICollection(Of TViewModel), CancellationToken?)
- uid: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2.UpdateRangeAsync*
  name: UpdateRangeAsync
  href: api/Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler-2.html#Quickie_Handlers_Crud_Definition_ICrudForCollectionRequestHandler_2_UpdateRangeAsync_
  commentId: Overload:Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler`2.UpdateRangeAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler<TViewModel, TIdType>.UpdateRangeAsync
  fullName.vb: Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler(Of TViewModel, TIdType).UpdateRangeAsync
  nameWithType: ICrudForCollectionRequestHandler<TViewModel, TIdType>.UpdateRangeAsync
  nameWithType.vb: ICrudForCollectionRequestHandler(Of TViewModel, TIdType).UpdateRangeAsync
- uid: Quickie.Handlers.Crud.Definition.ICrudRequestHandler`2
  name: ICrudRequestHandler<TViewModel, TIdType>
  href: api/Quickie.Handlers.Crud.Definition.ICrudRequestHandler-2.html
  commentId: T:Quickie.Handlers.Crud.Definition.ICrudRequestHandler`2
  name.vb: ICrudRequestHandler(Of TViewModel, TIdType)
  fullName: Quickie.Handlers.Crud.Definition.ICrudRequestHandler<TViewModel, TIdType>
  fullName.vb: Quickie.Handlers.Crud.Definition.ICrudRequestHandler(Of TViewModel, TIdType)
  nameWithType: ICrudRequestHandler<TViewModel, TIdType>
  nameWithType.vb: ICrudRequestHandler(Of TViewModel, TIdType)
- uid: Quickie.Handlers.Crud.Definition.ICrudRequestHandler`2.CreateAsync(`0,System.Nullable{System.Threading.CancellationToken})
  name: CreateAsync(TViewModel, CancellationToken?)
  href: api/Quickie.Handlers.Crud.Definition.ICrudRequestHandler-2.html#Quickie_Handlers_Crud_Definition_ICrudRequestHandler_2_CreateAsync__0_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Crud.Definition.ICrudRequestHandler`2.CreateAsync(`0,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.Handlers.Crud.Definition.ICrudRequestHandler<TViewModel, TIdType>.CreateAsync(TViewModel, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Crud.Definition.ICrudRequestHandler(Of TViewModel, TIdType).CreateAsync(TViewModel, System.Threading.CancellationToken?)
  nameWithType: ICrudRequestHandler<TViewModel, TIdType>.CreateAsync(TViewModel, CancellationToken?)
  nameWithType.vb: ICrudRequestHandler(Of TViewModel, TIdType).CreateAsync(TViewModel, CancellationToken?)
- uid: Quickie.Handlers.Crud.Definition.ICrudRequestHandler`2.CreateAsync*
  name: CreateAsync
  href: api/Quickie.Handlers.Crud.Definition.ICrudRequestHandler-2.html#Quickie_Handlers_Crud_Definition_ICrudRequestHandler_2_CreateAsync_
  commentId: Overload:Quickie.Handlers.Crud.Definition.ICrudRequestHandler`2.CreateAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Definition.ICrudRequestHandler<TViewModel, TIdType>.CreateAsync
  fullName.vb: Quickie.Handlers.Crud.Definition.ICrudRequestHandler(Of TViewModel, TIdType).CreateAsync
  nameWithType: ICrudRequestHandler<TViewModel, TIdType>.CreateAsync
  nameWithType.vb: ICrudRequestHandler(Of TViewModel, TIdType).CreateAsync
- uid: Quickie.Handlers.Crud.Definition.ICrudRequestHandler`2.DeleteAsync(`1,System.Nullable{System.Threading.CancellationToken})
  name: DeleteAsync(TIdType, CancellationToken?)
  href: api/Quickie.Handlers.Crud.Definition.ICrudRequestHandler-2.html#Quickie_Handlers_Crud_Definition_ICrudRequestHandler_2_DeleteAsync__1_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Crud.Definition.ICrudRequestHandler`2.DeleteAsync(`1,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.Handlers.Crud.Definition.ICrudRequestHandler<TViewModel, TIdType>.DeleteAsync(TIdType, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Crud.Definition.ICrudRequestHandler(Of TViewModel, TIdType).DeleteAsync(TIdType, System.Threading.CancellationToken?)
  nameWithType: ICrudRequestHandler<TViewModel, TIdType>.DeleteAsync(TIdType, CancellationToken?)
  nameWithType.vb: ICrudRequestHandler(Of TViewModel, TIdType).DeleteAsync(TIdType, CancellationToken?)
- uid: Quickie.Handlers.Crud.Definition.ICrudRequestHandler`2.DeleteAsync*
  name: DeleteAsync
  href: api/Quickie.Handlers.Crud.Definition.ICrudRequestHandler-2.html#Quickie_Handlers_Crud_Definition_ICrudRequestHandler_2_DeleteAsync_
  commentId: Overload:Quickie.Handlers.Crud.Definition.ICrudRequestHandler`2.DeleteAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Definition.ICrudRequestHandler<TViewModel, TIdType>.DeleteAsync
  fullName.vb: Quickie.Handlers.Crud.Definition.ICrudRequestHandler(Of TViewModel, TIdType).DeleteAsync
  nameWithType: ICrudRequestHandler<TViewModel, TIdType>.DeleteAsync
  nameWithType.vb: ICrudRequestHandler(Of TViewModel, TIdType).DeleteAsync
- uid: Quickie.Handlers.Crud.Definition.ICrudRequestHandler`2.GetByIdAsync(`1,System.Nullable{System.Threading.CancellationToken})
  name: GetByIdAsync(TIdType, CancellationToken?)
  href: api/Quickie.Handlers.Crud.Definition.ICrudRequestHandler-2.html#Quickie_Handlers_Crud_Definition_ICrudRequestHandler_2_GetByIdAsync__1_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Crud.Definition.ICrudRequestHandler`2.GetByIdAsync(`1,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.Handlers.Crud.Definition.ICrudRequestHandler<TViewModel, TIdType>.GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Crud.Definition.ICrudRequestHandler(Of TViewModel, TIdType).GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  nameWithType: ICrudRequestHandler<TViewModel, TIdType>.GetByIdAsync(TIdType, CancellationToken?)
  nameWithType.vb: ICrudRequestHandler(Of TViewModel, TIdType).GetByIdAsync(TIdType, CancellationToken?)
- uid: Quickie.Handlers.Crud.Definition.ICrudRequestHandler`2.GetByIdAsync*
  name: GetByIdAsync
  href: api/Quickie.Handlers.Crud.Definition.ICrudRequestHandler-2.html#Quickie_Handlers_Crud_Definition_ICrudRequestHandler_2_GetByIdAsync_
  commentId: Overload:Quickie.Handlers.Crud.Definition.ICrudRequestHandler`2.GetByIdAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Definition.ICrudRequestHandler<TViewModel, TIdType>.GetByIdAsync
  fullName.vb: Quickie.Handlers.Crud.Definition.ICrudRequestHandler(Of TViewModel, TIdType).GetByIdAsync
  nameWithType: ICrudRequestHandler<TViewModel, TIdType>.GetByIdAsync
  nameWithType.vb: ICrudRequestHandler(Of TViewModel, TIdType).GetByIdAsync
- uid: Quickie.Handlers.Crud.Definition.ICrudRequestHandler`2.UpdateAsync(`1,`0,System.Nullable{System.Threading.CancellationToken})
  name: UpdateAsync(TIdType, TViewModel, CancellationToken?)
  href: api/Quickie.Handlers.Crud.Definition.ICrudRequestHandler-2.html#Quickie_Handlers_Crud_Definition_ICrudRequestHandler_2_UpdateAsync__1__0_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Crud.Definition.ICrudRequestHandler`2.UpdateAsync(`1,`0,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.Handlers.Crud.Definition.ICrudRequestHandler<TViewModel, TIdType>.UpdateAsync(TIdType, TViewModel, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Crud.Definition.ICrudRequestHandler(Of TViewModel, TIdType).UpdateAsync(TIdType, TViewModel, System.Threading.CancellationToken?)
  nameWithType: ICrudRequestHandler<TViewModel, TIdType>.UpdateAsync(TIdType, TViewModel, CancellationToken?)
  nameWithType.vb: ICrudRequestHandler(Of TViewModel, TIdType).UpdateAsync(TIdType, TViewModel, CancellationToken?)
- uid: Quickie.Handlers.Crud.Definition.ICrudRequestHandler`2.UpdateAsync*
  name: UpdateAsync
  href: api/Quickie.Handlers.Crud.Definition.ICrudRequestHandler-2.html#Quickie_Handlers_Crud_Definition_ICrudRequestHandler_2_UpdateAsync_
  commentId: Overload:Quickie.Handlers.Crud.Definition.ICrudRequestHandler`2.UpdateAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Definition.ICrudRequestHandler<TViewModel, TIdType>.UpdateAsync
  fullName.vb: Quickie.Handlers.Crud.Definition.ICrudRequestHandler(Of TViewModel, TIdType).UpdateAsync
  nameWithType: ICrudRequestHandler<TViewModel, TIdType>.UpdateAsync
  nameWithType.vb: ICrudRequestHandler(Of TViewModel, TIdType).UpdateAsync
- uid: Quickie.Handlers.Crud.Implementation
  name: Quickie.Handlers.Crud.Implementation
  href: api/Quickie.Handlers.Crud.Implementation.html
  commentId: N:Quickie.Handlers.Crud.Implementation
  fullName: Quickie.Handlers.Crud.Implementation
  nameWithType: Quickie.Handlers.Crud.Implementation
- uid: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4
  name: CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>
  href: api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html
  commentId: T:Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4
  name.vb: CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType)
  fullName: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType)
  nameWithType: CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>
  nameWithType.vb: CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType)
- uid: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.#ctor(`2)
  name: CrudForCollectionRequestHandler(TDataHandler)
  href: api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudForCollectionRequestHandler_4__ctor__2_
  commentId: M:Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.#ctor(`2)
  name.vb: New(TDataHandler)
  fullName: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.CrudForCollectionRequestHandler(TDataHandler)
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New(TDataHandler)
  nameWithType: CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.CrudForCollectionRequestHandler(TDataHandler)
  nameWithType.vb: CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New(TDataHandler)
- uid: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.#ctor*
  name: CrudForCollectionRequestHandler
  href: api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudForCollectionRequestHandler_4__ctor_
  commentId: Overload:Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.CrudForCollectionRequestHandler
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New
  nameWithType: CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.CrudForCollectionRequestHandler
  nameWithType.vb: CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New
- uid: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.CountAsync(System.Nullable{System.Threading.CancellationToken})
  name: CountAsync(CancellationToken?)
  href: api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudForCollectionRequestHandler_4_CountAsync_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.CountAsync(System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.CountAsync(System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).CountAsync(System.Threading.CancellationToken?)
  nameWithType: CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.CountAsync(CancellationToken?)
  nameWithType.vb: CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).CountAsync(CancellationToken?)
- uid: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.CountAsync*
  name: CountAsync
  href: api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudForCollectionRequestHandler_4_CountAsync_
  commentId: Overload:Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.CountAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.CountAsync
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).CountAsync
  nameWithType: CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.CountAsync
  nameWithType.vb: CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).CountAsync
- uid: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.CreateRangeAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name: CreateRangeAsync(ICollection<TViewModel>, CancellationToken?)
  href: api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudForCollectionRequestHandler_4_CreateRangeAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.CreateRangeAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name.vb: CreateRangeAsync(ICollection(Of TViewModel), CancellationToken?)
  fullName: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.CreateRangeAsync(System.Collections.Generic.ICollection<TViewModel>, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).CreateRangeAsync(System.Collections.Generic.ICollection(Of TViewModel), System.Threading.CancellationToken?)
  nameWithType: CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.CreateRangeAsync(ICollection<TViewModel>, CancellationToken?)
  nameWithType.vb: CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).CreateRangeAsync(ICollection(Of TViewModel), CancellationToken?)
- uid: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.CreateRangeAsync*
  name: CreateRangeAsync
  href: api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudForCollectionRequestHandler_4_CreateRangeAsync_
  commentId: Overload:Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.CreateRangeAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.CreateRangeAsync
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).CreateRangeAsync
  nameWithType: CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.CreateRangeAsync
  nameWithType.vb: CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).CreateRangeAsync
- uid: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.DeleteRangeAsync(System.Collections.Generic.ICollection{`3},System.Nullable{System.Threading.CancellationToken})
  name: DeleteRangeAsync(ICollection<TIdType>, CancellationToken?)
  href: api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudForCollectionRequestHandler_4_DeleteRangeAsync_System_Collections_Generic_ICollection__3__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.DeleteRangeAsync(System.Collections.Generic.ICollection{`3},System.Nullable{System.Threading.CancellationToken})
  name.vb: DeleteRangeAsync(ICollection(Of TIdType), CancellationToken?)
  fullName: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.DeleteRangeAsync(System.Collections.Generic.ICollection<TIdType>, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).DeleteRangeAsync(System.Collections.Generic.ICollection(Of TIdType), System.Threading.CancellationToken?)
  nameWithType: CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.DeleteRangeAsync(ICollection<TIdType>, CancellationToken?)
  nameWithType.vb: CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).DeleteRangeAsync(ICollection(Of TIdType), CancellationToken?)
- uid: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.DeleteRangeAsync*
  name: DeleteRangeAsync
  href: api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudForCollectionRequestHandler_4_DeleteRangeAsync_
  commentId: Overload:Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.DeleteRangeAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.DeleteRangeAsync
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).DeleteRangeAsync
  nameWithType: CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.DeleteRangeAsync
  nameWithType.vb: CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).DeleteRangeAsync
- uid: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.GetAllAsync(Quickie.DataObj.RequestForDataObj,System.Nullable{System.Threading.CancellationToken})
  name: GetAllAsync(RequestForDataObj, CancellationToken?)
  href: api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudForCollectionRequestHandler_4_GetAllAsync_Quickie_DataObj_RequestForDataObj_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.GetAllAsync(Quickie.DataObj.RequestForDataObj,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.GetAllAsync(Quickie.DataObj.RequestForDataObj, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).GetAllAsync(Quickie.DataObj.RequestForDataObj, System.Threading.CancellationToken?)
  nameWithType: CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.GetAllAsync(RequestForDataObj, CancellationToken?)
  nameWithType.vb: CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).GetAllAsync(RequestForDataObj, CancellationToken?)
- uid: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.GetAllAsync*
  name: GetAllAsync
  href: api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudForCollectionRequestHandler_4_GetAllAsync_
  commentId: Overload:Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.GetAllAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.GetAllAsync
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).GetAllAsync
  nameWithType: CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.GetAllAsync
  nameWithType.vb: CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).GetAllAsync
- uid: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.MapToCollectionOfDto(System.Collections.Generic.ICollection{`1})
  name: MapToCollectionOfDto(ICollection<TEntity>)
  href: api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudForCollectionRequestHandler_4_MapToCollectionOfDto_System_Collections_Generic_ICollection__1__
  commentId: M:Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.MapToCollectionOfDto(System.Collections.Generic.ICollection{`1})
  name.vb: MapToCollectionOfDto(ICollection(Of TEntity))
  fullName: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToCollectionOfDto(System.Collections.Generic.ICollection<TEntity>)
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToCollectionOfDto(System.Collections.Generic.ICollection(Of TEntity))
  nameWithType: CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToCollectionOfDto(ICollection<TEntity>)
  nameWithType.vb: CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToCollectionOfDto(ICollection(Of TEntity))
- uid: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.MapToCollectionOfDto*
  name: MapToCollectionOfDto
  href: api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudForCollectionRequestHandler_4_MapToCollectionOfDto_
  commentId: Overload:Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.MapToCollectionOfDto
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToCollectionOfDto
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToCollectionOfDto
  nameWithType: CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToCollectionOfDto
  nameWithType.vb: CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToCollectionOfDto
- uid: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.MapToCollectionOfEntity(System.Collections.Generic.ICollection{`0})
  name: MapToCollectionOfEntity(ICollection<TViewModel>)
  href: api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudForCollectionRequestHandler_4_MapToCollectionOfEntity_System_Collections_Generic_ICollection__0__
  commentId: M:Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.MapToCollectionOfEntity(System.Collections.Generic.ICollection{`0})
  name.vb: MapToCollectionOfEntity(ICollection(Of TViewModel))
  fullName: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToCollectionOfEntity(System.Collections.Generic.ICollection<TViewModel>)
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToCollectionOfEntity(System.Collections.Generic.ICollection(Of TViewModel))
  nameWithType: CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToCollectionOfEntity(ICollection<TViewModel>)
  nameWithType.vb: CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToCollectionOfEntity(ICollection(Of TViewModel))
- uid: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.MapToCollectionOfEntity*
  name: MapToCollectionOfEntity
  href: api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudForCollectionRequestHandler_4_MapToCollectionOfEntity_
  commentId: Overload:Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.MapToCollectionOfEntity
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToCollectionOfEntity
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToCollectionOfEntity
  nameWithType: CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToCollectionOfEntity
  nameWithType.vb: CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToCollectionOfEntity
- uid: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.UpdateRangeAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name: UpdateRangeAsync(ICollection<TViewModel>, CancellationToken?)
  href: api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudForCollectionRequestHandler_4_UpdateRangeAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.UpdateRangeAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name.vb: UpdateRangeAsync(ICollection(Of TViewModel), CancellationToken?)
  fullName: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.UpdateRangeAsync(System.Collections.Generic.ICollection<TViewModel>, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).UpdateRangeAsync(System.Collections.Generic.ICollection(Of TViewModel), System.Threading.CancellationToken?)
  nameWithType: CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.UpdateRangeAsync(ICollection<TViewModel>, CancellationToken?)
  nameWithType.vb: CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).UpdateRangeAsync(ICollection(Of TViewModel), CancellationToken?)
- uid: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.UpdateRangeAsync*
  name: UpdateRangeAsync
  href: api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudForCollectionRequestHandler_4_UpdateRangeAsync_
  commentId: Overload:Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler`4.UpdateRangeAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.UpdateRangeAsync
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).UpdateRangeAsync
  nameWithType: CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.UpdateRangeAsync
  nameWithType.vb: CrudForCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).UpdateRangeAsync
- uid: Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4
  name: CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>
  href: api/Quickie.Handlers.Crud.Implementation.CrudRequestHandler-4.html
  commentId: T:Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4
  name.vb: CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType)
  fullName: Quickie.Handlers.Crud.Implementation.CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType)
  nameWithType: CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>
  nameWithType.vb: CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType)
- uid: Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.#ctor(Quickie.DataHandlers.Crud.Definition.ICrudDataHandler{`1,`3})
  name: CrudRequestHandler(ICrudDataHandler<TEntity, TIdType>)
  href: api/Quickie.Handlers.Crud.Implementation.CrudRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudRequestHandler_4__ctor_Quickie_DataHandlers_Crud_Definition_ICrudDataHandler__1__3__
  commentId: M:Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.#ctor(Quickie.DataHandlers.Crud.Definition.ICrudDataHandler{`1,`3})
  name.vb: New(ICrudDataHandler(Of TEntity, TIdType))
  fullName: Quickie.Handlers.Crud.Implementation.CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.CrudRequestHandler(Quickie.DataHandlers.Crud.Definition.ICrudDataHandler<TEntity, TIdType>)
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New(Quickie.DataHandlers.Crud.Definition.ICrudDataHandler(Of TEntity, TIdType))
  nameWithType: CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.CrudRequestHandler(ICrudDataHandler<TEntity, TIdType>)
  nameWithType.vb: CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New(ICrudDataHandler(Of TEntity, TIdType))
- uid: Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.#ctor*
  name: CrudRequestHandler
  href: api/Quickie.Handlers.Crud.Implementation.CrudRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudRequestHandler_4__ctor_
  commentId: Overload:Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Handlers.Crud.Implementation.CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.CrudRequestHandler
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New
  nameWithType: CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.CrudRequestHandler
  nameWithType.vb: CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New
- uid: Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.CreateAsync(`0,System.Nullable{System.Threading.CancellationToken})
  name: CreateAsync(TViewModel, CancellationToken?)
  href: api/Quickie.Handlers.Crud.Implementation.CrudRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudRequestHandler_4_CreateAsync__0_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.CreateAsync(`0,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.Handlers.Crud.Implementation.CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.CreateAsync(TViewModel, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).CreateAsync(TViewModel, System.Threading.CancellationToken?)
  nameWithType: CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.CreateAsync(TViewModel, CancellationToken?)
  nameWithType.vb: CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).CreateAsync(TViewModel, CancellationToken?)
- uid: Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.CreateAsync*
  name: CreateAsync
  href: api/Quickie.Handlers.Crud.Implementation.CrudRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudRequestHandler_4_CreateAsync_
  commentId: Overload:Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.CreateAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Implementation.CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.CreateAsync
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).CreateAsync
  nameWithType: CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.CreateAsync
  nameWithType.vb: CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).CreateAsync
- uid: Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.DeleteAsync(`3,System.Nullable{System.Threading.CancellationToken})
  name: DeleteAsync(TIdType, CancellationToken?)
  href: api/Quickie.Handlers.Crud.Implementation.CrudRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudRequestHandler_4_DeleteAsync__3_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.DeleteAsync(`3,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.Handlers.Crud.Implementation.CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.DeleteAsync(TIdType, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).DeleteAsync(TIdType, System.Threading.CancellationToken?)
  nameWithType: CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.DeleteAsync(TIdType, CancellationToken?)
  nameWithType.vb: CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).DeleteAsync(TIdType, CancellationToken?)
- uid: Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.DeleteAsync*
  name: DeleteAsync
  href: api/Quickie.Handlers.Crud.Implementation.CrudRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudRequestHandler_4_DeleteAsync_
  commentId: Overload:Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.DeleteAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Implementation.CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.DeleteAsync
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).DeleteAsync
  nameWithType: CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.DeleteAsync
  nameWithType.vb: CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).DeleteAsync
- uid: Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.GetByIdAsync(`3,System.Nullable{System.Threading.CancellationToken})
  name: GetByIdAsync(TIdType, CancellationToken?)
  href: api/Quickie.Handlers.Crud.Implementation.CrudRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudRequestHandler_4_GetByIdAsync__3_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.GetByIdAsync(`3,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.Handlers.Crud.Implementation.CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  nameWithType: CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.GetByIdAsync(TIdType, CancellationToken?)
  nameWithType.vb: CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).GetByIdAsync(TIdType, CancellationToken?)
- uid: Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.GetByIdAsync*
  name: GetByIdAsync
  href: api/Quickie.Handlers.Crud.Implementation.CrudRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudRequestHandler_4_GetByIdAsync_
  commentId: Overload:Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.GetByIdAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Implementation.CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.GetByIdAsync
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).GetByIdAsync
  nameWithType: CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.GetByIdAsync
  nameWithType.vb: CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).GetByIdAsync
- uid: Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.MapToDto(`1)
  name: MapToDto(TEntity)
  href: api/Quickie.Handlers.Crud.Implementation.CrudRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudRequestHandler_4_MapToDto__1_
  commentId: M:Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.MapToDto(`1)
  fullName: Quickie.Handlers.Crud.Implementation.CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToDto(TEntity)
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToDto(TEntity)
  nameWithType: CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToDto(TEntity)
  nameWithType.vb: CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToDto(TEntity)
- uid: Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.MapToDto*
  name: MapToDto
  href: api/Quickie.Handlers.Crud.Implementation.CrudRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudRequestHandler_4_MapToDto_
  commentId: Overload:Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.MapToDto
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Implementation.CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToDto
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToDto
  nameWithType: CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToDto
  nameWithType.vb: CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToDto
- uid: Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.MapToEntity(`0)
  name: MapToEntity(TViewModel)
  href: api/Quickie.Handlers.Crud.Implementation.CrudRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudRequestHandler_4_MapToEntity__0_
  commentId: M:Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.MapToEntity(`0)
  fullName: Quickie.Handlers.Crud.Implementation.CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToEntity(TViewModel)
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToEntity(TViewModel)
  nameWithType: CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToEntity(TViewModel)
  nameWithType.vb: CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToEntity(TViewModel)
- uid: Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.MapToEntity*
  name: MapToEntity
  href: api/Quickie.Handlers.Crud.Implementation.CrudRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudRequestHandler_4_MapToEntity_
  commentId: Overload:Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.MapToEntity
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Implementation.CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToEntity
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToEntity
  nameWithType: CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToEntity
  nameWithType.vb: CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToEntity
- uid: Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.UpdateAsync(`3,`0,System.Nullable{System.Threading.CancellationToken})
  name: UpdateAsync(TIdType, TViewModel, CancellationToken?)
  href: api/Quickie.Handlers.Crud.Implementation.CrudRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudRequestHandler_4_UpdateAsync__3__0_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.UpdateAsync(`3,`0,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.Handlers.Crud.Implementation.CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.UpdateAsync(TIdType, TViewModel, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).UpdateAsync(TIdType, TViewModel, System.Threading.CancellationToken?)
  nameWithType: CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.UpdateAsync(TIdType, TViewModel, CancellationToken?)
  nameWithType.vb: CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).UpdateAsync(TIdType, TViewModel, CancellationToken?)
- uid: Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.UpdateAsync*
  name: UpdateAsync
  href: api/Quickie.Handlers.Crud.Implementation.CrudRequestHandler-4.html#Quickie_Handlers_Crud_Implementation_CrudRequestHandler_4_UpdateAsync_
  commentId: Overload:Quickie.Handlers.Crud.Implementation.CrudRequestHandler`4.UpdateAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Crud.Implementation.CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.UpdateAsync
  fullName.vb: Quickie.Handlers.Crud.Implementation.CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).UpdateAsync
  nameWithType: CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.UpdateAsync
  nameWithType.vb: CrudRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).UpdateAsync
- uid: Quickie.Handlers.Editonly.Definition
  name: Quickie.Handlers.Editonly.Definition
  href: api/Quickie.Handlers.Editonly.Definition.html
  commentId: N:Quickie.Handlers.Editonly.Definition
  fullName: Quickie.Handlers.Editonly.Definition
  nameWithType: Quickie.Handlers.Editonly.Definition
- uid: Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler`2
  name: IEditOnlyRequestHandler<TViewModel, TIdType>
  href: api/Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler-2.html
  commentId: T:Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler`2
  name.vb: IEditOnlyRequestHandler(Of TViewModel, TIdType)
  fullName: Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler<TViewModel, TIdType>
  fullName.vb: Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler(Of TViewModel, TIdType)
  nameWithType: IEditOnlyRequestHandler<TViewModel, TIdType>
  nameWithType.vb: IEditOnlyRequestHandler(Of TViewModel, TIdType)
- uid: Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler`2.EditAsync(`1,`0,System.Nullable{System.Threading.CancellationToken})
  name: EditAsync(TIdType, TViewModel, CancellationToken?)
  href: api/Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler-2.html#Quickie_Handlers_Editonly_Definition_IEditOnlyRequestHandler_2_EditAsync__1__0_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler`2.EditAsync(`1,`0,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler<TViewModel, TIdType>.EditAsync(TIdType, TViewModel, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler(Of TViewModel, TIdType).EditAsync(TIdType, TViewModel, System.Threading.CancellationToken?)
  nameWithType: IEditOnlyRequestHandler<TViewModel, TIdType>.EditAsync(TIdType, TViewModel, CancellationToken?)
  nameWithType.vb: IEditOnlyRequestHandler(Of TViewModel, TIdType).EditAsync(TIdType, TViewModel, CancellationToken?)
- uid: Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler`2.EditAsync*
  name: EditAsync
  href: api/Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler-2.html#Quickie_Handlers_Editonly_Definition_IEditOnlyRequestHandler_2_EditAsync_
  commentId: Overload:Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler`2.EditAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler<TViewModel, TIdType>.EditAsync
  fullName.vb: Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler(Of TViewModel, TIdType).EditAsync
  nameWithType: IEditOnlyRequestHandler<TViewModel, TIdType>.EditAsync
  nameWithType.vb: IEditOnlyRequestHandler(Of TViewModel, TIdType).EditAsync
- uid: Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler`2.EditCollectionAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name: EditCollectionAsync(ICollection<TViewModel>, CancellationToken?)
  href: api/Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler-2.html#Quickie_Handlers_Editonly_Definition_IEditOnlyRequestHandler_2_EditCollectionAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler`2.EditCollectionAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name.vb: EditCollectionAsync(ICollection(Of TViewModel), CancellationToken?)
  fullName: Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler<TViewModel, TIdType>.EditCollectionAsync(System.Collections.Generic.ICollection<TViewModel>, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler(Of TViewModel, TIdType).EditCollectionAsync(System.Collections.Generic.ICollection(Of TViewModel), System.Threading.CancellationToken?)
  nameWithType: IEditOnlyRequestHandler<TViewModel, TIdType>.EditCollectionAsync(ICollection<TViewModel>, CancellationToken?)
  nameWithType.vb: IEditOnlyRequestHandler(Of TViewModel, TIdType).EditCollectionAsync(ICollection(Of TViewModel), CancellationToken?)
- uid: Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler`2.EditCollectionAsync*
  name: EditCollectionAsync
  href: api/Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler-2.html#Quickie_Handlers_Editonly_Definition_IEditOnlyRequestHandler_2_EditCollectionAsync_
  commentId: Overload:Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler`2.EditCollectionAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler<TViewModel, TIdType>.EditCollectionAsync
  fullName.vb: Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler(Of TViewModel, TIdType).EditCollectionAsync
  nameWithType: IEditOnlyRequestHandler<TViewModel, TIdType>.EditCollectionAsync
  nameWithType.vb: IEditOnlyRequestHandler(Of TViewModel, TIdType).EditCollectionAsync
- uid: Quickie.Handlers.Editonly.Implementation
  name: Quickie.Handlers.Editonly.Implementation
  href: api/Quickie.Handlers.Editonly.Implementation.html
  commentId: N:Quickie.Handlers.Editonly.Implementation
  fullName: Quickie.Handlers.Editonly.Implementation
  nameWithType: Quickie.Handlers.Editonly.Implementation
- uid: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4
  name: EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>
  href: api/Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler-4.html
  commentId: T:Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4
  name.vb: EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType)
  fullName: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>
  fullName.vb: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType)
  nameWithType: EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>
  nameWithType.vb: EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType)
- uid: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.#ctor(Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler{`1,`3})
  name: EditOnlyRequestHandler(IEditOnlyDataHandler<TEntity, TIdType>)
  href: api/Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler-4.html#Quickie_Handlers_Editonly_Implementation_EditOnlyRequestHandler_4__ctor_Quickie_DataHandlers_Editonly_Definition_IEditOnlyDataHandler__1__3__
  commentId: M:Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.#ctor(Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler{`1,`3})
  name.vb: New(IEditOnlyDataHandler(Of TEntity, TIdType))
  fullName: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.EditOnlyRequestHandler(Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler<TEntity, TIdType>)
  fullName.vb: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New(Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler(Of TEntity, TIdType))
  nameWithType: EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.EditOnlyRequestHandler(IEditOnlyDataHandler<TEntity, TIdType>)
  nameWithType.vb: EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New(IEditOnlyDataHandler(Of TEntity, TIdType))
- uid: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.#ctor*
  name: EditOnlyRequestHandler
  href: api/Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler-4.html#Quickie_Handlers_Editonly_Implementation_EditOnlyRequestHandler_4__ctor_
  commentId: Overload:Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.EditOnlyRequestHandler
  fullName.vb: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New
  nameWithType: EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.EditOnlyRequestHandler
  nameWithType.vb: EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New
- uid: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.EditAsync(`3,`0,System.Nullable{System.Threading.CancellationToken})
  name: EditAsync(TIdType, TViewModel, CancellationToken?)
  href: api/Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler-4.html#Quickie_Handlers_Editonly_Implementation_EditOnlyRequestHandler_4_EditAsync__3__0_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.EditAsync(`3,`0,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.EditAsync(TIdType, TViewModel, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).EditAsync(TIdType, TViewModel, System.Threading.CancellationToken?)
  nameWithType: EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.EditAsync(TIdType, TViewModel, CancellationToken?)
  nameWithType.vb: EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).EditAsync(TIdType, TViewModel, CancellationToken?)
- uid: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.EditAsync*
  name: EditAsync
  href: api/Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler-4.html#Quickie_Handlers_Editonly_Implementation_EditOnlyRequestHandler_4_EditAsync_
  commentId: Overload:Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.EditAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.EditAsync
  fullName.vb: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).EditAsync
  nameWithType: EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.EditAsync
  nameWithType.vb: EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).EditAsync
- uid: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.EditCollectionAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name: EditCollectionAsync(ICollection<TViewModel>, CancellationToken?)
  href: api/Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler-4.html#Quickie_Handlers_Editonly_Implementation_EditOnlyRequestHandler_4_EditCollectionAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.EditCollectionAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name.vb: EditCollectionAsync(ICollection(Of TViewModel), CancellationToken?)
  fullName: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.EditCollectionAsync(System.Collections.Generic.ICollection<TViewModel>, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).EditCollectionAsync(System.Collections.Generic.ICollection(Of TViewModel), System.Threading.CancellationToken?)
  nameWithType: EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.EditCollectionAsync(ICollection<TViewModel>, CancellationToken?)
  nameWithType.vb: EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).EditCollectionAsync(ICollection(Of TViewModel), CancellationToken?)
- uid: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.EditCollectionAsync*
  name: EditCollectionAsync
  href: api/Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler-4.html#Quickie_Handlers_Editonly_Implementation_EditOnlyRequestHandler_4_EditCollectionAsync_
  commentId: Overload:Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.EditCollectionAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.EditCollectionAsync
  fullName.vb: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).EditCollectionAsync
  nameWithType: EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.EditCollectionAsync
  nameWithType.vb: EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).EditCollectionAsync
- uid: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.MapToCollectionOfDto(System.Collections.Generic.ICollection{`1})
  name: MapToCollectionOfDto(ICollection<TEntity>)
  href: api/Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler-4.html#Quickie_Handlers_Editonly_Implementation_EditOnlyRequestHandler_4_MapToCollectionOfDto_System_Collections_Generic_ICollection__1__
  commentId: M:Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.MapToCollectionOfDto(System.Collections.Generic.ICollection{`1})
  name.vb: MapToCollectionOfDto(ICollection(Of TEntity))
  fullName: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToCollectionOfDto(System.Collections.Generic.ICollection<TEntity>)
  fullName.vb: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToCollectionOfDto(System.Collections.Generic.ICollection(Of TEntity))
  nameWithType: EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToCollectionOfDto(ICollection<TEntity>)
  nameWithType.vb: EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToCollectionOfDto(ICollection(Of TEntity))
- uid: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.MapToCollectionOfDto*
  name: MapToCollectionOfDto
  href: api/Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler-4.html#Quickie_Handlers_Editonly_Implementation_EditOnlyRequestHandler_4_MapToCollectionOfDto_
  commentId: Overload:Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.MapToCollectionOfDto
  isSpec: "True"
  fullName: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToCollectionOfDto
  fullName.vb: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToCollectionOfDto
  nameWithType: EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToCollectionOfDto
  nameWithType.vb: EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToCollectionOfDto
- uid: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.MapToCollectionOfEntity(System.Collections.Generic.ICollection{`0})
  name: MapToCollectionOfEntity(ICollection<TViewModel>)
  href: api/Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler-4.html#Quickie_Handlers_Editonly_Implementation_EditOnlyRequestHandler_4_MapToCollectionOfEntity_System_Collections_Generic_ICollection__0__
  commentId: M:Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.MapToCollectionOfEntity(System.Collections.Generic.ICollection{`0})
  name.vb: MapToCollectionOfEntity(ICollection(Of TViewModel))
  fullName: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToCollectionOfEntity(System.Collections.Generic.ICollection<TViewModel>)
  fullName.vb: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToCollectionOfEntity(System.Collections.Generic.ICollection(Of TViewModel))
  nameWithType: EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToCollectionOfEntity(ICollection<TViewModel>)
  nameWithType.vb: EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToCollectionOfEntity(ICollection(Of TViewModel))
- uid: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.MapToCollectionOfEntity*
  name: MapToCollectionOfEntity
  href: api/Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler-4.html#Quickie_Handlers_Editonly_Implementation_EditOnlyRequestHandler_4_MapToCollectionOfEntity_
  commentId: Overload:Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.MapToCollectionOfEntity
  isSpec: "True"
  fullName: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToCollectionOfEntity
  fullName.vb: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToCollectionOfEntity
  nameWithType: EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToCollectionOfEntity
  nameWithType.vb: EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToCollectionOfEntity
- uid: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.MapToDto(`1)
  name: MapToDto(TEntity)
  href: api/Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler-4.html#Quickie_Handlers_Editonly_Implementation_EditOnlyRequestHandler_4_MapToDto__1_
  commentId: M:Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.MapToDto(`1)
  fullName: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToDto(TEntity)
  fullName.vb: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToDto(TEntity)
  nameWithType: EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToDto(TEntity)
  nameWithType.vb: EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToDto(TEntity)
- uid: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.MapToDto*
  name: MapToDto
  href: api/Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler-4.html#Quickie_Handlers_Editonly_Implementation_EditOnlyRequestHandler_4_MapToDto_
  commentId: Overload:Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.MapToDto
  isSpec: "True"
  fullName: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToDto
  fullName.vb: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToDto
  nameWithType: EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToDto
  nameWithType.vb: EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToDto
- uid: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.MapToEntity(`0)
  name: MapToEntity(TViewModel)
  href: api/Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler-4.html#Quickie_Handlers_Editonly_Implementation_EditOnlyRequestHandler_4_MapToEntity__0_
  commentId: M:Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.MapToEntity(`0)
  fullName: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToEntity(TViewModel)
  fullName.vb: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToEntity(TViewModel)
  nameWithType: EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToEntity(TViewModel)
  nameWithType.vb: EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToEntity(TViewModel)
- uid: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.MapToEntity*
  name: MapToEntity
  href: api/Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler-4.html#Quickie_Handlers_Editonly_Implementation_EditOnlyRequestHandler_4_MapToEntity_
  commentId: Overload:Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler`4.MapToEntity
  isSpec: "True"
  fullName: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToEntity
  fullName.vb: Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToEntity
  nameWithType: EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToEntity
  nameWithType.vb: EditOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToEntity
- uid: Quickie.Handlers.Readonly.Definition
  name: Quickie.Handlers.Readonly.Definition
  href: api/Quickie.Handlers.Readonly.Definition.html
  commentId: N:Quickie.Handlers.Readonly.Definition
  fullName: Quickie.Handlers.Readonly.Definition
  nameWithType: Quickie.Handlers.Readonly.Definition
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1
  name: IReadOnlyCollectionRequestHandler<TViewModel>
  href: api/Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html
  commentId: T:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1
  name.vb: IReadOnlyCollectionRequestHandler(Of TViewModel)
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel)
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel)
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetAsync*
  name: GetAsync
  href: api/Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetAsync_
  commentId: Overload:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>.GetAsync
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel).GetAsync
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>.GetAsync
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel).GetAsync
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetAsync``1(``0,System.Threading.CancellationToken)
  name: GetAsync<TRequestModel>(TRequestModel?, CancellationToken)
  href: api/Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetAsync__1___0_System_Threading_CancellationToken_
  commentId: M:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetAsync``1(``0,System.Threading.CancellationToken)
  name.vb: GetAsync(Of TRequestModel)(TRequestModel, CancellationToken)
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>.GetAsync<TRequestModel>(TRequestModel?, System.Threading.CancellationToken)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel).GetAsync(Of TRequestModel)(TRequestModel, System.Threading.CancellationToken)
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>.GetAsync<TRequestModel>(TRequestModel?, CancellationToken)
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel).GetAsync(Of TRequestModel)(TRequestModel, CancellationToken)
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetCollectionByIdAsync*
  name: GetCollectionByIdAsync
  href: api/Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetCollectionByIdAsync_
  commentId: Overload:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetCollectionByIdAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>.GetCollectionByIdAsync
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel).GetCollectionByIdAsync
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>.GetCollectionByIdAsync
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel).GetCollectionByIdAsync
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetCollectionByIdAsync``1(System.Int64,``0,System.Threading.CancellationToken)
  name: GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, CancellationToken)
  href: api/Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetCollectionByIdAsync__1_System_Int64___0_System_Threading_CancellationToken_
  commentId: M:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetCollectionByIdAsync``1(System.Int64,``0,System.Threading.CancellationToken)
  name.vb: GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, CancellationToken)
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>.GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, System.Threading.CancellationToken)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel).GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, System.Threading.CancellationToken)
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>.GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, CancellationToken)
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel).GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, CancellationToken)
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetPaginatedDataAsync*
  name: GetPaginatedDataAsync
  href: api/Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetPaginatedDataAsync_
  commentId: Overload:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetPaginatedDataAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>.GetPaginatedDataAsync
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel).GetPaginatedDataAsync
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>.GetPaginatedDataAsync
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel).GetPaginatedDataAsync
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetPaginatedDataAsync``1(``0,System.Threading.CancellationToken)
  name: GetPaginatedDataAsync<TRequestModel>(TRequestModel?, CancellationToken)
  href: api/Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetPaginatedDataAsync__1___0_System_Threading_CancellationToken_
  commentId: M:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetPaginatedDataAsync``1(``0,System.Threading.CancellationToken)
  name.vb: GetPaginatedDataAsync(Of TRequestModel)(TRequestModel, CancellationToken)
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>.GetPaginatedDataAsync<TRequestModel>(TRequestModel?, System.Threading.CancellationToken)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel).GetPaginatedDataAsync(Of TRequestModel)(TRequestModel, System.Threading.CancellationToken)
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>.GetPaginatedDataAsync<TRequestModel>(TRequestModel?, CancellationToken)
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel).GetPaginatedDataAsync(Of TRequestModel)(TRequestModel, CancellationToken)
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`2
  name: IReadOnlyCollectionRequestHandler<TViewModel, TIdType>
  href: api/Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-2.html
  commentId: T:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`2
  name.vb: IReadOnlyCollectionRequestHandler(Of TViewModel, TIdType)
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel, TIdType>
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel, TIdType)
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel, TIdType>
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel, TIdType)
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`2.GetAsync*
  name: GetAsync
  href: api/Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-2.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_2_GetAsync_
  commentId: Overload:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`2.GetAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel, TIdType>.GetAsync
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel, TIdType).GetAsync
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel, TIdType>.GetAsync
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel, TIdType).GetAsync
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`2.GetAsync``1(``0,System.Nullable{System.Threading.CancellationToken})
  name: GetAsync<TRequestModel>(TRequestModel?, CancellationToken?)
  href: api/Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-2.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_2_GetAsync__1___0_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`2.GetAsync``1(``0,System.Nullable{System.Threading.CancellationToken})
  name.vb: GetAsync(Of TRequestModel)(TRequestModel, CancellationToken?)
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel, TIdType>.GetAsync<TRequestModel>(TRequestModel?, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel, TIdType).GetAsync(Of TRequestModel)(TRequestModel, System.Threading.CancellationToken?)
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel, TIdType>.GetAsync<TRequestModel>(TRequestModel?, CancellationToken?)
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel, TIdType).GetAsync(Of TRequestModel)(TRequestModel, CancellationToken?)
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`1
  name: IReadOnlyRequestHandler<TViewModel>
  href: api/Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-1.html
  commentId: T:Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`1
  name.vb: IReadOnlyRequestHandler(Of TViewModel)
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler<TViewModel>
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler(Of TViewModel)
  nameWithType: IReadOnlyRequestHandler<TViewModel>
  nameWithType.vb: IReadOnlyRequestHandler(Of TViewModel)
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`1.GetByIdAsync(System.Int64,System.Threading.CancellationToken)
  name: GetByIdAsync(long, CancellationToken)
  href: api/Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyRequestHandler_1_GetByIdAsync_System_Int64_System_Threading_CancellationToken_
  commentId: M:Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`1.GetByIdAsync(System.Int64,System.Threading.CancellationToken)
  name.vb: GetByIdAsync(Long, CancellationToken)
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler<TViewModel>.GetByIdAsync(long, System.Threading.CancellationToken)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler(Of TViewModel).GetByIdAsync(Long, System.Threading.CancellationToken)
  nameWithType: IReadOnlyRequestHandler<TViewModel>.GetByIdAsync(long, CancellationToken)
  nameWithType.vb: IReadOnlyRequestHandler(Of TViewModel).GetByIdAsync(Long, CancellationToken)
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`1.GetByIdAsync*
  name: GetByIdAsync
  href: api/Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyRequestHandler_1_GetByIdAsync_
  commentId: Overload:Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`1.GetByIdAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler<TViewModel>.GetByIdAsync
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler(Of TViewModel).GetByIdAsync
  nameWithType: IReadOnlyRequestHandler<TViewModel>.GetByIdAsync
  nameWithType.vb: IReadOnlyRequestHandler(Of TViewModel).GetByIdAsync
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`2
  name: IReadOnlyRequestHandler<TViewModel, TIdType>
  href: api/Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-2.html
  commentId: T:Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`2
  name.vb: IReadOnlyRequestHandler(Of TViewModel, TIdType)
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler<TViewModel, TIdType>
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler(Of TViewModel, TIdType)
  nameWithType: IReadOnlyRequestHandler<TViewModel, TIdType>
  nameWithType.vb: IReadOnlyRequestHandler(Of TViewModel, TIdType)
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`2.GetByIdAsync(`1,System.Nullable{System.Threading.CancellationToken})
  name: GetByIdAsync(TIdType, CancellationToken?)
  href: api/Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-2.html#Quickie_Handlers_Readonly_Definition_IReadOnlyRequestHandler_2_GetByIdAsync__1_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`2.GetByIdAsync(`1,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler<TViewModel, TIdType>.GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler(Of TViewModel, TIdType).GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  nameWithType: IReadOnlyRequestHandler<TViewModel, TIdType>.GetByIdAsync(TIdType, CancellationToken?)
  nameWithType.vb: IReadOnlyRequestHandler(Of TViewModel, TIdType).GetByIdAsync(TIdType, CancellationToken?)
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`2.GetByIdAsync*
  name: GetByIdAsync
  href: api/Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-2.html#Quickie_Handlers_Readonly_Definition_IReadOnlyRequestHandler_2_GetByIdAsync_
  commentId: Overload:Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`2.GetByIdAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler<TViewModel, TIdType>.GetByIdAsync
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler(Of TViewModel, TIdType).GetByIdAsync
  nameWithType: IReadOnlyRequestHandler<TViewModel, TIdType>.GetByIdAsync
  nameWithType.vb: IReadOnlyRequestHandler(Of TViewModel, TIdType).GetByIdAsync
- uid: Quickie.Handlers.Readonly.Implementation
  name: Quickie.Handlers.Readonly.Implementation
  href: api/Quickie.Handlers.Readonly.Implementation.html
  commentId: N:Quickie.Handlers.Readonly.Implementation
  fullName: Quickie.Handlers.Readonly.Implementation
  nameWithType: Quickie.Handlers.Readonly.Implementation
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3
  name: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-3.html
  commentId: T:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3
  name.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler)
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler)
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler)
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.#ctor(Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler{`1})
  name: ReadOnlyCollectionRequestHandler(IReadOnlyCollectionDataHandler<TEntity>)
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_3__ctor_Quickie_DataHandlers_Readonly_Definition_IReadOnlyCollectionDataHandler__1__
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.#ctor(Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler{`1})
  name.vb: New(IReadOnlyCollectionDataHandler(Of TEntity))
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.ReadOnlyCollectionRequestHandler(Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler<TEntity>)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).New(Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler(Of TEntity))
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.ReadOnlyCollectionRequestHandler(IReadOnlyCollectionDataHandler<TEntity>)
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).New(IReadOnlyCollectionDataHandler(Of TEntity))
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.#ctor*
  name: ReadOnlyCollectionRequestHandler
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_3__ctor_
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.ReadOnlyCollectionRequestHandler
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).New
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.ReadOnlyCollectionRequestHandler
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).New
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetAsync*
  name: GetAsync
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_3_GetAsync_
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetAsync
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetAsync
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetAsync
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetAsync
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetAsync``1(``0,System.Threading.CancellationToken)
  name: GetAsync<TRequestModel>(TRequestModel?, CancellationToken)
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_3_GetAsync__1___0_System_Threading_CancellationToken_
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetAsync``1(``0,System.Threading.CancellationToken)
  name.vb: GetAsync(Of TRequestModel)(TRequestModel, CancellationToken)
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetAsync<TRequestModel>(TRequestModel?, System.Threading.CancellationToken)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetAsync(Of TRequestModel)(TRequestModel, System.Threading.CancellationToken)
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetAsync<TRequestModel>(TRequestModel?, CancellationToken)
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetAsync(Of TRequestModel)(TRequestModel, CancellationToken)
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetCollectionByIdAsync*
  name: GetCollectionByIdAsync
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_3_GetCollectionByIdAsync_
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetCollectionByIdAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetCollectionByIdAsync
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetCollectionByIdAsync
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetCollectionByIdAsync
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetCollectionByIdAsync
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetCollectionByIdAsync``1(System.Int64,``0,System.Threading.CancellationToken)
  name: GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, CancellationToken)
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_3_GetCollectionByIdAsync__1_System_Int64___0_System_Threading_CancellationToken_
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetCollectionByIdAsync``1(System.Int64,``0,System.Threading.CancellationToken)
  name.vb: GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, CancellationToken)
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, System.Threading.CancellationToken)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, System.Threading.CancellationToken)
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, CancellationToken)
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, CancellationToken)
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetPaginatedDataAsync*
  name: GetPaginatedDataAsync
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_3_GetPaginatedDataAsync_
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetPaginatedDataAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetPaginatedDataAsync
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetPaginatedDataAsync
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetPaginatedDataAsync
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetPaginatedDataAsync
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetPaginatedDataAsync``1(``0,System.Threading.CancellationToken)
  name: GetPaginatedDataAsync<TRequestModel>(TRequestModel?, CancellationToken)
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_3_GetPaginatedDataAsync__1___0_System_Threading_CancellationToken_
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetPaginatedDataAsync``1(``0,System.Threading.CancellationToken)
  name.vb: GetPaginatedDataAsync(Of TRequestModel)(TRequestModel, CancellationToken)
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetPaginatedDataAsync<TRequestModel>(TRequestModel?, System.Threading.CancellationToken)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetPaginatedDataAsync(Of TRequestModel)(TRequestModel, System.Threading.CancellationToken)
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetPaginatedDataAsync<TRequestModel>(TRequestModel?, CancellationToken)
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetPaginatedDataAsync(Of TRequestModel)(TRequestModel, CancellationToken)
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.MapToDto(System.Collections.Generic.ICollection{`1})
  name: MapToDto(ICollection<TEntity>)
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_3_MapToDto_System_Collections_Generic_ICollection__1__
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.MapToDto(System.Collections.Generic.ICollection{`1})
  name.vb: MapToDto(ICollection(Of TEntity))
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.MapToDto(System.Collections.Generic.ICollection<TEntity>)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToDto(System.Collections.Generic.ICollection(Of TEntity))
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.MapToDto(ICollection<TEntity>)
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToDto(ICollection(Of TEntity))
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.MapToDto*
  name: MapToDto
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_3_MapToDto_
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.MapToDto
  isSpec: "True"
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.MapToDto
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToDto
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.MapToDto
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToDto
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`4
  name: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-4.html
  commentId: T:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`4
  name.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType)
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType)
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType)
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`4.#ctor(Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler{`1,`3})
  name: ReadOnlyCollectionRequestHandler(IReadOnlyCollectionDataHandler<TEntity, TIdType>)
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-4.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_4__ctor_Quickie_DataHandlers_Readonly_Definition_IReadOnlyCollectionDataHandler__1__3__
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`4.#ctor(Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler{`1,`3})
  name.vb: New(IReadOnlyCollectionDataHandler(Of TEntity, TIdType))
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.ReadOnlyCollectionRequestHandler(Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler<TEntity, TIdType>)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New(Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler(Of TEntity, TIdType))
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.ReadOnlyCollectionRequestHandler(IReadOnlyCollectionDataHandler<TEntity, TIdType>)
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New(IReadOnlyCollectionDataHandler(Of TEntity, TIdType))
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`4.#ctor*
  name: ReadOnlyCollectionRequestHandler
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-4.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_4__ctor_
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`4.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.ReadOnlyCollectionRequestHandler
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.ReadOnlyCollectionRequestHandler
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`4.GetAsync*
  name: GetAsync
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-4.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_4_GetAsync_
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`4.GetAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.GetAsync
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).GetAsync
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.GetAsync
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).GetAsync
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`4.GetAsync``1(``0,System.Nullable{System.Threading.CancellationToken})
  name: GetAsync<TRequestModel>(TRequestModel?, CancellationToken?)
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-4.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_4_GetAsync__1___0_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`4.GetAsync``1(``0,System.Nullable{System.Threading.CancellationToken})
  name.vb: GetAsync(Of TRequestModel)(TRequestModel, CancellationToken?)
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.GetAsync<TRequestModel>(TRequestModel?, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).GetAsync(Of TRequestModel)(TRequestModel, System.Threading.CancellationToken?)
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.GetAsync<TRequestModel>(TRequestModel?, CancellationToken?)
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).GetAsync(Of TRequestModel)(TRequestModel, CancellationToken?)
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`4.MapToDto(System.Collections.Generic.ICollection{`1})
  name: MapToDto(ICollection<TEntity>)
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-4.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_4_MapToDto_System_Collections_Generic_ICollection__1__
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`4.MapToDto(System.Collections.Generic.ICollection{`1})
  name.vb: MapToDto(ICollection(Of TEntity))
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToDto(System.Collections.Generic.ICollection<TEntity>)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToDto(System.Collections.Generic.ICollection(Of TEntity))
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToDto(ICollection<TEntity>)
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToDto(ICollection(Of TEntity))
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`4.MapToDto*
  name: MapToDto
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-4.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_4_MapToDto_
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`4.MapToDto
  isSpec: "True"
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToDto
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToDto
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToDto
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToDto
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`3
  name: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler>
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-3.html
  commentId: T:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`3
  name.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler)
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler>
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler)
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler>
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler)
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`3.#ctor(Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler{`1})
  name: ReadOnlyRequestHandler(IReadOnlyDataHandler<TEntity>)
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyRequestHandler_3__ctor_Quickie_DataHandlers_Readonly_Definition_IReadOnlyDataHandler__1__
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`3.#ctor(Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler{`1})
  name.vb: New(IReadOnlyDataHandler(Of TEntity))
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.ReadOnlyRequestHandler(Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler<TEntity>)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).New(Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler(Of TEntity))
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.ReadOnlyRequestHandler(IReadOnlyDataHandler<TEntity>)
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).New(IReadOnlyDataHandler(Of TEntity))
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`3.#ctor*
  name: ReadOnlyRequestHandler
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyRequestHandler_3__ctor_
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`3.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.ReadOnlyRequestHandler
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).New
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.ReadOnlyRequestHandler
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).New
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`3.GetByIdAsync(System.Int64,System.Threading.CancellationToken)
  name: GetByIdAsync(long, CancellationToken)
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyRequestHandler_3_GetByIdAsync_System_Int64_System_Threading_CancellationToken_
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`3.GetByIdAsync(System.Int64,System.Threading.CancellationToken)
  name.vb: GetByIdAsync(Long, CancellationToken)
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.GetByIdAsync(long, System.Threading.CancellationToken)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).GetByIdAsync(Long, System.Threading.CancellationToken)
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.GetByIdAsync(long, CancellationToken)
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).GetByIdAsync(Long, CancellationToken)
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`3.GetByIdAsync*
  name: GetByIdAsync
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyRequestHandler_3_GetByIdAsync_
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`3.GetByIdAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.GetByIdAsync
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).GetByIdAsync
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.GetByIdAsync
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).GetByIdAsync
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`3.MapToDto(`1)
  name: MapToDto(TEntity)
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyRequestHandler_3_MapToDto__1_
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`3.MapToDto(`1)
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.MapToDto(TEntity)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToDto(TEntity)
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.MapToDto(TEntity)
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToDto(TEntity)
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`3.MapToDto*
  name: MapToDto
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyRequestHandler_3_MapToDto_
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`3.MapToDto
  isSpec: "True"
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.MapToDto
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToDto
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.MapToDto
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToDto
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4
  name: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-4.html
  commentId: T:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4
  name.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType)
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType)
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType)
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.#ctor(Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler{`1,`3})
  name: ReadOnlyRequestHandler(IReadOnlyDataHandler<TEntity, TIdType>)
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-4.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyRequestHandler_4__ctor_Quickie_DataHandlers_Readonly_Definition_IReadOnlyDataHandler__1__3__
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.#ctor(Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler{`1,`3})
  name.vb: New(IReadOnlyDataHandler(Of TEntity, TIdType))
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.ReadOnlyRequestHandler(Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler<TEntity, TIdType>)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New(Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler(Of TEntity, TIdType))
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.ReadOnlyRequestHandler(IReadOnlyDataHandler<TEntity, TIdType>)
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New(IReadOnlyDataHandler(Of TEntity, TIdType))
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.#ctor*
  name: ReadOnlyRequestHandler
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-4.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyRequestHandler_4__ctor_
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.ReadOnlyRequestHandler
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.ReadOnlyRequestHandler
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.GetByIdAsync(`3,System.Nullable{System.Threading.CancellationToken})
  name: GetByIdAsync(TIdType, CancellationToken?)
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-4.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyRequestHandler_4_GetByIdAsync__3_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.GetByIdAsync(`3,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.GetByIdAsync(TIdType, CancellationToken?)
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).GetByIdAsync(TIdType, CancellationToken?)
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.GetByIdAsync*
  name: GetByIdAsync
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-4.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyRequestHandler_4_GetByIdAsync_
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.GetByIdAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.GetByIdAsync
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).GetByIdAsync
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.GetByIdAsync
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).GetByIdAsync
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.MapToDto(`1)
  name: MapToDto(TEntity)
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-4.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyRequestHandler_4_MapToDto__1_
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.MapToDto(`1)
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToDto(TEntity)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToDto(TEntity)
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToDto(TEntity)
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToDto(TEntity)
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.MapToDto*
  name: MapToDto
  href: api/Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-4.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyRequestHandler_4_MapToDto_
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.MapToDto
  isSpec: "True"
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToDto
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToDto
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToDto
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToDto
- uid: Quickie.Handlers.Writeonly.Definition
  name: Quickie.Handlers.Writeonly.Definition
  href: api/Quickie.Handlers.Writeonly.Definition.html
  commentId: N:Quickie.Handlers.Writeonly.Definition
  fullName: Quickie.Handlers.Writeonly.Definition
  nameWithType: Quickie.Handlers.Writeonly.Definition
- uid: Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler`1
  name: IWriteOnlyRequestHandler<TViewModel>
  href: api/Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler-1.html
  commentId: T:Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler`1
  name.vb: IWriteOnlyRequestHandler(Of TViewModel)
  fullName: Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler<TViewModel>
  fullName.vb: Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler(Of TViewModel)
  nameWithType: IWriteOnlyRequestHandler<TViewModel>
  nameWithType.vb: IWriteOnlyRequestHandler(Of TViewModel)
- uid: Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler`1.CreateItemAsync(`0,System.Nullable{System.Threading.CancellationToken})
  name: CreateItemAsync(TViewModel, CancellationToken?)
  href: api/Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler-1.html#Quickie_Handlers_Writeonly_Definition_IWriteOnlyRequestHandler_1_CreateItemAsync__0_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler`1.CreateItemAsync(`0,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler<TViewModel>.CreateItemAsync(TViewModel, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler(Of TViewModel).CreateItemAsync(TViewModel, System.Threading.CancellationToken?)
  nameWithType: IWriteOnlyRequestHandler<TViewModel>.CreateItemAsync(TViewModel, CancellationToken?)
  nameWithType.vb: IWriteOnlyRequestHandler(Of TViewModel).CreateItemAsync(TViewModel, CancellationToken?)
- uid: Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler`1.CreateItemAsync*
  name: CreateItemAsync
  href: api/Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler-1.html#Quickie_Handlers_Writeonly_Definition_IWriteOnlyRequestHandler_1_CreateItemAsync_
  commentId: Overload:Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler`1.CreateItemAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler<TViewModel>.CreateItemAsync
  fullName.vb: Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler(Of TViewModel).CreateItemAsync
  nameWithType: IWriteOnlyRequestHandler<TViewModel>.CreateItemAsync
  nameWithType.vb: IWriteOnlyRequestHandler(Of TViewModel).CreateItemAsync
- uid: Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler`1.CreateItemsAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name: CreateItemsAsync(ICollection<TViewModel>, CancellationToken?)
  href: api/Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler-1.html#Quickie_Handlers_Writeonly_Definition_IWriteOnlyRequestHandler_1_CreateItemsAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler`1.CreateItemsAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name.vb: CreateItemsAsync(ICollection(Of TViewModel), CancellationToken?)
  fullName: Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler<TViewModel>.CreateItemsAsync(System.Collections.Generic.ICollection<TViewModel>, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler(Of TViewModel).CreateItemsAsync(System.Collections.Generic.ICollection(Of TViewModel), System.Threading.CancellationToken?)
  nameWithType: IWriteOnlyRequestHandler<TViewModel>.CreateItemsAsync(ICollection<TViewModel>, CancellationToken?)
  nameWithType.vb: IWriteOnlyRequestHandler(Of TViewModel).CreateItemsAsync(ICollection(Of TViewModel), CancellationToken?)
- uid: Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler`1.CreateItemsAsync*
  name: CreateItemsAsync
  href: api/Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler-1.html#Quickie_Handlers_Writeonly_Definition_IWriteOnlyRequestHandler_1_CreateItemsAsync_
  commentId: Overload:Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler`1.CreateItemsAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler<TViewModel>.CreateItemsAsync
  fullName.vb: Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler(Of TViewModel).CreateItemsAsync
  nameWithType: IWriteOnlyRequestHandler<TViewModel>.CreateItemsAsync
  nameWithType.vb: IWriteOnlyRequestHandler(Of TViewModel).CreateItemsAsync
- uid: Quickie.Handlers.Writeonly.Implementation
  name: Quickie.Handlers.Writeonly.Implementation
  href: api/Quickie.Handlers.Writeonly.Implementation.html
  commentId: N:Quickie.Handlers.Writeonly.Implementation
  fullName: Quickie.Handlers.Writeonly.Implementation
  nameWithType: Quickie.Handlers.Writeonly.Implementation
- uid: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3
  name: WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>
  href: api/Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler-3.html
  commentId: T:Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3
  name.vb: WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler)
  fullName: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>
  fullName.vb: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler)
  nameWithType: WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>
  nameWithType.vb: WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler)
- uid: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.#ctor(Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler{`1})
  name: WriteOnlyRequestHandler(IWriteOnlyDataHandler<TEntity>)
  href: api/Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler-3.html#Quickie_Handlers_Writeonly_Implementation_WriteOnlyRequestHandler_3__ctor_Quickie_DataHandlers_Writeonly_Definition_IWriteOnlyDataHandler__1__
  commentId: M:Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.#ctor(Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler{`1})
  name.vb: New(IWriteOnlyDataHandler(Of TEntity))
  fullName: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.WriteOnlyRequestHandler(Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler<TEntity>)
  fullName.vb: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).New(Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler(Of TEntity))
  nameWithType: WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.WriteOnlyRequestHandler(IWriteOnlyDataHandler<TEntity>)
  nameWithType.vb: WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).New(IWriteOnlyDataHandler(Of TEntity))
- uid: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.#ctor*
  name: WriteOnlyRequestHandler
  href: api/Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler-3.html#Quickie_Handlers_Writeonly_Implementation_WriteOnlyRequestHandler_3__ctor_
  commentId: Overload:Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.WriteOnlyRequestHandler
  fullName.vb: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).New
  nameWithType: WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.WriteOnlyRequestHandler
  nameWithType.vb: WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).New
- uid: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.CreateItemAsync(`0,System.Nullable{System.Threading.CancellationToken})
  name: CreateItemAsync(TViewModel, CancellationToken?)
  href: api/Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler-3.html#Quickie_Handlers_Writeonly_Implementation_WriteOnlyRequestHandler_3_CreateItemAsync__0_System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.CreateItemAsync(`0,System.Nullable{System.Threading.CancellationToken})
  fullName: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.CreateItemAsync(TViewModel, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).CreateItemAsync(TViewModel, System.Threading.CancellationToken?)
  nameWithType: WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.CreateItemAsync(TViewModel, CancellationToken?)
  nameWithType.vb: WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).CreateItemAsync(TViewModel, CancellationToken?)
- uid: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.CreateItemAsync*
  name: CreateItemAsync
  href: api/Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler-3.html#Quickie_Handlers_Writeonly_Implementation_WriteOnlyRequestHandler_3_CreateItemAsync_
  commentId: Overload:Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.CreateItemAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.CreateItemAsync
  fullName.vb: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).CreateItemAsync
  nameWithType: WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.CreateItemAsync
  nameWithType.vb: WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).CreateItemAsync
- uid: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.CreateItemsAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name: CreateItemsAsync(ICollection<TViewModel>, CancellationToken?)
  href: api/Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler-3.html#Quickie_Handlers_Writeonly_Implementation_WriteOnlyRequestHandler_3_CreateItemsAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  commentId: M:Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.CreateItemsAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  name.vb: CreateItemsAsync(ICollection(Of TViewModel), CancellationToken?)
  fullName: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.CreateItemsAsync(System.Collections.Generic.ICollection<TViewModel>, System.Threading.CancellationToken?)
  fullName.vb: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).CreateItemsAsync(System.Collections.Generic.ICollection(Of TViewModel), System.Threading.CancellationToken?)
  nameWithType: WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.CreateItemsAsync(ICollection<TViewModel>, CancellationToken?)
  nameWithType.vb: WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).CreateItemsAsync(ICollection(Of TViewModel), CancellationToken?)
- uid: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.CreateItemsAsync*
  name: CreateItemsAsync
  href: api/Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler-3.html#Quickie_Handlers_Writeonly_Implementation_WriteOnlyRequestHandler_3_CreateItemsAsync_
  commentId: Overload:Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.CreateItemsAsync
  isSpec: "True"
  fullName: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.CreateItemsAsync
  fullName.vb: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).CreateItemsAsync
  nameWithType: WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.CreateItemsAsync
  nameWithType.vb: WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).CreateItemsAsync
- uid: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.MapToCollectionOfDto(System.Collections.Generic.ICollection{`1})
  name: MapToCollectionOfDto(ICollection<TEntity>)
  href: api/Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler-3.html#Quickie_Handlers_Writeonly_Implementation_WriteOnlyRequestHandler_3_MapToCollectionOfDto_System_Collections_Generic_ICollection__1__
  commentId: M:Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.MapToCollectionOfDto(System.Collections.Generic.ICollection{`1})
  name.vb: MapToCollectionOfDto(ICollection(Of TEntity))
  fullName: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.MapToCollectionOfDto(System.Collections.Generic.ICollection<TEntity>)
  fullName.vb: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToCollectionOfDto(System.Collections.Generic.ICollection(Of TEntity))
  nameWithType: WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.MapToCollectionOfDto(ICollection<TEntity>)
  nameWithType.vb: WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToCollectionOfDto(ICollection(Of TEntity))
- uid: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.MapToCollectionOfDto*
  name: MapToCollectionOfDto
  href: api/Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler-3.html#Quickie_Handlers_Writeonly_Implementation_WriteOnlyRequestHandler_3_MapToCollectionOfDto_
  commentId: Overload:Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.MapToCollectionOfDto
  isSpec: "True"
  fullName: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.MapToCollectionOfDto
  fullName.vb: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToCollectionOfDto
  nameWithType: WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.MapToCollectionOfDto
  nameWithType.vb: WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToCollectionOfDto
- uid: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.MapToCollectionOfEntity(System.Collections.Generic.ICollection{`0})
  name: MapToCollectionOfEntity(ICollection<TViewModel>)
  href: api/Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler-3.html#Quickie_Handlers_Writeonly_Implementation_WriteOnlyRequestHandler_3_MapToCollectionOfEntity_System_Collections_Generic_ICollection__0__
  commentId: M:Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.MapToCollectionOfEntity(System.Collections.Generic.ICollection{`0})
  name.vb: MapToCollectionOfEntity(ICollection(Of TViewModel))
  fullName: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.MapToCollectionOfEntity(System.Collections.Generic.ICollection<TViewModel>)
  fullName.vb: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToCollectionOfEntity(System.Collections.Generic.ICollection(Of TViewModel))
  nameWithType: WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.MapToCollectionOfEntity(ICollection<TViewModel>)
  nameWithType.vb: WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToCollectionOfEntity(ICollection(Of TViewModel))
- uid: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.MapToCollectionOfEntity*
  name: MapToCollectionOfEntity
  href: api/Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler-3.html#Quickie_Handlers_Writeonly_Implementation_WriteOnlyRequestHandler_3_MapToCollectionOfEntity_
  commentId: Overload:Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.MapToCollectionOfEntity
  isSpec: "True"
  fullName: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.MapToCollectionOfEntity
  fullName.vb: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToCollectionOfEntity
  nameWithType: WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.MapToCollectionOfEntity
  nameWithType.vb: WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToCollectionOfEntity
- uid: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.MapToDto(`1)
  name: MapToDto(TEntity)
  href: api/Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler-3.html#Quickie_Handlers_Writeonly_Implementation_WriteOnlyRequestHandler_3_MapToDto__1_
  commentId: M:Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.MapToDto(`1)
  fullName: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.MapToDto(TEntity)
  fullName.vb: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToDto(TEntity)
  nameWithType: WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.MapToDto(TEntity)
  nameWithType.vb: WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToDto(TEntity)
- uid: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.MapToDto*
  name: MapToDto
  href: api/Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler-3.html#Quickie_Handlers_Writeonly_Implementation_WriteOnlyRequestHandler_3_MapToDto_
  commentId: Overload:Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.MapToDto
  isSpec: "True"
  fullName: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.MapToDto
  fullName.vb: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToDto
  nameWithType: WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.MapToDto
  nameWithType.vb: WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToDto
- uid: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.MapToEntity(`0)
  name: MapToEntity(TViewModel)
  href: api/Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler-3.html#Quickie_Handlers_Writeonly_Implementation_WriteOnlyRequestHandler_3_MapToEntity__0_
  commentId: M:Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.MapToEntity(`0)
  fullName: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.MapToEntity(TViewModel)
  fullName.vb: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToEntity(TViewModel)
  nameWithType: WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.MapToEntity(TViewModel)
  nameWithType.vb: WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToEntity(TViewModel)
- uid: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.MapToEntity*
  name: MapToEntity
  href: api/Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler-3.html#Quickie_Handlers_Writeonly_Implementation_WriteOnlyRequestHandler_3_MapToEntity_
  commentId: Overload:Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler`3.MapToEntity
  isSpec: "True"
  fullName: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.MapToEntity
  fullName.vb: Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToEntity
  nameWithType: WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler>.MapToEntity
  nameWithType.vb: WriteOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToEntity
- uid: Quickie.Types
  name: Quickie.Types
  href: api/Quickie.Types.html
  commentId: N:Quickie.Types
  fullName: Quickie.Types
  nameWithType: Quickie.Types
- uid: Quickie.Types.Crud
  name: Quickie.Types.Crud
  href: api/Quickie.Types.Crud.html
  commentId: N:Quickie.Types.Crud
  fullName: Quickie.Types.Crud
  nameWithType: Quickie.Types.Crud
- uid: Quickie.Types.Crud.CrudDto
  name: CrudDto
  href: api/Quickie.Types.Crud.CrudDto.html
  commentId: T:Quickie.Types.Crud.CrudDto
  fullName: Quickie.Types.Crud.CrudDto
  nameWithType: CrudDto
- uid: Quickie.Types.Crud.CrudDto.#ctor
  name: CrudDto()
  href: api/Quickie.Types.Crud.CrudDto.html#Quickie_Types_Crud_CrudDto__ctor
  commentId: M:Quickie.Types.Crud.CrudDto.#ctor
  name.vb: New()
  fullName: Quickie.Types.Crud.CrudDto.CrudDto()
  fullName.vb: Quickie.Types.Crud.CrudDto.New()
  nameWithType: CrudDto.CrudDto()
  nameWithType.vb: CrudDto.New()
- uid: Quickie.Types.Crud.CrudDto.#ctor*
  name: CrudDto
  href: api/Quickie.Types.Crud.CrudDto.html#Quickie_Types_Crud_CrudDto__ctor_
  commentId: Overload:Quickie.Types.Crud.CrudDto.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Types.Crud.CrudDto.CrudDto
  fullName.vb: Quickie.Types.Crud.CrudDto.New
  nameWithType: CrudDto.CrudDto
  nameWithType.vb: CrudDto.New
- uid: Quickie.Types.Crud.CrudEntity
  name: CrudEntity
  href: api/Quickie.Types.Crud.CrudEntity.html
  commentId: T:Quickie.Types.Crud.CrudEntity
  fullName: Quickie.Types.Crud.CrudEntity
  nameWithType: CrudEntity
- uid: Quickie.Types.Editonly
  name: Quickie.Types.Editonly
  href: api/Quickie.Types.Editonly.html
  commentId: N:Quickie.Types.Editonly
  fullName: Quickie.Types.Editonly
  nameWithType: Quickie.Types.Editonly
- uid: Quickie.Types.Editonly.EditOnlyDto
  name: EditOnlyDto
  href: api/Quickie.Types.Editonly.EditOnlyDto.html
  commentId: T:Quickie.Types.Editonly.EditOnlyDto
  fullName: Quickie.Types.Editonly.EditOnlyDto
  nameWithType: EditOnlyDto
- uid: Quickie.Types.Editonly.EditOnlyDto.#ctor
  name: EditOnlyDto()
  href: api/Quickie.Types.Editonly.EditOnlyDto.html#Quickie_Types_Editonly_EditOnlyDto__ctor
  commentId: M:Quickie.Types.Editonly.EditOnlyDto.#ctor
  name.vb: New()
  fullName: Quickie.Types.Editonly.EditOnlyDto.EditOnlyDto()
  fullName.vb: Quickie.Types.Editonly.EditOnlyDto.New()
  nameWithType: EditOnlyDto.EditOnlyDto()
  nameWithType.vb: EditOnlyDto.New()
- uid: Quickie.Types.Editonly.EditOnlyDto.#ctor*
  name: EditOnlyDto
  href: api/Quickie.Types.Editonly.EditOnlyDto.html#Quickie_Types_Editonly_EditOnlyDto__ctor_
  commentId: Overload:Quickie.Types.Editonly.EditOnlyDto.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Types.Editonly.EditOnlyDto.EditOnlyDto
  fullName.vb: Quickie.Types.Editonly.EditOnlyDto.New
  nameWithType: EditOnlyDto.EditOnlyDto
  nameWithType.vb: EditOnlyDto.New
- uid: Quickie.Types.Editonly.EditOnlyEntity
  name: EditOnlyEntity
  href: api/Quickie.Types.Editonly.EditOnlyEntity.html
  commentId: T:Quickie.Types.Editonly.EditOnlyEntity
  fullName: Quickie.Types.Editonly.EditOnlyEntity
  nameWithType: EditOnlyEntity
- uid: Quickie.Types.Editonly.EditOnlyEntity.#ctor
  name: EditOnlyEntity()
  href: api/Quickie.Types.Editonly.EditOnlyEntity.html#Quickie_Types_Editonly_EditOnlyEntity__ctor
  commentId: M:Quickie.Types.Editonly.EditOnlyEntity.#ctor
  name.vb: New()
  fullName: Quickie.Types.Editonly.EditOnlyEntity.EditOnlyEntity()
  fullName.vb: Quickie.Types.Editonly.EditOnlyEntity.New()
  nameWithType: EditOnlyEntity.EditOnlyEntity()
  nameWithType.vb: EditOnlyEntity.New()
- uid: Quickie.Types.Editonly.EditOnlyEntity.#ctor*
  name: EditOnlyEntity
  href: api/Quickie.Types.Editonly.EditOnlyEntity.html#Quickie_Types_Editonly_EditOnlyEntity__ctor_
  commentId: Overload:Quickie.Types.Editonly.EditOnlyEntity.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Types.Editonly.EditOnlyEntity.EditOnlyEntity
  fullName.vb: Quickie.Types.Editonly.EditOnlyEntity.New
  nameWithType: EditOnlyEntity.EditOnlyEntity
  nameWithType.vb: EditOnlyEntity.New
- uid: Quickie.Types.ErrorStatusEnum
  name: ErrorStatusEnum
  href: api/Quickie.Types.ErrorStatusEnum.html
  commentId: T:Quickie.Types.ErrorStatusEnum
  fullName: Quickie.Types.ErrorStatusEnum
  nameWithType: ErrorStatusEnum
- uid: Quickie.Types.ErrorStatusEnum.Critical
  name: Critical
  href: api/Quickie.Types.ErrorStatusEnum.html#Quickie_Types_ErrorStatusEnum_Critical
  commentId: F:Quickie.Types.ErrorStatusEnum.Critical
  fullName: Quickie.Types.ErrorStatusEnum.Critical
  nameWithType: ErrorStatusEnum.Critical
- uid: Quickie.Types.ErrorStatusEnum.Info
  name: Info
  href: api/Quickie.Types.ErrorStatusEnum.html#Quickie_Types_ErrorStatusEnum_Info
  commentId: F:Quickie.Types.ErrorStatusEnum.Info
  fullName: Quickie.Types.ErrorStatusEnum.Info
  nameWithType: ErrorStatusEnum.Info
- uid: Quickie.Types.ErrorStatusEnum.Warning
  name: Warning
  href: api/Quickie.Types.ErrorStatusEnum.html#Quickie_Types_ErrorStatusEnum_Warning
  commentId: F:Quickie.Types.ErrorStatusEnum.Warning
  fullName: Quickie.Types.ErrorStatusEnum.Warning
  nameWithType: ErrorStatusEnum.Warning
- uid: Quickie.Types.Readonly
  name: Quickie.Types.Readonly
  href: api/Quickie.Types.Readonly.html
  commentId: N:Quickie.Types.Readonly
  fullName: Quickie.Types.Readonly
  nameWithType: Quickie.Types.Readonly
- uid: Quickie.Types.Readonly.IReadOnlyRequestHandler`1
  name: IReadOnlyRequestHandler<TViewModel>
  href: api/Quickie.Types.Readonly.IReadOnlyRequestHandler-1.html
  commentId: T:Quickie.Types.Readonly.IReadOnlyRequestHandler`1
  name.vb: IReadOnlyRequestHandler(Of TViewModel)
  fullName: Quickie.Types.Readonly.IReadOnlyRequestHandler<TViewModel>
  fullName.vb: Quickie.Types.Readonly.IReadOnlyRequestHandler(Of TViewModel)
  nameWithType: IReadOnlyRequestHandler<TViewModel>
  nameWithType.vb: IReadOnlyRequestHandler(Of TViewModel)
- uid: Quickie.Types.Readonly.ReadOnlyDto
  name: ReadOnlyDto
  href: api/Quickie.Types.Readonly.ReadOnlyDto.html
  commentId: T:Quickie.Types.Readonly.ReadOnlyDto
  fullName: Quickie.Types.Readonly.ReadOnlyDto
  nameWithType: ReadOnlyDto
- uid: Quickie.Types.Readonly.ReadOnlyDto.#ctor
  name: ReadOnlyDto()
  href: api/Quickie.Types.Readonly.ReadOnlyDto.html#Quickie_Types_Readonly_ReadOnlyDto__ctor
  commentId: M:Quickie.Types.Readonly.ReadOnlyDto.#ctor
  name.vb: New()
  fullName: Quickie.Types.Readonly.ReadOnlyDto.ReadOnlyDto()
  fullName.vb: Quickie.Types.Readonly.ReadOnlyDto.New()
  nameWithType: ReadOnlyDto.ReadOnlyDto()
  nameWithType.vb: ReadOnlyDto.New()
- uid: Quickie.Types.Readonly.ReadOnlyDto.#ctor*
  name: ReadOnlyDto
  href: api/Quickie.Types.Readonly.ReadOnlyDto.html#Quickie_Types_Readonly_ReadOnlyDto__ctor_
  commentId: Overload:Quickie.Types.Readonly.ReadOnlyDto.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Types.Readonly.ReadOnlyDto.ReadOnlyDto
  fullName.vb: Quickie.Types.Readonly.ReadOnlyDto.New
  nameWithType: ReadOnlyDto.ReadOnlyDto
  nameWithType.vb: ReadOnlyDto.New
- uid: Quickie.Types.Readonly.ReadOnlyEntity
  name: ReadOnlyEntity
  href: api/Quickie.Types.Readonly.ReadOnlyEntity.html
  commentId: T:Quickie.Types.Readonly.ReadOnlyEntity
  fullName: Quickie.Types.Readonly.ReadOnlyEntity
  nameWithType: ReadOnlyEntity
- uid: Quickie.Types.Readonly.ReadOnlyRequestHandler`1
  name: ReadOnlyRequestHandler<TViewModel>
  href: api/Quickie.Types.Readonly.ReadOnlyRequestHandler-1.html
  commentId: T:Quickie.Types.Readonly.ReadOnlyRequestHandler`1
  name.vb: ReadOnlyRequestHandler(Of TViewModel)
  fullName: Quickie.Types.Readonly.ReadOnlyRequestHandler<TViewModel>
  fullName.vb: Quickie.Types.Readonly.ReadOnlyRequestHandler(Of TViewModel)
  nameWithType: ReadOnlyRequestHandler<TViewModel>
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel)
- uid: Quickie.Types.Writable
  name: Quickie.Types.Writable
  href: api/Quickie.Types.Writable.html
  commentId: N:Quickie.Types.Writable
  fullName: Quickie.Types.Writable
  nameWithType: Quickie.Types.Writable
- uid: Quickie.Types.Writable.WriteOnlyDto
  name: WriteOnlyDto
  href: api/Quickie.Types.Writable.WriteOnlyDto.html
  commentId: T:Quickie.Types.Writable.WriteOnlyDto
  fullName: Quickie.Types.Writable.WriteOnlyDto
  nameWithType: WriteOnlyDto
- uid: Quickie.Types.Writable.WriteOnlyDto.#ctor
  name: WriteOnlyDto()
  href: api/Quickie.Types.Writable.WriteOnlyDto.html#Quickie_Types_Writable_WriteOnlyDto__ctor
  commentId: M:Quickie.Types.Writable.WriteOnlyDto.#ctor
  name.vb: New()
  fullName: Quickie.Types.Writable.WriteOnlyDto.WriteOnlyDto()
  fullName.vb: Quickie.Types.Writable.WriteOnlyDto.New()
  nameWithType: WriteOnlyDto.WriteOnlyDto()
  nameWithType.vb: WriteOnlyDto.New()
- uid: Quickie.Types.Writable.WriteOnlyDto.#ctor*
  name: WriteOnlyDto
  href: api/Quickie.Types.Writable.WriteOnlyDto.html#Quickie_Types_Writable_WriteOnlyDto__ctor_
  commentId: Overload:Quickie.Types.Writable.WriteOnlyDto.#ctor
  isSpec: "True"
  name.vb: New
  fullName: Quickie.Types.Writable.WriteOnlyDto.WriteOnlyDto
  fullName.vb: Quickie.Types.Writable.WriteOnlyDto.New
  nameWithType: WriteOnlyDto.WriteOnlyDto
  nameWithType.vb: WriteOnlyDto.New
- uid: Quickie.Types.Writable.WriteOnlyEntity
  name: WriteOnlyEntity
  href: api/Quickie.Types.Writable.WriteOnlyEntity.html
  commentId: T:Quickie.Types.Writable.WriteOnlyEntity
  fullName: Quickie.Types.Writable.WriteOnlyEntity
  nameWithType: WriteOnlyEntity
