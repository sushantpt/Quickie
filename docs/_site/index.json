{
  "_site/api/Quickie.Apis.Crud.CrudController-3.html": {
    "href": "_site/api/Quickie.Apis.Crud.CrudController-3.html",
    "title": "Class CrudController<TViewModel, TRequestHandler, TIdType> | Quickie",
    "keywords": "Class CrudController<TViewModel, TRequestHandler, TIdType> Namespace Quickie.Apis.Crud Assembly Quickie.dll Base class providing CRUD apis. public class CrudController<TViewModel, TRequestHandler, TIdType> : QuickieBaseApi where TViewModel : CrudDto where TRequestHandler : ICrudRequestHandler<TViewModel, TIdType> where TIdType : IComparable Type Parameters TViewModel Dto. TRequestHandler Request handler (Service layer). TIdType Type of your primary key. Inheritance object ControllerBase QuickieBaseApi CrudController<TViewModel, TRequestHandler, TIdType> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudController(TRequestHandler) Base class providing CRUD apis. public CrudController(TRequestHandler requestHandler) Parameters requestHandler TRequestHandler Request handler (Service layer) Methods CreateAsync(string?, TViewModel, CancellationToken) Create data. [HttpPost] public Task<ActionResult<ResponseObj<TViewModel>>> CreateAsync(string? idempotencyKey, TViewModel request, CancellationToken cancellationToken = default) Parameters idempotencyKey string Idempotency key request TViewModel Requested data to create cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<TViewModel>>> HTTP 201 Created, or 400 BadRequest. DeleteAsync(TIdType, CancellationToken) Delete data [HttpDelete(\"{id}\")] public Task<ActionResult<ResponseObj>> DeleteAsync(TIdType id, CancellationToken cancellationToken = default) Parameters id TIdType Identifier of data cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj>> HTTP 204 NoContent or 400 BadRequest. GetByIdAsync(TIdType, CancellationToken) Get data by id. [HttpGet(\"{id}\")] public Task<ActionResult<ResponseObj<TViewModel>>> GetByIdAsync(TIdType id, CancellationToken cancellationToken = default) Parameters id TIdType Identifier cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<TViewModel>>> HTTP 200 Ok, 404 NotFound, or 400 BadRequest. UpdateAsync(TIdType, TViewModel, CancellationToken) Update data. [HttpPut(\"{id}\")] public Task<ActionResult<ResponseObj<TViewModel>>> UpdateAsync(TIdType id, TViewModel request, CancellationToken cancellationToken = default) Parameters id TIdType Identifier of data request TViewModel Requested data to update cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<TViewModel>>> HTTP 200 Ok, or 400 BadRequest."
  },
  "_site/api/Quickie.Apis.Crud.CrudForCollectionController-3.html": {
    "href": "_site/api/Quickie.Apis.Crud.CrudForCollectionController-3.html",
    "title": "Class CrudForCollectionController<TViewModel, TRequestHandler, TIdType> | Quickie",
    "keywords": "Class CrudForCollectionController<TViewModel, TRequestHandler, TIdType> Namespace Quickie.Apis.Crud Assembly Quickie.dll Base class providing CRUD apis in collection. public class CrudForCollectionController<TViewModel, TRequestHandler, TIdType> : QuickieBaseApi where TViewModel : CrudDto where TRequestHandler : ICrudForCollectionRequestHandler<TViewModel, TIdType> where TIdType : IComparable Type Parameters TViewModel Dto TRequestHandler Request handler (Service layer) TIdType Type of your primary key. Inheritance object ControllerBase QuickieBaseApi CrudForCollectionController<TViewModel, TRequestHandler, TIdType> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudForCollectionController(TRequestHandler) Base class providing CRUD apis in collection. public CrudForCollectionController(TRequestHandler requestHandler) Parameters requestHandler TRequestHandler Methods CountAsync(CancellationToken) Total count of data. [HttpGet(\"items/count\")] public Task<ActionResult<ResponseObj<int>>> CountAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<int>>> HTTP 200 Ok or 400 BadRequest. CreateAsync(string?, ICollection<TViewModel>, CancellationToken) Create collection of data. [HttpPost(\"items\")] public Task<ActionResult<ResponseObj<ICollection<TViewModel>>>> CreateAsync(string? idempotencyKey, ICollection<TViewModel> request, CancellationToken cancellationToken = default) Parameters idempotencyKey string Idempotency key. request ICollection<TViewModel> Requested data to create. cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<ICollection<TViewModel>>>> HTTP 201 Created, or 400 BadRequest. DeleteAsync(ICollection<TIdType>, CancellationToken) DELETE request for collection of data. [HttpDelete(\"items\")] public Task<ActionResult<ResponseObj>> DeleteAsync(ICollection<TIdType> ids, CancellationToken cancellationToken = default) Parameters ids ICollection<TIdType> Collection of id. cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj>> HTTP 204 NoContent or 400 BadRequest. GetAllAsync(RequestForDataObj, CancellationToken) Get all data. (Paginated) [HttpGet(\"items\")] public Task<ActionResult<ResponseObj<PaginatedDataObj<TViewModel>>>> GetAllAsync(RequestForDataObj request, CancellationToken cancellationToken = default) Parameters request RequestForDataObj Request object. cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<PaginatedDataObj<TViewModel>>>> HTTP 200 Ok, 404 NotFound, or 400 BadRequest. UpdateAsync(ICollection<TViewModel>, CancellationToken) Update collection of data. [HttpPut(\"items\")] public Task<ActionResult<ResponseObj<ICollection<TViewModel>>>> UpdateAsync(ICollection<TViewModel> request, CancellationToken cancellationToken = default) Parameters request ICollection<TViewModel> Requested data to update cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<ICollection<TViewModel>>>> HTTP 200 Ok, or 400 BadRequest."
  },
  "_site/api/Quickie.Apis.Crud.html": {
    "href": "_site/api/Quickie.Apis.Crud.html",
    "title": "Namespace Quickie.Apis.Crud | Quickie",
    "keywords": "Namespace Quickie.Apis.Crud Classes CrudController<TViewModel, TRequestHandler, TIdType> Base class providing CRUD apis. CrudForCollectionController<TViewModel, TRequestHandler, TIdType> Base class providing CRUD apis in collection."
  },
  "_site/api/Quickie.Apis.Editonly.EditOnlyController-3.html": {
    "href": "_site/api/Quickie.Apis.Editonly.EditOnlyController-3.html",
    "title": "Class EditOnlyController<TViewModel, TRequestHandler, TIdType> | Quickie",
    "keywords": "Class EditOnlyController<TViewModel, TRequestHandler, TIdType> Namespace Quickie.Apis.Editonly Assembly Quickie.dll Base class providing Edit-Only APIs. public class EditOnlyController<TViewModel, TRequestHandler, TIdType> : QuickieBaseApi where TViewModel : EditOnlyDto where TRequestHandler : IEditOnlyRequestHandler<TViewModel, TIdType> where TIdType : IComparable Type Parameters TViewModel Dto TRequestHandler Request handler (Service layer) TIdType Type of your primary key Inheritance object ControllerBase QuickieBaseApi EditOnlyController<TViewModel, TRequestHandler, TIdType> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EditOnlyController(IEditOnlyRequestHandler<TViewModel, TIdType>) Base class providing Edit-Only APIs. public EditOnlyController(IEditOnlyRequestHandler<TViewModel, TIdType> requestHandler) Parameters requestHandler IEditOnlyRequestHandler<TViewModel, TIdType> Methods EditAsync(TIdType, TViewModel, CancellationToken) Edit a single item. [HttpPut(\"{id}\")] public Task<ActionResult<ResponseObj<TViewModel>>> EditAsync(TIdType id, TViewModel requestModel, CancellationToken cancellationToken = default) Parameters id TIdType Identifier of the item requestModel TViewModel Data for editing cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<TViewModel>>> HTTP 200 Ok, or 400 BadRequest. EditCollectionAsync(ICollection<TViewModel>, CancellationToken) Edit a collection of items. [HttpPut(\"items\")] public Task<ActionResult<ResponseObj<ICollection<TViewModel>>>> EditCollectionAsync(ICollection<TViewModel> requestModels, CancellationToken cancellationToken = default) Parameters requestModels ICollection<TViewModel> Collection of items to edit cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<ICollection<TViewModel>>>> HTTP 200 Ok, or 400 BadRequest."
  },
  "_site/api/Quickie.Apis.Editonly.html": {
    "href": "_site/api/Quickie.Apis.Editonly.html",
    "title": "Namespace Quickie.Apis.Editonly | Quickie",
    "keywords": "Namespace Quickie.Apis.Editonly Classes EditOnlyController<TViewModel, TRequestHandler, TIdType> Base class providing Edit-Only APIs."
  },
  "_site/api/Quickie.Apis.Readonly.ReadOnlyCollectionController-4.html": {
    "href": "_site/api/Quickie.Apis.Readonly.ReadOnlyCollectionController-4.html",
    "title": "Class ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType> | Quickie",
    "keywords": "Class ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType> Namespace Quickie.Apis.Readonly Assembly Quickie.dll Abstract base class for read-only (GET) operations on data collections, utilizing a request handler to manage read operations. public class ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType> : QuickieBaseApi where TViewModel : ReadOnlyDto where TRequestHandler : IReadOnlyCollectionRequestHandler<TViewModel, TIdType> where TRequestForDataModel : RequestForDataObj where TIdType : IComparable Type Parameters TViewModel The type of the view model that represents the data transfer object. TRequestHandler The type of the request handler that processes the read-only operations. TRequestForDataModel The type to provide request for collection of data. TIdType Type of identifier (string, int, double, Guid, ...) Inheritance object ControllerBase QuickieBaseApi ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyCollectionController(TRequestHandler) Abstract base class for read-only (GET) operations on data collections, utilizing a request handler to manage read operations. public ReadOnlyCollectionController(TRequestHandler requestHandler) Parameters requestHandler TRequestHandler Methods GetAsync(TRequestForDataModel, CancellationToken) GET request based on some request. [HttpGet(\"items\")] public Task<ActionResult<PaginatedDataObj<TViewModel>>> GetAsync(TRequestForDataModel request, CancellationToken cancellationToken = default) Parameters request TRequestForDataModel Data filtration and pagination request object. cancellationToken CancellationToken Cancellation token. Returns Task<ActionResult<PaginatedDataObj<TViewModel>>> Paginated data with appropriate HTTP status codes."
  },
  "_site/api/Quickie.Apis.Readonly.ReadOnlyController-3.html": {
    "href": "_site/api/Quickie.Apis.Readonly.ReadOnlyController-3.html",
    "title": "Class ReadOnlyController<TViewModel, TRequestHandler, TIdType> | Quickie",
    "keywords": "Class ReadOnlyController<TViewModel, TRequestHandler, TIdType> Namespace Quickie.Apis.Readonly Assembly Quickie.dll Abstract base class for read-only (GETs) operations that utilize a request handler for managing read operations. public class ReadOnlyController<TViewModel, TRequestHandler, TIdType> : QuickieBaseApi where TViewModel : ReadOnlyDto where TRequestHandler : IReadOnlyRequestHandler<TViewModel, TIdType> where TIdType : IComparable Type Parameters TViewModel The type of the view model that represents the data transfer object. TRequestHandler The type of the request handler that processes the read-only operations. TIdType Type of identifier (string, int, double, Guid, ...). Inheritance object ControllerBase QuickieBaseApi ReadOnlyController<TViewModel, TRequestHandler, TIdType> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyController(TRequestHandler) Abstract base class for read-only (GETs) operations that utilize a request handler for managing read operations. public ReadOnlyController(TRequestHandler requestHandler) Parameters requestHandler TRequestHandler Methods GetByIdAsync(TIdType, CancellationToken) [HttpGet(\"{id}\")] public Task<ActionResult<ResponseObj<TViewModel>>> GetByIdAsync(TIdType id, CancellationToken cancellationToken = default) Parameters id TIdType cancellationToken CancellationToken Returns Task<ActionResult<ResponseObj<TViewModel>>>"
  },
  "_site/api/Quickie.Apis.Readonly.html": {
    "href": "_site/api/Quickie.Apis.Readonly.html",
    "title": "Namespace Quickie.Apis.Readonly | Quickie",
    "keywords": "Namespace Quickie.Apis.Readonly Classes ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType> Abstract base class for read-only (GET) operations on data collections, utilizing a request handler to manage read operations. ReadOnlyController<TViewModel, TRequestHandler, TIdType> Abstract base class for read-only (GETs) operations that utilize a request handler for managing read operations."
  },
  "_site/api/Quickie.Apis.Writeonly.WriteOnlyController-2.html": {
    "href": "_site/api/Quickie.Apis.Writeonly.WriteOnlyController-2.html",
    "title": "Class WriteOnlyController<TViewModel, TRequestHandler> | Quickie",
    "keywords": "Class WriteOnlyController<TViewModel, TRequestHandler> Namespace Quickie.Apis.Writeonly Assembly Quickie.dll public class WriteOnlyController<TViewModel, TRequestHandler> : QuickieBaseApi where TViewModel : WriteOnlyDto where TRequestHandler : IWriteOnlyRequestHandler<TViewModel> Type Parameters TViewModel TRequestHandler Inheritance object ControllerBase QuickieBaseApi WriteOnlyController<TViewModel, TRequestHandler> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WriteOnlyController(IWriteOnlyRequestHandler<TViewModel>) public WriteOnlyController(IWriteOnlyRequestHandler<TViewModel> requestHandler) Parameters requestHandler IWriteOnlyRequestHandler<TViewModel> Methods CreateItemAsync(string?, TViewModel, CancellationToken) Create a single item. [HttpPost] public Task<ActionResult<ResponseObj<TViewModel>>> CreateItemAsync(string? idempotencyKey, TViewModel request, CancellationToken cancellationToken = default) Parameters idempotencyKey string Idempotency key. request TViewModel Data to create cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<TViewModel>>> Response indicating success or failure of the operation. CreateItemsAsync(string?, ICollection<TViewModel>, CancellationToken) Create multiple items in bulk. [HttpPost(\"items\")] public Task<ActionResult<ResponseObj<ICollection<TViewModel>>>> CreateItemsAsync(string? idempotencyKey, ICollection<TViewModel> requests, CancellationToken cancellationToken = default) Parameters idempotencyKey string idempotency key requests ICollection<TViewModel> Requested data to create cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<ICollection<TViewModel>>>> Response indicating success or failure of the operation."
  },
  "_site/api/Quickie.Apis.Writeonly.html": {
    "href": "_site/api/Quickie.Apis.Writeonly.html",
    "title": "Namespace Quickie.Apis.Writeonly | Quickie",
    "keywords": "Namespace Quickie.Apis.Writeonly Classes WriteOnlyController<TViewModel, TRequestHandler>"
  },
  "_site/api/Quickie.Base.QuickieBaseApi.html": {
    "href": "_site/api/Quickie.Base.QuickieBaseApi.html",
    "title": "Class QuickieBaseApi | Quickie",
    "keywords": "Class QuickieBaseApi Namespace Quickie.Base Assembly Quickie.dll Ultimate base of quickie controllers (APIs) [EnableRateLimiting(\"Quickie-Rl-Policy\")] [ApiController] [Route(\"api/[controller]\")] [Produces(\"application/json\", new string[] { })] public abstract class QuickieBaseApi : ControllerBase Inheritance object ControllerBase QuickieBaseApi Derived CrudController<TViewModel, TRequestHandler, TIdType> CrudForCollectionController<TViewModel, TRequestHandler, TIdType> EditOnlyController<TViewModel, TRequestHandler, TIdType> ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType> ReadOnlyController<TViewModel, TRequestHandler, TIdType> WriteOnlyController<TViewModel, TRequestHandler> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "_site/api/Quickie.Base.html": {
    "href": "_site/api/Quickie.Base.html",
    "title": "Namespace Quickie.Base | Quickie",
    "keywords": "Namespace Quickie.Base Classes QuickieBaseApi Ultimate base of quickie controllers (APIs)"
  },
  "_site/api/Quickie.Configuration.DependencyResolver.html": {
    "href": "_site/api/Quickie.Configuration.DependencyResolver.html",
    "title": "Class DependencyResolver | Quickie",
    "keywords": "Class DependencyResolver Namespace Quickie.Configuration Assembly Quickie.dll Dependency resolver for data handlers. public static class DependencyResolver Inheritance object DependencyResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddDataHandlersDependency(IServiceCollection) Add data handlers dependency. public static IServiceCollection AddDataHandlersDependency(this IServiceCollection services) Parameters services IServiceCollection Service collection Returns IServiceCollection"
  },
  "_site/api/Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.html": {
    "href": "_site/api/Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.html",
    "title": "Class InMemoryIdempotencyProvider | Quickie",
    "keywords": "Class InMemoryIdempotencyProvider Namespace Quickie.Configuration.Idempotency.DefaultProvider Assembly Quickie.dll Default InMemory idempotency provider public class InMemoryIdempotencyProvider : IIdempotencyProvider Inheritance object InMemoryIdempotencyProvider Implements IIdempotencyProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ExistsAsync(string) Asynchronous method synchronous operation(check in dictionary). public ValueTask<bool> ExistsAsync(string key) Parameters key string Key Returns ValueTask<bool> bool MarkAsync(string) Asynchronous method synchronous operation (add in dictionary). public ValueTask MarkAsync(string key) Parameters key string Returns ValueTask RemoveExpiredKeys() Remove expired api idempotency keys public ValueTask RemoveExpiredKeys() Returns ValueTask"
  },
  "_site/api/Quickie.Configuration.Idempotency.DefaultProvider.html": {
    "href": "_site/api/Quickie.Configuration.Idempotency.DefaultProvider.html",
    "title": "Namespace Quickie.Configuration.Idempotency.DefaultProvider | Quickie",
    "keywords": "Namespace Quickie.Configuration.Idempotency.DefaultProvider Classes InMemoryIdempotencyProvider Default InMemory idempotency provider"
  },
  "_site/api/Quickie.Configuration.Idempotency.IIdempotencyProvider.html": {
    "href": "_site/api/Quickie.Configuration.Idempotency.IIdempotencyProvider.html",
    "title": "Interface IIdempotencyProvider | Quickie",
    "keywords": "Interface IIdempotencyProvider Namespace Quickie.Configuration.Idempotency Assembly Quickie.dll Idempotency provider contract public interface IIdempotencyProvider Methods ExistsAsync(string) Check if the key is already used. ValueTask<bool> ExistsAsync(string key) Parameters key string Unique key Returns ValueTask<bool> whether the key is used or not. MarkAsync(string) Add and mark key as used. ValueTask MarkAsync(string key) Parameters key string Unique key Returns ValueTask a Task RemoveExpiredKeys() Remove idempotency keys. ValueTask RemoveExpiredKeys() Returns ValueTask"
  },
  "_site/api/Quickie.Configuration.Idempotency.IdempotencyBackgroundService.html": {
    "href": "_site/api/Quickie.Configuration.Idempotency.IdempotencyBackgroundService.html",
    "title": "Class IdempotencyBackgroundService | Quickie",
    "keywords": "Class IdempotencyBackgroundService Namespace Quickie.Configuration.Idempotency Assembly Quickie.dll Background service to remove expired idempotency key. public class IdempotencyBackgroundService : BackgroundService, IHostedService, IDisposable Inheritance object BackgroundService IdempotencyBackgroundService Implements IHostedService IDisposable Inherited Members BackgroundService.Dispose() BackgroundService.StartAsync(CancellationToken) BackgroundService.StopAsync(CancellationToken) BackgroundService.ExecuteTask object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IdempotencyBackgroundService(IIdempotencyProvider) Background service to remove expired idempotency key. public IdempotencyBackgroundService(IIdempotencyProvider idempotencyProvider) Parameters idempotencyProvider IIdempotencyProvider Methods ExecuteAsync(CancellationToken) This method is called when the IHostedService starts. The implementation should return a task that represents the lifetime of the long running operation(s) being performed. protected override Task ExecuteAsync(CancellationToken stoppingToken) Parameters stoppingToken CancellationToken Triggered when StopAsync(CancellationToken) is called. Returns Task A Task that represents the long running operations. Remarks See Worker Services in .NET for implementation guidelines."
  },
  "_site/api/Quickie.Configuration.Idempotency.IdempotentConfiguration.html": {
    "href": "_site/api/Quickie.Configuration.Idempotency.IdempotentConfiguration.html",
    "title": "Class IdempotentConfiguration | Quickie",
    "keywords": "Class IdempotentConfiguration Namespace Quickie.Configuration.Idempotency Assembly Quickie.dll public class IdempotentConfiguration Inheritance object IdempotentConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Enable Enable idempotency. By default, idempotency is false public bool Enable { get; set; } Property Value bool IdempotencyLifespan Lifespan of keys. By default, its 1 hour public TimeSpan IdempotencyLifespan { get; set; } Property Value TimeSpan Provider Your custom idempotency provider public IIdempotencyProvider? Provider { get; set; } Property Value IIdempotencyProvider RunBackgroundServiceEveryHour Run background service every x hour? By default, 1 hour [Range(0, 24)] public int RunBackgroundServiceEveryHour { get; set; } Property Value int"
  },
  "_site/api/Quickie.Configuration.Idempotency.html": {
    "href": "_site/api/Quickie.Configuration.Idempotency.html",
    "title": "Namespace Quickie.Configuration.Idempotency | Quickie",
    "keywords": "Namespace Quickie.Configuration.Idempotency Classes IdempotencyBackgroundService Background service to remove expired idempotency key. IdempotentConfiguration Interfaces IIdempotencyProvider Idempotency provider contract"
  },
  "_site/api/Quickie.Configuration.Middleware.IdempotencyMiddleware.html": {
    "href": "_site/api/Quickie.Configuration.Middleware.IdempotencyMiddleware.html",
    "title": "Class IdempotencyMiddleware | Quickie",
    "keywords": "Class IdempotencyMiddleware Namespace Quickie.Configuration.Middleware Assembly Quickie.dll Idempotency implementer middleware public class IdempotencyMiddleware Inheritance object IdempotencyMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IdempotencyMiddleware(IIdempotencyProvider, RequestDelegate) Idempotency implementer middleware public IdempotencyMiddleware(IIdempotencyProvider idempotencyProvider, RequestDelegate next) Parameters idempotencyProvider IIdempotencyProvider Idempotency provider next RequestDelegate Methods InvokeAsync(HttpContext) public Task InvokeAsync(HttpContext context) Parameters context HttpContext Returns Task"
  },
  "_site/api/Quickie.Configuration.Middleware.html": {
    "href": "_site/api/Quickie.Configuration.Middleware.html",
    "title": "Namespace Quickie.Configuration.Middleware | Quickie",
    "keywords": "Namespace Quickie.Configuration.Middleware Classes IdempotencyMiddleware Idempotency implementer middleware"
  },
  "_site/api/Quickie.Configuration.Options.GlobalQuickieConfigData.html": {
    "href": "_site/api/Quickie.Configuration.Options.GlobalQuickieConfigData.html",
    "title": "Class GlobalQuickieConfigData | Quickie",
    "keywords": "Class GlobalQuickieConfigData Namespace Quickie.Configuration.Options Assembly Quickie.dll Global configuration for Quickie library. Must be initialized once during application startup before any Quickie features are used. public static class GlobalQuickieConfigData Inheritance object GlobalQuickieConfigData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Options Configured Quickie options. public static QuickieOptions Options { get; } Property Value QuickieOptions Exceptions InvalidOperationException Methods Initialize(QuickieOptions) Initializes Quickie configuration. This method must be called once during application startup. public static void Initialize(QuickieOptions options) Parameters options QuickieOptions Configuration options Exceptions ArgumentNullException"
  },
  "_site/api/Quickie.Configuration.Options.RateLimitConfiguration.html": {
    "href": "_site/api/Quickie.Configuration.Options.RateLimitConfiguration.html",
    "title": "Class RateLimitConfiguration | Quickie",
    "keywords": "Class RateLimitConfiguration Namespace Quickie.Configuration.Options Assembly Quickie.dll Rate limit configuration. (ip based) public class RateLimitConfiguration Inheritance object RateLimitConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisableRateLimiting Disable rate limiting. By default, rate limiting is true. public bool DisableRateLimiting { get; set; } Property Value bool FromSeconds Duration (seconds) to block. Default is: 6 public int? FromSeconds { get; set; } Property Value int? PermitLimit Number of request. Default is: 1 request every 'FromSeconds' public int? PermitLimit { get; set; } Property Value int? PolicyName Name of rate limit policy. Default is \"Quickie-Rl-Policy\" public string? PolicyName { get; set; } Property Value string"
  },
  "_site/api/Quickie.Configuration.Options.html": {
    "href": "_site/api/Quickie.Configuration.Options.html",
    "title": "Namespace Quickie.Configuration.Options | Quickie",
    "keywords": "Namespace Quickie.Configuration.Options Classes GlobalQuickieConfigData Global configuration for Quickie library. Must be initialized once during application startup before any Quickie features are used. RateLimitConfiguration Rate limit configuration. (ip based)"
  },
  "_site/api/Quickie.Configuration.QuickieExtension.html": {
    "href": "_site/api/Quickie.Configuration.QuickieExtension.html",
    "title": "Class QuickieExtension | Quickie",
    "keywords": "Class QuickieExtension Namespace Quickie.Configuration Assembly Quickie.dll Quickie extensions public static class QuickieExtension Inheritance object QuickieExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddQuickie(IApplicationBuilder) Configures the application to use Quickie services and middleware based on provided options. public static IApplicationBuilder AddQuickie(this IApplicationBuilder app) Parameters app IApplicationBuilder Application request pipeline builder. Returns IApplicationBuilder IApplicationBuilder QuickieConfig(IServiceCollection, Action<QuickieOptions>?) Registers Quickie services in the DI container, including all custom services. public static IServiceCollection QuickieConfig(this IServiceCollection services, Action<QuickieOptions>? configureOptions = null) Parameters services IServiceCollection DI register and resolver. configureOptions Action<QuickieOptions> Delegate to configure quickie option. Returns IServiceCollection IServiceCollection"
  },
  "_site/api/Quickie.Configuration.QuickieOptions.html": {
    "href": "_site/api/Quickie.Configuration.QuickieOptions.html",
    "title": "Class QuickieOptions | Quickie",
    "keywords": "Class QuickieOptions Namespace Quickie.Configuration Assembly Quickie.dll Quickie options. public class QuickieOptions Inheritance object QuickieOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IdempotencyConfiguration Idempotency configuration public IdempotentConfiguration? IdempotencyConfiguration { get; set; } Property Value IdempotentConfiguration RateLimitingConfiguration Rate limit configuration public RateLimitConfiguration? RateLimitingConfiguration { get; set; } Property Value RateLimitConfiguration ShowCustomErrorMessage Instead of exception message, ResponseObj will be returning custom message. public bool ShowCustomErrorMessage { get; set; } Property Value bool"
  },
  "_site/api/Quickie.Configuration.html": {
    "href": "_site/api/Quickie.Configuration.html",
    "title": "Namespace Quickie.Configuration | Quickie",
    "keywords": "Namespace Quickie.Configuration Classes DependencyResolver Dependency resolver for data handlers. QuickieExtension Quickie extensions QuickieOptions Quickie options."
  },
  "_site/api/Quickie.DataHandlers.Crud.Definition.ICrudDataHandler-2.html": {
    "href": "_site/api/Quickie.DataHandlers.Crud.Definition.ICrudDataHandler-2.html",
    "title": "Interface ICrudDataHandler<TEntity, TIdType> | Quickie",
    "keywords": "Interface ICrudDataHandler<TEntity, TIdType> Namespace Quickie.DataHandlers.Crud.Definition Assembly Quickie.dll public interface ICrudDataHandler<TEntity, in TIdType> where TEntity : CrudEntity where TIdType : IComparable Type Parameters TEntity TIdType Methods CreateAsync(TEntity, CancellationToken?) Task<ResponseObj<TEntity>> CreateAsync(TEntity request, CancellationToken? cancellationToken) Parameters request TEntity cancellationToken CancellationToken? Returns Task<ResponseObj<TEntity>> DeleteAsync(TIdType, CancellationToken?) Task<ResponseObj> DeleteAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType cancellationToken CancellationToken? Returns Task<ResponseObj> GetByIdAsync(TIdType, CancellationToken?) Task<ResponseObj<TEntity>> GetByIdAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType cancellationToken CancellationToken? Returns Task<ResponseObj<TEntity>> UpdateAsync(TIdType, TEntity, CancellationToken?) Task<ResponseObj<TEntity>> UpdateAsync(TIdType id, TEntity request, CancellationToken? cancellationToken = null) Parameters id TIdType request TEntity cancellationToken CancellationToken? Returns Task<ResponseObj<TEntity>>"
  },
  "_site/api/Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler-2.html": {
    "href": "_site/api/Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler-2.html",
    "title": "Interface ICrudForCollectionDataHandler<TEntity, TIdType> | Quickie",
    "keywords": "Interface ICrudForCollectionDataHandler<TEntity, TIdType> Namespace Quickie.DataHandlers.Crud.Definition Assembly Quickie.dll public interface ICrudForCollectionDataHandler<TEntity, TIdType> where TEntity : CrudEntity where TIdType : IComparable Type Parameters TEntity TIdType Methods CountAsync(CancellationToken?) Task<ResponseObj<int>> CountAsync(CancellationToken? cancellationToken = null) Parameters cancellationToken CancellationToken? Returns Task<ResponseObj<int>> CreateRangeAsync(ICollection<TEntity>, CancellationToken?) Task<ResponseObj<ICollection<TEntity>>> CreateRangeAsync(ICollection<TEntity> entities, CancellationToken? cancellationToken = null) Parameters entities ICollection<TEntity> cancellationToken CancellationToken? Returns Task<ResponseObj<ICollection<TEntity>>> DeleteRangeAsync(ICollection<TIdType>, CancellationToken?) Task<ResponseObj> DeleteRangeAsync(ICollection<TIdType> ids, CancellationToken? cancellationToken = null) Parameters ids ICollection<TIdType> cancellationToken CancellationToken? Returns Task<ResponseObj> GetAllAsync(RequestForDataObj, CancellationToken?) Task<ResponseObj<PaginatedDataObj<TEntity>>> GetAllAsync(RequestForDataObj request, CancellationToken? cancellationToken = null) Parameters request RequestForDataObj cancellationToken CancellationToken? Returns Task<ResponseObj<PaginatedDataObj<TEntity>>> UpdateRangeAsync(ICollection<TEntity>, CancellationToken?) Task<ResponseObj<ICollection<TEntity>>> UpdateRangeAsync(ICollection<TEntity> entities, CancellationToken? cancellationToken = null) Parameters entities ICollection<TEntity> cancellationToken CancellationToken? Returns Task<ResponseObj<ICollection<TEntity>>>"
  },
  "_site/api/Quickie.DataHandlers.Crud.Definition.html": {
    "href": "_site/api/Quickie.DataHandlers.Crud.Definition.html",
    "title": "Namespace Quickie.DataHandlers.Crud.Definition | Quickie",
    "keywords": "Namespace Quickie.DataHandlers.Crud.Definition Interfaces ICrudDataHandler<TEntity, TIdType> ICrudForCollectionDataHandler<TEntity, TIdType>"
  },
  "_site/api/Quickie.DataHandlers.Crud.Implementation.CrudDataHandler-3.html": {
    "href": "_site/api/Quickie.DataHandlers.Crud.Implementation.CrudDataHandler-3.html",
    "title": "Class CrudDataHandler<TEntity, TDbContext, TIdType> | Quickie",
    "keywords": "Class CrudDataHandler<TEntity, TDbContext, TIdType> Namespace Quickie.DataHandlers.Crud.Implementation Assembly Quickie.dll Abstract class serving as CRUD data handler (Repository layer). public abstract class CrudDataHandler<TEntity, TDbContext, TIdType> : ICrudDataHandler<TEntity, TIdType> where TEntity : CrudEntity where TDbContext : DbContext where TIdType : IComparable Type Parameters TEntity Entity TDbContext Db context TIdType Type of identifier. eg: int, string, ... Inheritance object CrudDataHandler<TEntity, TDbContext, TIdType> Implements ICrudDataHandler<TEntity, TIdType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudDataHandler(TDbContext) Abstract class serving as CRUD data handler (Repository layer). protected CrudDataHandler(TDbContext dbContext) Parameters dbContext TDbContext Db context Methods CreateAsync(TEntity, CancellationToken?) Data create request. public Task<ResponseObj<TEntity>> CreateAsync(TEntity request, CancellationToken? cancellationToken = null) Parameters request TEntity Data requested to create. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TEntity>> DeleteAsync(TIdType, CancellationToken?) Delete request. public Task<ResponseObj> DeleteAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier of the data to remove cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj> GetByIdAsync(TIdType, CancellationToken?) Get data by providing an identifier public Task<ResponseObj<TEntity>> GetByIdAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TEntity>> UpdateAsync(TIdType, TEntity, CancellationToken?) Update request. public Task<ResponseObj<TEntity>> UpdateAsync(TIdType id, TEntity request, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier request TEntity Requested data identifier. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TEntity>>"
  },
  "_site/api/Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler-3.html": {
    "href": "_site/api/Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler-3.html",
    "title": "Class CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext> | Quickie",
    "keywords": "Class CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext> Namespace Quickie.DataHandlers.Crud.Implementation Assembly Quickie.dll Abstract class serving as CRUD for collection request handler. public abstract class CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext> : ICrudForCollectionDataHandler<TEntity, TIdType> where TEntity : CrudEntity where TIdType : IComparable where TDbContext : DbContext Type Parameters TEntity Entity TIdType Type of identifier. eg: int, string, ... TDbContext Db context Inheritance object CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext> Implements ICrudForCollectionDataHandler<TEntity, TIdType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudForCollectionDataDataHandler(TDbContext) Abstract class serving as CRUD for collection request handler. protected CrudForCollectionDataDataHandler(TDbContext dbContext) Parameters dbContext TDbContext Db context Methods CountAsync(CancellationToken?) Count. public Task<ResponseObj<int>> CountAsync(CancellationToken? cancellationToken = null) Parameters cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<int>> CreateRangeAsync(ICollection<TEntity>, CancellationToken?) Data create request. public Task<ResponseObj<ICollection<TEntity>>> CreateRangeAsync(ICollection<TEntity> entities, CancellationToken? cancellationToken = null) Parameters entities ICollection<TEntity> Collection of data requested to create. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<ICollection<TEntity>>> DeleteRangeAsync(ICollection<TIdType>, CancellationToken?) Delete request. public Task<ResponseObj> DeleteRangeAsync(ICollection<TIdType> ids, CancellationToken? cancellationToken = null) Parameters ids ICollection<TIdType> Identifiers of the data to remove. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj> GetAllAsync(RequestForDataObj, CancellationToken?) Get data. public Task<ResponseObj<PaginatedDataObj<TEntity>>> GetAllAsync(RequestForDataObj request, CancellationToken? cancellationToken = null) Parameters request RequestForDataObj Data request filter cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<PaginatedDataObj<TEntity>>> UpdateRangeAsync(ICollection<TEntity>, CancellationToken?) Update request. public Task<ResponseObj<ICollection<TEntity>>> UpdateRangeAsync(ICollection<TEntity> entities, CancellationToken? cancellationToken = null) Parameters entities ICollection<TEntity> Requested collection data cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<ICollection<TEntity>>>"
  },
  "_site/api/Quickie.DataHandlers.Crud.Implementation.html": {
    "href": "_site/api/Quickie.DataHandlers.Crud.Implementation.html",
    "title": "Namespace Quickie.DataHandlers.Crud.Implementation | Quickie",
    "keywords": "Namespace Quickie.DataHandlers.Crud.Implementation Classes CrudDataHandler<TEntity, TDbContext, TIdType> Abstract class serving as CRUD data handler (Repository layer). CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext> Abstract class serving as CRUD for collection request handler."
  },
  "_site/api/Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler-2.html": {
    "href": "_site/api/Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler-2.html",
    "title": "Interface IEditOnlyDataHandler<TEntity, TIdType> | Quickie",
    "keywords": "Interface IEditOnlyDataHandler<TEntity, TIdType> Namespace Quickie.DataHandlers.Editonly.Definition Assembly Quickie.dll Defines operations to update entities public interface IEditOnlyDataHandler<TEntity, in TIdType> where TEntity : EditOnlyEntity where TIdType : IComparable Type Parameters TEntity Data to update. TIdType Type of id (int, Guid, string, ...) Methods EditAsync(TIdType, TEntity, CancellationToken?) Update single data. Task<ResponseObj<TEntity>> EditAsync(TIdType id, TEntity requestModel, CancellationToken? cancellationToken) Parameters id TIdType Identifier. requestModel TEntity Data to be updated. cancellationToken CancellationToken? Cancellation token. Returns Task<ResponseObj<TEntity>> EditCollectionAsync(ICollection<TEntity>, CancellationToken?) Update collection of data (bulk update). Task<ResponseObj<ICollection<TEntity>>> EditCollectionAsync(ICollection<TEntity> requestModels, CancellationToken? cancellationToken) Parameters requestModels ICollection<TEntity> Collection of entity. cancellationToken CancellationToken? Cancellation token. Returns Task<ResponseObj<ICollection<TEntity>>>"
  },
  "_site/api/Quickie.DataHandlers.Editonly.Definition.html": {
    "href": "_site/api/Quickie.DataHandlers.Editonly.Definition.html",
    "title": "Namespace Quickie.DataHandlers.Editonly.Definition | Quickie",
    "keywords": "Namespace Quickie.DataHandlers.Editonly.Definition Interfaces IEditOnlyDataHandler<TEntity, TIdType> Defines operations to update entities"
  },
  "_site/api/Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler-2.html": {
    "href": "_site/api/Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler-2.html",
    "title": "Class EditOnlyDataHandler<TEntity, TIdType> | Quickie",
    "keywords": "Class EditOnlyDataHandler<TEntity, TIdType> Namespace Quickie.DataHandlers.Editonly.Implementation Assembly Quickie.dll Abstract class serving as edit only data handler (Repository layer). public abstract class EditOnlyDataHandler<TEntity, TIdType> : IEditOnlyDataHandler<TEntity, TIdType> where TEntity : EditOnlyEntity where TIdType : IComparable Type Parameters TEntity Entity TIdType Type of identifier. eg: int, string, ... Inheritance object EditOnlyDataHandler<TEntity, TIdType> Implements IEditOnlyDataHandler<TEntity, TIdType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EditOnlyDataHandler(DbContext) Abstract class serving as edit only data handler (Repository layer). protected EditOnlyDataHandler(DbContext dbContext) Parameters dbContext DbContext Db context Methods EditAsync(TIdType, TEntity, CancellationToken?) Update request. public Task<ResponseObj<TEntity>> EditAsync(TIdType id, TEntity requestModel, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier of the entity requestModel TEntity Requested data to update cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TEntity>> EditCollectionAsync(ICollection<TEntity>, CancellationToken?) Update collection of data. public Task<ResponseObj<ICollection<TEntity>>> EditCollectionAsync(ICollection<TEntity> requestModels, CancellationToken? cancellationToken = null) Parameters requestModels ICollection<TEntity> Collection of requested data to update cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<ICollection<TEntity>>>"
  },
  "_site/api/Quickie.DataHandlers.Editonly.Implementation.html": {
    "href": "_site/api/Quickie.DataHandlers.Editonly.Implementation.html",
    "title": "Namespace Quickie.DataHandlers.Editonly.Implementation | Quickie",
    "keywords": "Namespace Quickie.DataHandlers.Editonly.Implementation Classes EditOnlyDataHandler<TEntity, TIdType> Abstract class serving as edit only data handler (Repository layer)."
  },
  "_site/api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler-2.html": {
    "href": "_site/api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler-2.html",
    "title": "Interface IReadOnlyCollectionDataHandler<TEntity, TIdType> | Quickie",
    "keywords": "Interface IReadOnlyCollectionDataHandler<TEntity, TIdType> Namespace Quickie.DataHandlers.Readonly.Definition Assembly Quickie.dll Defines read-only data access operations for collections of entities. Provides methods to retrieve data with optional filtering and pagination. public interface IReadOnlyCollectionDataHandler<TEntity, in TIdType> where TEntity : ReadOnlyEntity where TIdType : IComparable Type Parameters TEntity The type of entity to do read-only operations. TIdType Type of id (int, Guid, string, ...) Methods GetByFilterAsync<TRequestModel>(Expression<Func<TEntity, bool>>?, TRequestModel?, bool?, CancellationToken?) Get a paginated collection of entities that match the specified filter. Task<PaginatedDataObj<TEntity>> GetByFilterAsync<TRequestModel>(Expression<Func<TEntity, bool>>? filter, TRequestModel? request, bool? track = false, CancellationToken? cancellationToken = null) where TRequestModel : RequestForDataObj Parameters filter Expression<Func<TEntity, bool>> A predicate function to define your condition. request TRequestModel The pagination request object. track bool? A flag indicating whether to track changes for the retrieved entities. Set to false to disable change tracking for read-only queries. Default is false. cancellationToken CancellationToken? Cancellation token. Returns Task<PaginatedDataObj<TEntity>> Paginated data. Type Parameters TRequestModel"
  },
  "_site/api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html": {
    "href": "_site/api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html",
    "title": "Interface IReadOnlyDataHandler<TEntity, TIdType> | Quickie",
    "keywords": "Interface IReadOnlyDataHandler<TEntity, TIdType> Namespace Quickie.DataHandlers.Readonly.Definition Assembly Quickie.dll Read-only data handler (Repository). public interface IReadOnlyDataHandler<TEntity, in TIdType> where TEntity : ReadOnlyEntity Type Parameters TEntity Entity TIdType Type of id (int, Guid, string, ...) Methods GetByIdAsync(TIdType, CancellationToken?) Get data by id. (ID must be primary key or composite key.) Task<TEntity?> GetByIdAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType Unique identifier. cancellationToken CancellationToken? Cancellation token. Returns Task<TEntity> Entity object."
  },
  "_site/api/Quickie.DataHandlers.Readonly.Definition.html": {
    "href": "_site/api/Quickie.DataHandlers.Readonly.Definition.html",
    "title": "Namespace Quickie.DataHandlers.Readonly.Definition | Quickie",
    "keywords": "Namespace Quickie.DataHandlers.Readonly.Definition Interfaces IReadOnlyCollectionDataHandler<TEntity, TIdType> Defines read-only data access operations for collections of entities. Provides methods to retrieve data with optional filtering and pagination. IReadOnlyDataHandler<TEntity, TIdType> Read-only data handler (Repository)."
  },
  "_site/api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler-3.html": {
    "href": "_site/api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler-3.html",
    "title": "Class ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType> | Quickie",
    "keywords": "Class ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType> Namespace Quickie.DataHandlers.Readonly.Implementation Assembly Quickie.dll Abstract class serving as read only (collection) data handler (Repository layer). public abstract class ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType> : IReadOnlyCollectionDataHandler<TEntity, TIdType> where TEntity : ReadOnlyEntity where TDbContext : DbContext where TIdType : IComparable Type Parameters TEntity Entity TDbContext Db Context TIdType Type of identifier. eg: int, string, ... Inheritance object ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType> Implements IReadOnlyCollectionDataHandler<TEntity, TIdType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyCollectionDataHandler(DbContext) Abstract class serving as read only (collection) data handler (Repository layer). protected ReadOnlyCollectionDataHandler(DbContext context) Parameters context DbContext Db Context Methods GetByFilterAsync<TRequestModel>(Expression<Func<TEntity, bool>>?, TRequestModel?, bool?, CancellationToken?) Get filtered collection of data. public Task<PaginatedDataObj<TEntity>> GetByFilterAsync<TRequestModel>(Expression<Func<TEntity, bool>>? filter, TRequestModel? request, bool? track = false, CancellationToken? cancellationToken = null) where TRequestModel : RequestForDataObj Parameters filter Expression<Func<TEntity, bool>> Data request filter request TRequestModel Data request filter track bool? Track entity? Default is false cancellationToken CancellationToken? Cancellation token Returns Task<PaginatedDataObj<TEntity>> Type Parameters TRequestModel Type of data request filter"
  },
  "_site/api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler-3.html": {
    "href": "_site/api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler-3.html",
    "title": "Class ReadOnlyDataHandler<TEntity, TDbContext, TIdType> | Quickie",
    "keywords": "Class ReadOnlyDataHandler<TEntity, TDbContext, TIdType> Namespace Quickie.DataHandlers.Readonly.Implementation Assembly Quickie.dll Abstract base class for handling read-only data requests. public abstract class ReadOnlyDataHandler<TEntity, TDbContext, TIdType> : IReadOnlyDataHandler<TEntity, TIdType> where TEntity : ReadOnlyEntity where TDbContext : DbContext where TIdType : IComparable Type Parameters TEntity Entity TDbContext Db context TIdType Type of identifier. eg: int, string, ... Inheritance object ReadOnlyDataHandler<TEntity, TDbContext, TIdType> Implements IReadOnlyDataHandler<TEntity, TIdType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyDataHandler(DbContext) Abstract base class for handling read-only data requests. protected ReadOnlyDataHandler(DbContext context) Parameters context DbContext Db context Methods GetByIdAsync(TIdType, CancellationToken?) Get data by id. public Task<TEntity?> GetByIdAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier (unique key identifying your entity) cancellationToken CancellationToken? Cancellation token Returns Task<TEntity>"
  },
  "_site/api/Quickie.DataHandlers.Readonly.Implementation.html": {
    "href": "_site/api/Quickie.DataHandlers.Readonly.Implementation.html",
    "title": "Namespace Quickie.DataHandlers.Readonly.Implementation | Quickie",
    "keywords": "Namespace Quickie.DataHandlers.Readonly.Implementation Classes ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType> Abstract class serving as read only (collection) data handler (Repository layer). ReadOnlyDataHandler<TEntity, TDbContext, TIdType> Abstract base class for handling read-only data requests."
  },
  "_site/api/Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html": {
    "href": "_site/api/Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html",
    "title": "Interface IWriteOnlyDataHandler<TEntity> | Quickie",
    "keywords": "Interface IWriteOnlyDataHandler<TEntity> Namespace Quickie.DataHandlers.Writeonly.Definition Assembly Quickie.dll public interface IWriteOnlyDataHandler<TEntity> where TEntity : WriteOnlyEntity Type Parameters TEntity Methods CreateItemAsync(TEntity, CancellationToken?) Task<ResponseObj<TEntity>> CreateItemAsync(TEntity item, CancellationToken? cancellationToken) Parameters item TEntity cancellationToken CancellationToken? Returns Task<ResponseObj<TEntity>> CreateItemsAsync(ICollection<TEntity>, CancellationToken?) Task<ResponseObj<ICollection<TEntity>>> CreateItemsAsync(ICollection<TEntity> items, CancellationToken? cancellationToken) Parameters items ICollection<TEntity> cancellationToken CancellationToken? Returns Task<ResponseObj<ICollection<TEntity>>>"
  },
  "_site/api/Quickie.DataHandlers.Writeonly.Definition.html": {
    "href": "_site/api/Quickie.DataHandlers.Writeonly.Definition.html",
    "title": "Namespace Quickie.DataHandlers.Writeonly.Definition | Quickie",
    "keywords": "Namespace Quickie.DataHandlers.Writeonly.Definition Interfaces IWriteOnlyDataHandler<TEntity>"
  },
  "_site/api/Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler-2.html": {
    "href": "_site/api/Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler-2.html",
    "title": "Class WriteOnlyDataHandler<TEntity, TDbContext> | Quickie",
    "keywords": "Class WriteOnlyDataHandler<TEntity, TDbContext> Namespace Quickie.DataHandlers.Writeonly.Implementation Assembly Quickie.dll Abstract class serving as write only data handler (Repository layer). public abstract class WriteOnlyDataHandler<TEntity, TDbContext> : IWriteOnlyDataHandler<TEntity> where TEntity : WriteOnlyEntity where TDbContext : DbContext Type Parameters TEntity Entity TDbContext Db context Inheritance object WriteOnlyDataHandler<TEntity, TDbContext> Implements IWriteOnlyDataHandler<TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WriteOnlyDataHandler(TDbContext) Abstract class serving as write only data handler (Repository layer). protected WriteOnlyDataHandler(TDbContext dbContext) Parameters dbContext TDbContext Db context Methods CreateItemAsync(TEntity, CancellationToken?) Data create request. public Task<ResponseObj<TEntity>> CreateItemAsync(TEntity item, CancellationToken? cancellationToken = null) Parameters item TEntity Data requested to create cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TEntity>> CreateItemsAsync(ICollection<TEntity>, CancellationToken?) Collection of data create request. public Task<ResponseObj<ICollection<TEntity>>> CreateItemsAsync(ICollection<TEntity> items, CancellationToken? cancellationToken = null) Parameters items ICollection<TEntity> Collection of data requested to create cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<ICollection<TEntity>>>"
  },
  "_site/api/Quickie.DataHandlers.Writeonly.Implementation.html": {
    "href": "_site/api/Quickie.DataHandlers.Writeonly.Implementation.html",
    "title": "Namespace Quickie.DataHandlers.Writeonly.Implementation | Quickie",
    "keywords": "Namespace Quickie.DataHandlers.Writeonly.Implementation Classes WriteOnlyDataHandler<TEntity, TDbContext> Abstract class serving as write only data handler (Repository layer)."
  },
  "_site/api/Quickie.DataObj.DetailedResponseObj.html": {
    "href": "_site/api/Quickie.DataObj.DetailedResponseObj.html",
    "title": "Class DetailedResponseObj | Quickie",
    "keywords": "Class DetailedResponseObj Namespace Quickie.DataObj Assembly Quickie.dll Represents a detailed response object used to return results from an operation. public class DetailedResponseObj Inheritance object DetailedResponseObj Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Detailed description that explains the response such as troubleshooting information or guidance. public string Description { get; set; } Property Value string ErrorStatus Status of the error or response, indicating the severity of the result. public ErrorStatusEnum ErrorStatus { get; set; } Property Value ErrorStatusEnum Message Short message that provides high-level information about the response. Can be used like \"title\" of your detailed error description. public string Message { get; set; } Property Value string Show Value indicating whether to show the response. public bool Show { get; set; } Property Value bool"
  },
  "_site/api/Quickie.DataObj.PaginatedDataObj-1.html": {
    "href": "_site/api/Quickie.DataObj.PaginatedDataObj-1.html",
    "title": "Class PaginatedDataObj<TObject> | Quickie",
    "keywords": "Class PaginatedDataObj<TObject> Namespace Quickie.DataObj Assembly Quickie.dll Represents an object for paginated data and its metadata. public class PaginatedDataObj<TObject> where TObject : class Type Parameters TObject Inheritance object PaginatedDataObj<TObject> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Items Collection of data public IEnumerable<TObject> Items { get; set; } Property Value IEnumerable<TObject> Total Total no. of data. public int Total { get; set; } Property Value int"
  },
  "_site/api/Quickie.DataObj.RequestForDataObj.html": {
    "href": "_site/api/Quickie.DataObj.RequestForDataObj.html",
    "title": "Class RequestForDataObj | Quickie",
    "keywords": "Class RequestForDataObj Namespace Quickie.DataObj Assembly Quickie.dll Represents a request for data with pagination. public class RequestForDataObj Inheritance object RequestForDataObj Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PageNumber The page number to retrieve. Default is 1. public int PageNumber { get; set; } Property Value int PageSize The number of items to retrieve per page. Default is 10. public int PageSize { get; set; } Property Value int"
  },
  "_site/api/Quickie.DataObj.ResponseObj-1.html": {
    "href": "_site/api/Quickie.DataObj.ResponseObj-1.html",
    "title": "Class ResponseObj<TData> | Quickie",
    "keywords": "Class ResponseObj<TData> Namespace Quickie.DataObj Assembly Quickie.dll Represents a response object that contains the result of an operation along with the data. public class ResponseObj<TData> Type Parameters TData Data. Inheritance object ResponseObj<TData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data Data returned as a result of the operation. public TData Data { get; set; } Property Value TData IsSuccess Value indicating whether the operation was successful. \"true\" meaning operation has succeeded and \"false\" meaning operation has failed. public bool IsSuccess { get; set; } Property Value bool Message Message providing additional information about the operation's result. public string Message { get; set; } Property Value string"
  },
  "_site/api/Quickie.DataObj.ResponseObj.html": {
    "href": "_site/api/Quickie.DataObj.ResponseObj.html",
    "title": "Class ResponseObj | Quickie",
    "keywords": "Class ResponseObj Namespace Quickie.DataObj Assembly Quickie.dll Represents a basic response object that contains information about the success of an operation. public class ResponseObj Inheritance object ResponseObj Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsSuccess Value indicating whether the operation was successful. \"true\" meaning operation has succeeded and \"false\" meaning operation has failed. public bool IsSuccess { get; set; } Property Value bool Message Message providing additional information about the operation's result. public string Message { get; set; } Property Value string"
  },
  "_site/api/Quickie.DataObj.html": {
    "href": "_site/api/Quickie.DataObj.html",
    "title": "Namespace Quickie.DataObj | Quickie",
    "keywords": "Namespace Quickie.DataObj Classes DetailedResponseObj Represents a detailed response object used to return results from an operation. PaginatedDataObj<TObject> Represents an object for paginated data and its metadata. RequestForDataObj Represents a request for data with pagination. ResponseObj Represents a basic response object that contains information about the success of an operation. ResponseObj<TData> Represents a response object that contains the result of an operation along with the data."
  },
  "_site/api/Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler-2.html": {
    "href": "_site/api/Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler-2.html",
    "title": "Interface ICrudForCollectionRequestHandler<TViewModel, TIdType> | Quickie",
    "keywords": "Interface ICrudForCollectionRequestHandler<TViewModel, TIdType> Namespace Quickie.Handlers.Crud.Definition Assembly Quickie.dll public interface ICrudForCollectionRequestHandler<TViewModel, TIdType> where TViewModel : CrudDto where TIdType : IComparable Type Parameters TViewModel TIdType Methods CountAsync(CancellationToken?) Task<ResponseObj<int>> CountAsync(CancellationToken? cancellationToken = null) Parameters cancellationToken CancellationToken? Returns Task<ResponseObj<int>> CreateRangeAsync(ICollection<TViewModel>, CancellationToken?) Task<ResponseObj<ICollection<TViewModel>>> CreateRangeAsync(ICollection<TViewModel> entities, CancellationToken? cancellationToken = null) Parameters entities ICollection<TViewModel> cancellationToken CancellationToken? Returns Task<ResponseObj<ICollection<TViewModel>>> DeleteRangeAsync(ICollection<TIdType>, CancellationToken?) Task<ResponseObj> DeleteRangeAsync(ICollection<TIdType> ids, CancellationToken? cancellationToken = null) Parameters ids ICollection<TIdType> cancellationToken CancellationToken? Returns Task<ResponseObj> GetAllAsync(RequestForDataObj, CancellationToken?) Task<ResponseObj<PaginatedDataObj<TViewModel>>> GetAllAsync(RequestForDataObj request, CancellationToken? cancellationToken = null) Parameters request RequestForDataObj cancellationToken CancellationToken? Returns Task<ResponseObj<PaginatedDataObj<TViewModel>>> UpdateRangeAsync(ICollection<TViewModel>, CancellationToken?) Task<ResponseObj<ICollection<TViewModel>>> UpdateRangeAsync(ICollection<TViewModel> entities, CancellationToken? cancellationToken = null) Parameters entities ICollection<TViewModel> cancellationToken CancellationToken? Returns Task<ResponseObj<ICollection<TViewModel>>>"
  },
  "_site/api/Quickie.Handlers.Crud.Definition.ICrudRequestHandler-2.html": {
    "href": "_site/api/Quickie.Handlers.Crud.Definition.ICrudRequestHandler-2.html",
    "title": "Interface ICrudRequestHandler<TViewModel, TIdType> | Quickie",
    "keywords": "Interface ICrudRequestHandler<TViewModel, TIdType> Namespace Quickie.Handlers.Crud.Definition Assembly Quickie.dll Abstract base class for CRUD operation. Contains method to: Create, Update, Read (GET), and Delete. public interface ICrudRequestHandler<TViewModel, in TIdType> where TViewModel : CrudDto where TIdType : IComparable Type Parameters TViewModel TIdType Type of the identifier used in methods (string, int, Guid, ...) Methods CreateAsync(TViewModel, CancellationToken?) Create data. Task<ResponseObj<TViewModel>> CreateAsync(TViewModel request, CancellationToken? cancellationToken) Parameters request TViewModel Requested data to be created. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TViewModel>> Response object. DeleteAsync(TIdType, CancellationToken?) Removes data. Task<ResponseObj> DeleteAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier of data to be removed cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj> Response object GetByIdAsync(TIdType, CancellationToken?) Get data by id (unique identifier, a pk). Task<ResponseObj<TViewModel>> GetByIdAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TViewModel>> Response object with data. UpdateAsync(TIdType, TViewModel, CancellationToken?) Update requested data. Task<ResponseObj<TViewModel>> UpdateAsync(TIdType id, TViewModel request, CancellationToken? cancellationToken = null) Parameters id TIdType Data identifier to update. request TViewModel Data requested to be updated. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TViewModel>> Response object with updated data."
  },
  "_site/api/Quickie.Handlers.Crud.Definition.html": {
    "href": "_site/api/Quickie.Handlers.Crud.Definition.html",
    "title": "Namespace Quickie.Handlers.Crud.Definition | Quickie",
    "keywords": "Namespace Quickie.Handlers.Crud.Definition Interfaces ICrudForCollectionRequestHandler<TViewModel, TIdType> ICrudRequestHandler<TViewModel, TIdType> Abstract base class for CRUD operation. Contains method to: Create, Update, Read (GET), and Delete."
  },
  "_site/api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html": {
    "href": "_site/api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html",
    "title": "Class CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> | Quickie",
    "keywords": "Class CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Namespace Quickie.Handlers.Crud.Implementation Assembly Quickie.dll Abstract class serving as CRUD for collection request handler. public abstract class CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> : ICrudForCollectionRequestHandler<TViewModel, TIdType> where TViewModel : CrudDto where TEntity : CrudEntity where TDataHandler : ICrudForCollectionDataHandler<TEntity, TIdType> where TIdType : IComparable Type Parameters TViewModel View model or dto TEntity Entity TDataHandler Data handler (repository layer) TIdType Type of identifier. eg: int, string, ... Inheritance object CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Implements ICrudForCollectionRequestHandler<TViewModel, TIdType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudForCollectionRequestHandler(TDataHandler) Abstract class serving as CRUD for collection request handler. protected CrudForCollectionRequestHandler(TDataHandler dataHandler) Parameters dataHandler TDataHandler Data Methods CountAsync(CancellationToken?) Count. public Task<ResponseObj<int>> CountAsync(CancellationToken? cancellationToken = null) Parameters cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<int>> CreateRangeAsync(ICollection<TViewModel>, CancellationToken?) Data create request. public Task<ResponseObj<ICollection<TViewModel>>> CreateRangeAsync(ICollection<TViewModel> entities, CancellationToken? cancellationToken = null) Parameters entities ICollection<TViewModel> Collection of data requested to create. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<ICollection<TViewModel>>> DeleteRangeAsync(ICollection<TIdType>, CancellationToken?) Delete request. public Task<ResponseObj> DeleteRangeAsync(ICollection<TIdType> ids, CancellationToken? cancellationToken = null) Parameters ids ICollection<TIdType> Identifiers of the data to remove. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj> GetAllAsync(RequestForDataObj, CancellationToken?) Get data. public Task<ResponseObj<PaginatedDataObj<TViewModel>>> GetAllAsync(RequestForDataObj request, CancellationToken? cancellationToken = null) Parameters request RequestForDataObj Data request filter cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<PaginatedDataObj<TViewModel>>> MapToCollectionOfDto(ICollection<TEntity>) Maps a collection of TEntity to a collection of TViewModel dto. protected abstract ICollection<TViewModel> MapToCollectionOfDto(ICollection<TEntity> entity) Parameters entity ICollection<TEntity> Returns ICollection<TViewModel> MapToCollectionOfEntity(ICollection<TViewModel>) Maps a collection of TViewModel to a collection of TEntity entity. protected abstract ICollection<TEntity> MapToCollectionOfEntity(ICollection<TViewModel> entity) Parameters entity ICollection<TViewModel> Returns ICollection<TEntity> UpdateRangeAsync(ICollection<TViewModel>, CancellationToken?) Update request. public Task<ResponseObj<ICollection<TViewModel>>> UpdateRangeAsync(ICollection<TViewModel> entities, CancellationToken? cancellationToken = null) Parameters entities ICollection<TViewModel> Requested collection data cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<ICollection<TViewModel>>>"
  },
  "_site/api/Quickie.Handlers.Crud.Implementation.CrudRequestHandler-4.html": {
    "href": "_site/api/Quickie.Handlers.Crud.Implementation.CrudRequestHandler-4.html",
    "title": "Class CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> | Quickie",
    "keywords": "Class CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Namespace Quickie.Handlers.Crud.Implementation Assembly Quickie.dll Abstract class serving as CRUD request handler. public abstract class CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> : ICrudRequestHandler<TViewModel, TIdType> where TViewModel : CrudDto where TEntity : CrudEntity where TDataHandler : ICrudDataHandler<TEntity, TIdType> where TIdType : IComparable Type Parameters TViewModel View model or dto TEntity Entity TDataHandler Data handler (repository layer) TIdType Type of identifier. eg: int, string, ... Inheritance object CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Implements ICrudRequestHandler<TViewModel, TIdType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudRequestHandler(ICrudDataHandler<TEntity, TIdType>) Abstract class serving as CRUD request handler. protected CrudRequestHandler(ICrudDataHandler<TEntity, TIdType> dataHandler) Parameters dataHandler ICrudDataHandler<TEntity, TIdType> Data handler (repository layer) Methods CreateAsync(TViewModel, CancellationToken?) Data create request. public Task<ResponseObj<TViewModel>> CreateAsync(TViewModel request, CancellationToken? cancellationToken = null) Parameters request TViewModel Data requested to create. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TViewModel>> DeleteAsync(TIdType, CancellationToken?) Delete request. public Task<ResponseObj> DeleteAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier of the data to remove. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj> Exceptions ArgumentException GetByIdAsync(TIdType, CancellationToken?) Get data by providing an identifier public Task<ResponseObj<TViewModel>> GetByIdAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TViewModel>> Exceptions ArgumentException MapToDto(TEntity) Maps a TEntity to a TViewModel dto. protected abstract TViewModel MapToDto(TEntity request) Parameters request TEntity Entity Returns TViewModel Dto MapToEntity(TViewModel) Maps a TViewModel to a TEntity entity. protected abstract TEntity MapToEntity(TViewModel request) Parameters request TViewModel Dto Returns TEntity Entity UpdateAsync(TIdType, TViewModel, CancellationToken?) Update request. public Task<ResponseObj<TViewModel>> UpdateAsync(TIdType id, TViewModel request, CancellationToken? cancellationToken = null) Parameters id TIdType Requested data identifier. request TViewModel Requested data cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TViewModel>>"
  },
  "_site/api/Quickie.Handlers.Crud.Implementation.html": {
    "href": "_site/api/Quickie.Handlers.Crud.Implementation.html",
    "title": "Namespace Quickie.Handlers.Crud.Implementation | Quickie",
    "keywords": "Namespace Quickie.Handlers.Crud.Implementation Classes CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Abstract class serving as CRUD for collection request handler. CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Abstract class serving as CRUD request handler."
  },
  "_site/api/Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler-2.html": {
    "href": "_site/api/Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler-2.html",
    "title": "Interface IEditOnlyRequestHandler<TViewModel, TIdType> | Quickie",
    "keywords": "Interface IEditOnlyRequestHandler<TViewModel, TIdType> Namespace Quickie.Handlers.Editonly.Definition Assembly Quickie.dll Abstract base class for handling update requests, processing operations for the specified view model type. public interface IEditOnlyRequestHandler<TViewModel, in TIdType> where TViewModel : EditOnlyDto where TIdType : IComparable Type Parameters TViewModel The type of the view model that represents the data transfer object to be updated. TIdType Type of id (int, string, guid, ...) Methods EditAsync(TIdType, TViewModel, CancellationToken?) Update single entity. Task<ResponseObj<TViewModel>> EditAsync(TIdType id, TViewModel requestModel, CancellationToken? cancellationToken) Parameters id TIdType Identifier of the entity. requestModel TViewModel Data to be updated. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TViewModel>> EditCollectionAsync(ICollection<TViewModel>, CancellationToken?) Update collection of entity. (Bulk) Task<ResponseObj<ICollection<TViewModel>>> EditCollectionAsync(ICollection<TViewModel> requestModels, CancellationToken? cancellationToken) Parameters requestModels ICollection<TViewModel> Bulk data to be updated. cancellationToken CancellationToken? Cancellation token. Returns Task<ResponseObj<ICollection<TViewModel>>>"
  },
  "_site/api/Quickie.Handlers.Editonly.Definition.html": {
    "href": "_site/api/Quickie.Handlers.Editonly.Definition.html",
    "title": "Namespace Quickie.Handlers.Editonly.Definition | Quickie",
    "keywords": "Namespace Quickie.Handlers.Editonly.Definition Interfaces IEditOnlyRequestHandler<TViewModel, TIdType> Abstract base class for handling update requests, processing operations for the specified view model type."
  },
  "_site/api/Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler-4.html": {
    "href": "_site/api/Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler-4.html",
    "title": "Class EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> | Quickie",
    "keywords": "Class EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Namespace Quickie.Handlers.Editonly.Implementation Assembly Quickie.dll Abstract class serving as edit only request handler. public abstract class EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> : IEditOnlyRequestHandler<TViewModel, TIdType> where TViewModel : EditOnlyDto where TEntity : EditOnlyEntity where TDataHandler : IEditOnlyDataHandler<TEntity, TIdType> where TIdType : IComparable Type Parameters TViewModel View model or dto TEntity Entity TDataHandler Data handler (Repository layer) TIdType Type of identifier. eg: int, string, ... Inheritance object EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Implements IEditOnlyRequestHandler<TViewModel, TIdType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EditOnlyRequestHandler(IEditOnlyDataHandler<TEntity, TIdType>) Abstract class serving as edit only request handler. protected EditOnlyRequestHandler(IEditOnlyDataHandler<TEntity, TIdType> dataHandler) Parameters dataHandler IEditOnlyDataHandler<TEntity, TIdType> Data handler (Repository layer) Methods EditAsync(TIdType, TViewModel, CancellationToken?) Update request. public Task<ResponseObj<TViewModel>> EditAsync(TIdType id, TViewModel requestModel, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier of the entity. requestModel TViewModel Requested data to update cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TViewModel>> EditCollectionAsync(ICollection<TViewModel>, CancellationToken?) Update collection of data. public Task<ResponseObj<ICollection<TViewModel>>> EditCollectionAsync(ICollection<TViewModel> requestModels, CancellationToken? cancellationToken = null) Parameters requestModels ICollection<TViewModel> Collection of requested data to update cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<ICollection<TViewModel>>> MapToCollectionOfDto(ICollection<TEntity>) Maps a collection of TEntity entities to a collection of TViewModel view models. protected abstract ICollection<TViewModel> MapToCollectionOfDto(ICollection<TEntity> entities) Parameters entities ICollection<TEntity> Collection of entity. Returns ICollection<TViewModel> Collection of view model/dto. MapToCollectionOfEntity(ICollection<TViewModel>) Maps a collection of TViewModel to a collection of TEntity entities. protected abstract ICollection<TEntity> MapToCollectionOfEntity(ICollection<TViewModel> requestModels) Parameters requestModels ICollection<TViewModel> Collection of view model/dto Returns ICollection<TEntity> Collection of entity. MapToDto(TEntity) Maps a TEntity entity to a TViewModel view model/dto. protected abstract TViewModel MapToDto(TEntity entity) Parameters entity TEntity Entity. Returns TViewModel View model/dto. MapToEntity(TViewModel) Maps a TViewModel to a TEntity entity. protected abstract TEntity MapToEntity(TViewModel requestModel) Parameters requestModel TViewModel The view model/dto to map to an entity Returns TEntity Entity."
  },
  "_site/api/Quickie.Handlers.Editonly.Implementation.html": {
    "href": "_site/api/Quickie.Handlers.Editonly.Implementation.html",
    "title": "Namespace Quickie.Handlers.Editonly.Implementation | Quickie",
    "keywords": "Namespace Quickie.Handlers.Editonly.Implementation Classes EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Abstract class serving as edit only request handler."
  },
  "_site/api/Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-2.html": {
    "href": "_site/api/Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-2.html",
    "title": "Interface IReadOnlyCollectionRequestHandler<TViewModel, TIdType> | Quickie",
    "keywords": "Interface IReadOnlyCollectionRequestHandler<TViewModel, TIdType> Namespace Quickie.Handlers.Readonly.Definition Assembly Quickie.dll Abstract base class for handling collections of read-only requests, processing operations for the specified view model type. public interface IReadOnlyCollectionRequestHandler<TViewModel, in TIdType> where TViewModel : ReadOnlyDto where TIdType : IComparable Type Parameters TViewModel The type of the view model that represents the data transfer object for read-only operations. TIdType Type of id (int, Guid, string, ...) Methods GetAsync<TRequestModel>(TRequestModel?, CancellationToken?) Get collection of data by provided request model. Task<PaginatedDataObj<TViewModel>> GetAsync<TRequestModel>(TRequestModel? request, CancellationToken? cancellationToken) where TRequestModel : RequestForDataObj Parameters request TRequestModel Data request model of type RequestForDataDto. cancellationToken CancellationToken? Cancellation token. Returns Task<PaginatedDataObj<TViewModel>> Collection of data wrapped by response dto. Type Parameters TRequestModel"
  },
  "_site/api/Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-2.html": {
    "href": "_site/api/Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-2.html",
    "title": "Interface IReadOnlyRequestHandler<TViewModel, TIdType> | Quickie",
    "keywords": "Interface IReadOnlyRequestHandler<TViewModel, TIdType> Namespace Quickie.Handlers.Readonly.Definition Assembly Quickie.dll Abstract base class for handling read-only requests, processing operations for the specified view model type. public interface IReadOnlyRequestHandler<TViewModel, in TIdType> where TViewModel : ReadOnlyDto where TIdType : IComparable Type Parameters TViewModel The type of the view model that represents the data transfer object for read-only operations. TIdType Type of id (int, Guid, string, ...) Methods GetByIdAsync(TIdType, CancellationToken?) Get exact data (single) by id. Task<ResponseObj<TViewModel>> GetByIdAsync(TIdType id, CancellationToken? cancellationToken) Parameters id TIdType Identifier of data. cancellationToken CancellationToken? Cancellation token. Returns Task<ResponseObj<TViewModel>> Single data wrapped by response dto."
  },
  "_site/api/Quickie.Handlers.Readonly.Definition.html": {
    "href": "_site/api/Quickie.Handlers.Readonly.Definition.html",
    "title": "Namespace Quickie.Handlers.Readonly.Definition | Quickie",
    "keywords": "Namespace Quickie.Handlers.Readonly.Definition Interfaces IReadOnlyCollectionRequestHandler<TViewModel, TIdType> Abstract base class for handling collections of read-only requests, processing operations for the specified view model type. IReadOnlyRequestHandler<TViewModel, TIdType> Abstract base class for handling read-only requests, processing operations for the specified view model type."
  },
  "_site/api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-4.html": {
    "href": "_site/api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-4.html",
    "title": "Class ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> | Quickie",
    "keywords": "Class ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Namespace Quickie.Handlers.Readonly.Implementation Assembly Quickie.dll Abstract class serving as read only (collection) request handler. public abstract class ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> : IReadOnlyCollectionRequestHandler<TViewModel, TIdType> where TViewModel : ReadOnlyDto where TEntity : ReadOnlyEntity where TDataHandler : IReadOnlyCollectionDataHandler<TEntity, TIdType> where TIdType : IComparable Type Parameters TViewModel View model or dto TEntity Entity TDataHandler Data handler (Repository layer) TIdType Type of identifier. eg: int, string, ... Inheritance object ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Implements IReadOnlyCollectionRequestHandler<TViewModel, TIdType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyCollectionRequestHandler(IReadOnlyCollectionDataHandler<TEntity, TIdType>) Abstract class serving as read only (collection) request handler. protected ReadOnlyCollectionRequestHandler(IReadOnlyCollectionDataHandler<TEntity, TIdType> readOnlyCollectionDataHandler) Parameters readOnlyCollectionDataHandler IReadOnlyCollectionDataHandler<TEntity, TIdType> Data handler (Repository layer) Methods GetAsync<TRequestModel>(TRequestModel?, CancellationToken?) Get data. public Task<PaginatedDataObj<TViewModel>> GetAsync<TRequestModel>(TRequestModel? request, CancellationToken? cancellationToken = null) where TRequestModel : RequestForDataObj Parameters request TRequestModel Data request filter cancellationToken CancellationToken? Cancellation token Returns Task<PaginatedDataObj<TViewModel>> Type Parameters TRequestModel Type of data request filter MapToDto(ICollection<TEntity>) Mapping profile. Map from collection of Entity type to your collection of data transfer object. protected abstract ICollection<TViewModel> MapToDto(ICollection<TEntity> entity) Parameters entity ICollection<TEntity> Collection of entity object. Returns ICollection<TViewModel> Mapped from collection of Entity, a collection data transfer object."
  },
  "_site/api/Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-4.html": {
    "href": "_site/api/Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-4.html",
    "title": "Class ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> | Quickie",
    "keywords": "Class ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Namespace Quickie.Handlers.Readonly.Implementation Assembly Quickie.dll Abstract base class for handling read-only requests, processing operations for the specified view model type. public abstract class ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> : IReadOnlyRequestHandler<TViewModel, TIdType> where TViewModel : ReadOnlyDto where TEntity : ReadOnlyEntity where TDataHandler : IReadOnlyDataHandler<TEntity, TIdType> where TIdType : IComparable Type Parameters TViewModel The type of the view model that represents the data transfer object for read-only operations. TEntity Entity. TDataHandler Data handler (Repository) TIdType Type of identifier. eg: int, string, ... Inheritance object ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Implements IReadOnlyRequestHandler<TViewModel, TIdType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyRequestHandler(IReadOnlyDataHandler<TEntity, TIdType>) Abstract base class for handling read-only requests, processing operations for the specified view model type. protected ReadOnlyRequestHandler(IReadOnlyDataHandler<TEntity, TIdType> dataHandler) Parameters dataHandler IReadOnlyDataHandler<TEntity, TIdType> Methods GetByIdAsync(TIdType, CancellationToken?) Get data by id. public Task<ResponseObj<TViewModel>> GetByIdAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier (unique key identifying your entity) cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TViewModel>> Exceptions ArgumentException MapToDto(TEntity) Mapping profile. Map from Entity type to your data transfer object. protected abstract TViewModel MapToDto(TEntity entity) Parameters entity TEntity Entity object. Returns TViewModel Mapped from Entity, a data transfer object."
  },
  "_site/api/Quickie.Handlers.Readonly.Implementation.html": {
    "href": "_site/api/Quickie.Handlers.Readonly.Implementation.html",
    "title": "Namespace Quickie.Handlers.Readonly.Implementation | Quickie",
    "keywords": "Namespace Quickie.Handlers.Readonly.Implementation Classes ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Abstract class serving as read only (collection) request handler. ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Abstract base class for handling read-only requests, processing operations for the specified view model type."
  },
  "_site/api/Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler-1.html": {
    "href": "_site/api/Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler-1.html",
    "title": "Interface IWriteOnlyRequestHandler<TViewModel> | Quickie",
    "keywords": "Interface IWriteOnlyRequestHandler<TViewModel> Namespace Quickie.Handlers.Writeonly.Definition Assembly Quickie.dll public interface IWriteOnlyRequestHandler<TViewModel> where TViewModel : WriteOnlyDto Type Parameters TViewModel Methods CreateItemAsync(TViewModel, CancellationToken?) Task<ResponseObj<TViewModel>> CreateItemAsync(TViewModel item, CancellationToken? cancellationToken) Parameters item TViewModel cancellationToken CancellationToken? Returns Task<ResponseObj<TViewModel>> CreateItemsAsync(ICollection<TViewModel>, CancellationToken?) Task<ResponseObj<ICollection<TViewModel>>> CreateItemsAsync(ICollection<TViewModel> items, CancellationToken? cancellationToken) Parameters items ICollection<TViewModel> cancellationToken CancellationToken? Returns Task<ResponseObj<ICollection<TViewModel>>>"
  },
  "_site/api/Quickie.Handlers.Writeonly.Definition.html": {
    "href": "_site/api/Quickie.Handlers.Writeonly.Definition.html",
    "title": "Namespace Quickie.Handlers.Writeonly.Definition | Quickie",
    "keywords": "Namespace Quickie.Handlers.Writeonly.Definition Interfaces IWriteOnlyRequestHandler<TViewModel>"
  },
  "_site/api/Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler-3.html": {
    "href": "_site/api/Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler-3.html",
    "title": "Class WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler> | Quickie",
    "keywords": "Class WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler> Namespace Quickie.Handlers.Writeonly.Implementation Assembly Quickie.dll Abstract class serving as write only request handler. public abstract class WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler> : IWriteOnlyRequestHandler<TViewModel> where TViewModel : WriteOnlyDto where TEntity : WriteOnlyEntity where TDataHandler : IWriteOnlyDataHandler<TEntity> Type Parameters TViewModel TEntity TDataHandler Inheritance object WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler> Implements IWriteOnlyRequestHandler<TViewModel> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WriteOnlyRequestHandler(IWriteOnlyDataHandler<TEntity>) Abstract class serving as write only request handler. protected WriteOnlyRequestHandler(IWriteOnlyDataHandler<TEntity> dataHandler) Parameters dataHandler IWriteOnlyDataHandler<TEntity> Methods CreateItemAsync(TViewModel, CancellationToken?) Data create request. public Task<ResponseObj<TViewModel>> CreateItemAsync(TViewModel item, CancellationToken? cancellationToken) Parameters item TViewModel Data requested to create. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TViewModel>> CreateItemsAsync(ICollection<TViewModel>, CancellationToken?) Data create request. public Task<ResponseObj<ICollection<TViewModel>>> CreateItemsAsync(ICollection<TViewModel> items, CancellationToken? cancellationToken) Parameters items ICollection<TViewModel> Collection of data requested to create. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<ICollection<TViewModel>>> MapToCollectionOfDto(ICollection<TEntity>) Maps a collection of TEntity entities to a collection of TViewModel view models. protected abstract ICollection<TViewModel> MapToCollectionOfDto(ICollection<TEntity> entities) Parameters entities ICollection<TEntity> Collection of entity. Returns ICollection<TViewModel> Collection of view model/dto. MapToCollectionOfEntity(ICollection<TViewModel>) Maps a collection of TViewModel to a collection of TEntity entities. protected abstract ICollection<TEntity> MapToCollectionOfEntity(ICollection<TViewModel> requestModels) Parameters requestModels ICollection<TViewModel> Collection of view model/dto Returns ICollection<TEntity> Collection of entity. MapToDto(TEntity) Maps a TEntity entity to a TViewModel view model/dto. protected abstract TViewModel MapToDto(TEntity entity) Parameters entity TEntity Entity. Returns TViewModel View model/dto. MapToEntity(TViewModel) Maps a TViewModel to a TEntity entity. protected abstract TEntity MapToEntity(TViewModel requestModel) Parameters requestModel TViewModel The view model/dto to map to an entity Returns TEntity Entity."
  },
  "_site/api/Quickie.Handlers.Writeonly.Implementation.html": {
    "href": "_site/api/Quickie.Handlers.Writeonly.Implementation.html",
    "title": "Namespace Quickie.Handlers.Writeonly.Implementation | Quickie",
    "keywords": "Namespace Quickie.Handlers.Writeonly.Implementation Classes WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler> Abstract class serving as write only request handler."
  },
  "_site/api/Quickie.Types.Crud.CrudDto.html": {
    "href": "_site/api/Quickie.Types.Crud.CrudDto.html",
    "title": "Class CrudDto | Quickie",
    "keywords": "Class CrudDto Namespace Quickie.Types.Crud Assembly Quickie.dll Dto representing CRUD operation public abstract record CrudDto : IEquatable<CrudDto> Inheritance object CrudDto Implements IEquatable<CrudDto> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudDto() Dto representing CRUD operation protected CrudDto()"
  },
  "_site/api/Quickie.Types.Crud.CrudEntity.html": {
    "href": "_site/api/Quickie.Types.Crud.CrudEntity.html",
    "title": "Class CrudEntity | Quickie",
    "keywords": "Class CrudEntity Namespace Quickie.Types.Crud Assembly Quickie.dll Entity representing CRUD operation public abstract class CrudEntity Inheritance object CrudEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "_site/api/Quickie.Types.Crud.html": {
    "href": "_site/api/Quickie.Types.Crud.html",
    "title": "Namespace Quickie.Types.Crud | Quickie",
    "keywords": "Namespace Quickie.Types.Crud Classes CrudDto Dto representing CRUD operation CrudEntity Entity representing CRUD operation"
  },
  "_site/api/Quickie.Types.Editonly.EditOnlyDto.html": {
    "href": "_site/api/Quickie.Types.Editonly.EditOnlyDto.html",
    "title": "Class EditOnlyDto | Quickie",
    "keywords": "Class EditOnlyDto Namespace Quickie.Types.Editonly Assembly Quickie.dll Dto representing EDIT only operation public abstract record EditOnlyDto : IEquatable<EditOnlyDto> Inheritance object EditOnlyDto Implements IEquatable<EditOnlyDto> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EditOnlyDto() Dto representing EDIT only operation protected EditOnlyDto()"
  },
  "_site/api/Quickie.Types.Editonly.EditOnlyEntity.html": {
    "href": "_site/api/Quickie.Types.Editonly.EditOnlyEntity.html",
    "title": "Class EditOnlyEntity | Quickie",
    "keywords": "Class EditOnlyEntity Namespace Quickie.Types.Editonly Assembly Quickie.dll Entity representing EDIT only operation public abstract class EditOnlyEntity Inheritance object EditOnlyEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EditOnlyEntity() Entity representing EDIT only operation protected EditOnlyEntity()"
  },
  "_site/api/Quickie.Types.Editonly.html": {
    "href": "_site/api/Quickie.Types.Editonly.html",
    "title": "Namespace Quickie.Types.Editonly | Quickie",
    "keywords": "Namespace Quickie.Types.Editonly Classes EditOnlyDto Dto representing EDIT only operation EditOnlyEntity Entity representing EDIT only operation"
  },
  "_site/api/Quickie.Types.ErrorStatusEnum.html": {
    "href": "_site/api/Quickie.Types.ErrorStatusEnum.html",
    "title": "Enum ErrorStatusEnum | Quickie",
    "keywords": "Enum ErrorStatusEnum Namespace Quickie.Types Assembly Quickie.dll Status representing the different severity levels of an error or message. public enum ErrorStatusEnum Fields Critical = 2 Represents critical errors that require immediate attention. These typically indicate a failure or something that must be fixed for the application to function properly. Info = 0 Represents informational messages that do not indicate any issues. These are typically non-critical and meant for logging or user information. Warning = 1 Represents warning messages that indicate potential issues. These require attention but do not block the operation or indicate a failure."
  },
  "_site/api/Quickie.Types.Readonly.ReadOnlyDto.html": {
    "href": "_site/api/Quickie.Types.Readonly.ReadOnlyDto.html",
    "title": "Class ReadOnlyDto | Quickie",
    "keywords": "Class ReadOnlyDto Namespace Quickie.Types.Readonly Assembly Quickie.dll Dto representing READ only operation public abstract record ReadOnlyDto : IEquatable<ReadOnlyDto> Inheritance object ReadOnlyDto Implements IEquatable<ReadOnlyDto> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyDto() Dto representing READ only operation protected ReadOnlyDto()"
  },
  "_site/api/Quickie.Types.Readonly.ReadOnlyEntity.html": {
    "href": "_site/api/Quickie.Types.Readonly.ReadOnlyEntity.html",
    "title": "Class ReadOnlyEntity | Quickie",
    "keywords": "Class ReadOnlyEntity Namespace Quickie.Types.Readonly Assembly Quickie.dll Entity representing READ only operation public abstract class ReadOnlyEntity Inheritance object ReadOnlyEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "_site/api/Quickie.Types.Readonly.html": {
    "href": "_site/api/Quickie.Types.Readonly.html",
    "title": "Namespace Quickie.Types.Readonly | Quickie",
    "keywords": "Namespace Quickie.Types.Readonly Classes ReadOnlyDto Dto representing READ only operation ReadOnlyEntity Entity representing READ only operation"
  },
  "_site/api/Quickie.Types.Writable.WriteOnlyDto.html": {
    "href": "_site/api/Quickie.Types.Writable.WriteOnlyDto.html",
    "title": "Class WriteOnlyDto | Quickie",
    "keywords": "Class WriteOnlyDto Namespace Quickie.Types.Writable Assembly Quickie.dll Dto representing WRITE only operation public record WriteOnlyDto : IEquatable<WriteOnlyDto> Inheritance object WriteOnlyDto Implements IEquatable<WriteOnlyDto> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WriteOnlyDto() Dto representing WRITE only operation public WriteOnlyDto()"
  },
  "_site/api/Quickie.Types.Writable.WriteOnlyEntity.html": {
    "href": "_site/api/Quickie.Types.Writable.WriteOnlyEntity.html",
    "title": "Class WriteOnlyEntity | Quickie",
    "keywords": "Class WriteOnlyEntity Namespace Quickie.Types.Writable Assembly Quickie.dll Entity representing WRITE only operation public abstract class WriteOnlyEntity Inheritance object WriteOnlyEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "_site/api/Quickie.Types.Writable.html": {
    "href": "_site/api/Quickie.Types.Writable.html",
    "title": "Namespace Quickie.Types.Writable | Quickie",
    "keywords": "Namespace Quickie.Types.Writable Classes WriteOnlyDto Dto representing WRITE only operation WriteOnlyEntity Entity representing WRITE only operation"
  },
  "_site/api/Quickie.Types.html": {
    "href": "_site/api/Quickie.Types.html",
    "title": "Namespace Quickie.Types | Quickie",
    "keywords": "Namespace Quickie.Types Enums ErrorStatusEnum Status representing the different severity levels of an error or message."
  },
  "api/Quickie.Apis.Crud.CrudController-3.html": {
    "href": "api/Quickie.Apis.Crud.CrudController-3.html",
    "title": "Class CrudController<TViewModel, TRequestHandler, TIdType> | Quickie",
    "keywords": "Class CrudController<TViewModel, TRequestHandler, TIdType> Namespace Quickie.Apis.Crud Assembly Quickie.dll Base class providing CRUD apis. public class CrudController<TViewModel, TRequestHandler, TIdType> : QuickieBaseApi where TViewModel : CrudDto where TRequestHandler : ICrudRequestHandler<TViewModel, TIdType> where TIdType : IComparable Type Parameters TViewModel Dto. TRequestHandler Request handler (Service layer). TIdType Type of your primary key. Inheritance object ControllerBase QuickieBaseApi CrudController<TViewModel, TRequestHandler, TIdType> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudController(TRequestHandler) Base class providing CRUD apis. public CrudController(TRequestHandler requestHandler) Parameters requestHandler TRequestHandler Request handler (Service layer) Methods CreateAsync(string?, TViewModel, CancellationToken) Create data. [HttpPost] public Task<ActionResult<ResponseObj<TViewModel>>> CreateAsync(string? idempotencyKey, TViewModel request, CancellationToken cancellationToken = default) Parameters idempotencyKey string Idempotency key request TViewModel Requested data to create cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<TViewModel>>> HTTP 201 Created, or 400 BadRequest. DeleteAsync(TIdType, CancellationToken) Delete data [HttpDelete(\"{id}\")] public Task<ActionResult<ResponseObj>> DeleteAsync(TIdType id, CancellationToken cancellationToken = default) Parameters id TIdType Identifier of data cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj>> HTTP 204 NoContent or 400 BadRequest. GetByIdAsync(TIdType, CancellationToken) Get data by id. [HttpGet(\"{id}\")] public Task<ActionResult<ResponseObj<TViewModel>>> GetByIdAsync(TIdType id, CancellationToken cancellationToken = default) Parameters id TIdType Identifier cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<TViewModel>>> HTTP 200 Ok, 404 NotFound, or 400 BadRequest. UpdateAsync(TIdType, TViewModel, CancellationToken) Update data. [HttpPut(\"{id}\")] public Task<ActionResult<ResponseObj<TViewModel>>> UpdateAsync(TIdType id, TViewModel request, CancellationToken cancellationToken = default) Parameters id TIdType Identifier of data request TViewModel Requested data to update cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<TViewModel>>> HTTP 200 Ok, or 400 BadRequest."
  },
  "api/Quickie.Apis.Crud.CrudForCollectionController-3.html": {
    "href": "api/Quickie.Apis.Crud.CrudForCollectionController-3.html",
    "title": "Class CrudForCollectionController<TViewModel, TRequestHandler, TIdType> | Quickie",
    "keywords": "Class CrudForCollectionController<TViewModel, TRequestHandler, TIdType> Namespace Quickie.Apis.Crud Assembly Quickie.dll Base class providing CRUD apis in collection. public class CrudForCollectionController<TViewModel, TRequestHandler, TIdType> : QuickieBaseApi where TViewModel : CrudDto where TRequestHandler : ICrudForCollectionRequestHandler<TViewModel, TIdType> where TIdType : IComparable Type Parameters TViewModel Dto TRequestHandler Request handler (Service layer) TIdType Type of your primary key. Inheritance object ControllerBase QuickieBaseApi CrudForCollectionController<TViewModel, TRequestHandler, TIdType> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudForCollectionController(TRequestHandler) Base class providing CRUD apis in collection. public CrudForCollectionController(TRequestHandler requestHandler) Parameters requestHandler TRequestHandler Methods CountAsync(CancellationToken) Total count of data. [HttpGet(\"items/count\")] public Task<ActionResult<ResponseObj<int>>> CountAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<int>>> HTTP 200 Ok or 400 BadRequest. CreateAsync(string?, ICollection<TViewModel>, CancellationToken) Create collection of data. [HttpPost(\"items\")] public Task<ActionResult<ResponseObj<ICollection<TViewModel>>>> CreateAsync(string? idempotencyKey, ICollection<TViewModel> request, CancellationToken cancellationToken = default) Parameters idempotencyKey string Idempotency key. request ICollection<TViewModel> Requested data to create. cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<ICollection<TViewModel>>>> HTTP 201 Created, or 400 BadRequest. DeleteAsync(ICollection<TIdType>, CancellationToken) DELETE request for collection of data. [HttpDelete(\"items\")] public Task<ActionResult<ResponseObj>> DeleteAsync(ICollection<TIdType> ids, CancellationToken cancellationToken = default) Parameters ids ICollection<TIdType> Collection of id. cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj>> HTTP 204 NoContent or 400 BadRequest. GetAllAsync(RequestForDataObj, CancellationToken) Get all data. (Paginated) [HttpGet(\"items\")] public Task<ActionResult<ResponseObj<PaginatedDataObj<TViewModel>>>> GetAllAsync(RequestForDataObj request, CancellationToken cancellationToken = default) Parameters request RequestForDataObj Request object. cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<PaginatedDataObj<TViewModel>>>> HTTP 200 Ok, 404 NotFound, or 400 BadRequest. UpdateAsync(ICollection<TViewModel>, CancellationToken) Update collection of data. [HttpPut(\"items\")] public Task<ActionResult<ResponseObj<ICollection<TViewModel>>>> UpdateAsync(ICollection<TViewModel> request, CancellationToken cancellationToken = default) Parameters request ICollection<TViewModel> Requested data to update cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<ICollection<TViewModel>>>> HTTP 200 Ok, or 400 BadRequest."
  },
  "api/Quickie.Apis.Crud.html": {
    "href": "api/Quickie.Apis.Crud.html",
    "title": "Namespace Quickie.Apis.Crud | Quickie",
    "keywords": "Namespace Quickie.Apis.Crud Classes CrudController<TViewModel, TRequestHandler, TIdType> Base class providing CRUD apis. CrudForCollectionController<TViewModel, TRequestHandler, TIdType> Base class providing CRUD apis in collection."
  },
  "api/Quickie.Apis.CrudlController.html": {
    "href": "api/Quickie.Apis.CrudlController.html",
    "title": "Class CrudlController | Quickie",
    "keywords": "Class CrudlController Namespace Quickie.Apis Assembly Quickie.dll [ApiController] [Route(\"api/[controller]\")] public abstract class CrudlController : ControllerBase Inheritance object ControllerBase CrudlController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.User object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Quickie.Apis.Editonly.EditOnlyController-3.html": {
    "href": "api/Quickie.Apis.Editonly.EditOnlyController-3.html",
    "title": "Class EditOnlyController<TViewModel, TRequestHandler, TIdType> | Quickie",
    "keywords": "Class EditOnlyController<TViewModel, TRequestHandler, TIdType> Namespace Quickie.Apis.Editonly Assembly Quickie.dll Base class providing Edit-Only APIs. public class EditOnlyController<TViewModel, TRequestHandler, TIdType> : QuickieBaseApi where TViewModel : EditOnlyDto where TRequestHandler : IEditOnlyRequestHandler<TViewModel, TIdType> where TIdType : IComparable Type Parameters TViewModel Dto TRequestHandler Request handler (Service layer) TIdType Type of your primary key Inheritance object ControllerBase QuickieBaseApi EditOnlyController<TViewModel, TRequestHandler, TIdType> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EditOnlyController(IEditOnlyRequestHandler<TViewModel, TIdType>) Base class providing Edit-Only APIs. public EditOnlyController(IEditOnlyRequestHandler<TViewModel, TIdType> requestHandler) Parameters requestHandler IEditOnlyRequestHandler<TViewModel, TIdType> Methods EditAsync(TIdType, TViewModel, CancellationToken) Edit a single item. [HttpPut(\"{id}\")] public Task<ActionResult<ResponseObj<TViewModel>>> EditAsync(TIdType id, TViewModel requestModel, CancellationToken cancellationToken = default) Parameters id TIdType Identifier of the item requestModel TViewModel Data for editing cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<TViewModel>>> HTTP 200 Ok, or 400 BadRequest. EditCollectionAsync(ICollection<TViewModel>, CancellationToken) Edit a collection of items. [HttpPut(\"items\")] public Task<ActionResult<ResponseObj<ICollection<TViewModel>>>> EditCollectionAsync(ICollection<TViewModel> requestModels, CancellationToken cancellationToken = default) Parameters requestModels ICollection<TViewModel> Collection of items to edit cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<ICollection<TViewModel>>>> HTTP 200 Ok, or 400 BadRequest."
  },
  "api/Quickie.Apis.Editonly.html": {
    "href": "api/Quickie.Apis.Editonly.html",
    "title": "Namespace Quickie.Apis.Editonly | Quickie",
    "keywords": "Namespace Quickie.Apis.Editonly Classes EditOnlyController<TViewModel, TRequestHandler, TIdType> Base class providing Edit-Only APIs."
  },
  "api/Quickie.Apis.Readonly.ReadOnlyCollectionController-3.html": {
    "href": "api/Quickie.Apis.Readonly.ReadOnlyCollectionController-3.html",
    "title": "Class ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel> | Quickie",
    "keywords": "Class ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel> Namespace Quickie.Apis.Readonly Assembly Quickie.dll Abstract base class for read-only (GET) operations on data collections, utilizing a request handler to manage read operations. [ApiController] [Route(\"api/[controller]/collection/\")] public class ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel> : ControllerBase where TViewModel : ReadOnlyDto where TRequestHandler : IReadOnlyCollectionRequestHandler<TViewModel> where TRequestForDataModel : RequestForDataObj Type Parameters TViewModel The type of the view model that represents the data transfer object. TRequestHandler The type of the request handler that processes the read-only operations. TRequestForDataModel The type to provide request for collection of data. Inheritance object ControllerBase ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.User object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyCollectionController(TRequestHandler) Abstract base class for read-only (GET) operations on data collections, utilizing a request handler to manage read operations. public ReadOnlyCollectionController(TRequestHandler requestHandler) Parameters requestHandler TRequestHandler Methods GetAsync(TRequestForDataModel, CancellationToken) GET request based on some request. [HttpGet(\"items\")] public Task<PaginatedDataObj<TViewModel>> GetAsync(TRequestForDataModel request, CancellationToken cancellationToken = default) Parameters request TRequestForDataModel Data filtration and pagination request object. cancellationToken CancellationToken Cancellation token. Returns Task<PaginatedDataObj<TViewModel>> Paginated data. Exceptions HttpRequestException GetByIdAsync(long, TRequestForDataModel?, CancellationToken) GET request by providing id and request (optional). [HttpGet(\"{id:long}\")] public Task<PaginatedDataObj<TViewModel>> GetByIdAsync(long id, TRequestForDataModel? request, CancellationToken cancellationToken = default) Parameters id long Identifier. request TRequestForDataModel (Optional) Data filtration and pagination request object. cancellationToken CancellationToken Cancellation token. Returns Task<PaginatedDataObj<TViewModel>> Paginated data. Exceptions ArgumentException"
  },
  "api/Quickie.Apis.Readonly.ReadOnlyCollectionController-4.html": {
    "href": "api/Quickie.Apis.Readonly.ReadOnlyCollectionController-4.html",
    "title": "Class ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType> | Quickie",
    "keywords": "Class ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType> Namespace Quickie.Apis.Readonly Assembly Quickie.dll Abstract base class for read-only (GET) operations on data collections, utilizing a request handler to manage read operations. public class ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType> : QuickieBaseApi where TViewModel : ReadOnlyDto where TRequestHandler : IReadOnlyCollectionRequestHandler<TViewModel, TIdType> where TRequestForDataModel : RequestForDataObj where TIdType : IComparable Type Parameters TViewModel The type of the view model that represents the data transfer object. TRequestHandler The type of the request handler that processes the read-only operations. TRequestForDataModel The type to provide request for collection of data. TIdType Type of identifier (string, int, double, Guid, ...) Inheritance object ControllerBase QuickieBaseApi ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyCollectionController(TRequestHandler) Abstract base class for read-only (GET) operations on data collections, utilizing a request handler to manage read operations. public ReadOnlyCollectionController(TRequestHandler requestHandler) Parameters requestHandler TRequestHandler Methods GetAsync(TRequestForDataModel, CancellationToken) GET request based on some request. [HttpGet(\"items\")] public Task<ActionResult<PaginatedDataObj<TViewModel>>> GetAsync(TRequestForDataModel request, CancellationToken cancellationToken = default) Parameters request TRequestForDataModel Data filtration and pagination request object. cancellationToken CancellationToken Cancellation token. Returns Task<ActionResult<PaginatedDataObj<TViewModel>>> Paginated data with appropriate HTTP status codes."
  },
  "api/Quickie.Apis.Readonly.ReadOnlyController-2.html": {
    "href": "api/Quickie.Apis.Readonly.ReadOnlyController-2.html",
    "title": "Class ReadOnlyController<TViewModel, TRequestHandler> | Quickie",
    "keywords": "Class ReadOnlyController<TViewModel, TRequestHandler> Namespace Quickie.Apis.Readonly Assembly Quickie.dll Abstract base class for read-only (GETs) operations that utilize a request handler for managing read operations. [ApiController] [Route(\"api/[controller]\")] public abstract class ReadOnlyController<TViewModel, TRequestHandler> : ControllerBase where TViewModel : ReadOnlyDto where TRequestHandler : IReadOnlyRequestHandler<TViewModel> Type Parameters TViewModel The type of the view model that represents the data transfer object. TRequestHandler The type of the request handler that processes the read-only operations. Inheritance object ControllerBase ReadOnlyController<TViewModel, TRequestHandler> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.User object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyController(TRequestHandler) Abstract base class for read-only (GETs) operations that utilize a request handler for managing read operations. protected ReadOnlyController(TRequestHandler requestHandler) Parameters requestHandler TRequestHandler Methods GetByIdAsync(long, CancellationToken) [HttpGet(\"{id:long}\")] public Task<ResponseObj<TViewModel>> GetByIdAsync(long id, CancellationToken cancellationToken = default) Parameters id long cancellationToken CancellationToken Returns Task<ResponseObj<TViewModel>>"
  },
  "api/Quickie.Apis.Readonly.ReadOnlyController-3.html": {
    "href": "api/Quickie.Apis.Readonly.ReadOnlyController-3.html",
    "title": "Class ReadOnlyController<TViewModel, TRequestHandler, TIdType> | Quickie",
    "keywords": "Class ReadOnlyController<TViewModel, TRequestHandler, TIdType> Namespace Quickie.Apis.Readonly Assembly Quickie.dll Abstract base class for read-only (GETs) operations that utilize a request handler for managing read operations. public class ReadOnlyController<TViewModel, TRequestHandler, TIdType> : QuickieBaseApi where TViewModel : ReadOnlyDto where TRequestHandler : IReadOnlyRequestHandler<TViewModel, TIdType> where TIdType : IComparable Type Parameters TViewModel The type of the view model that represents the data transfer object. TRequestHandler The type of the request handler that processes the read-only operations. TIdType Type of identifier (string, int, double, Guid, ...). Inheritance object ControllerBase QuickieBaseApi ReadOnlyController<TViewModel, TRequestHandler, TIdType> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyController(TRequestHandler) Abstract base class for read-only (GETs) operations that utilize a request handler for managing read operations. public ReadOnlyController(TRequestHandler requestHandler) Parameters requestHandler TRequestHandler Methods GetByIdAsync(TIdType, CancellationToken) [HttpGet(\"{id}\")] public Task<ActionResult<ResponseObj<TViewModel>>> GetByIdAsync(TIdType id, CancellationToken cancellationToken = default) Parameters id TIdType cancellationToken CancellationToken Returns Task<ActionResult<ResponseObj<TViewModel>>>"
  },
  "api/Quickie.Apis.Readonly.html": {
    "href": "api/Quickie.Apis.Readonly.html",
    "title": "Namespace Quickie.Apis.Readonly | Quickie",
    "keywords": "Namespace Quickie.Apis.Readonly Classes ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType> Abstract base class for read-only (GET) operations on data collections, utilizing a request handler to manage read operations. ReadOnlyController<TViewModel, TRequestHandler, TIdType> Abstract base class for read-only (GETs) operations that utilize a request handler for managing read operations."
  },
  "api/Quickie.Apis.Writeonly.WriteOnlyController-2.html": {
    "href": "api/Quickie.Apis.Writeonly.WriteOnlyController-2.html",
    "title": "Class WriteOnlyController<TViewModel, TRequestHandler> | Quickie",
    "keywords": "Class WriteOnlyController<TViewModel, TRequestHandler> Namespace Quickie.Apis.Writeonly Assembly Quickie.dll public class WriteOnlyController<TViewModel, TRequestHandler> : QuickieBaseApi where TViewModel : WriteOnlyDto where TRequestHandler : IWriteOnlyRequestHandler<TViewModel> Type Parameters TViewModel TRequestHandler Inheritance object ControllerBase QuickieBaseApi WriteOnlyController<TViewModel, TRequestHandler> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WriteOnlyController(IWriteOnlyRequestHandler<TViewModel>) public WriteOnlyController(IWriteOnlyRequestHandler<TViewModel> requestHandler) Parameters requestHandler IWriteOnlyRequestHandler<TViewModel> Methods CreateItemAsync(string?, TViewModel, CancellationToken) Create a single item. [HttpPost] public Task<ActionResult<ResponseObj<TViewModel>>> CreateItemAsync(string? idempotencyKey, TViewModel request, CancellationToken cancellationToken = default) Parameters idempotencyKey string Idempotency key. request TViewModel Data to create cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<TViewModel>>> Response indicating success or failure of the operation. CreateItemsAsync(string?, ICollection<TViewModel>, CancellationToken) Create multiple items in bulk. [HttpPost(\"items\")] public Task<ActionResult<ResponseObj<ICollection<TViewModel>>>> CreateItemsAsync(string? idempotencyKey, ICollection<TViewModel> requests, CancellationToken cancellationToken = default) Parameters idempotencyKey string idempotency key requests ICollection<TViewModel> Requested data to create cancellationToken CancellationToken Cancellation token Returns Task<ActionResult<ResponseObj<ICollection<TViewModel>>>> Response indicating success or failure of the operation."
  },
  "api/Quickie.Apis.Writeonly.html": {
    "href": "api/Quickie.Apis.Writeonly.html",
    "title": "Namespace Quickie.Apis.Writeonly | Quickie",
    "keywords": "Namespace Quickie.Apis.Writeonly Classes WriteOnlyController<TViewModel, TRequestHandler>"
  },
  "api/Quickie.Apis.html": {
    "href": "api/Quickie.Apis.html",
    "title": "Namespace Quickie.Apis | Quickie",
    "keywords": "Namespace Quickie.Apis Classes CrudlController"
  },
  "api/Quickie.Base.QuickieBaseApi.html": {
    "href": "api/Quickie.Base.QuickieBaseApi.html",
    "title": "Class QuickieBaseApi | Quickie",
    "keywords": "Class QuickieBaseApi Namespace Quickie.Base Assembly Quickie.dll Ultimate base of quickie controllers (APIs) [EnableRateLimiting(\"Quickie-Rl-Policy\")] [ApiController] [Route(\"api/[controller]\")] [Produces(\"application/json\", new string[] { })] public abstract class QuickieBaseApi : ControllerBase Inheritance object ControllerBase QuickieBaseApi Derived CrudController<TViewModel, TRequestHandler, TIdType> CrudForCollectionController<TViewModel, TRequestHandler, TIdType> EditOnlyController<TViewModel, TRequestHandler, TIdType> ReadOnlyCollectionController<TViewModel, TRequestHandler, TRequestForDataModel, TIdType> ReadOnlyController<TViewModel, TRequestHandler, TIdType> WriteOnlyController<TViewModel, TRequestHandler> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Quickie.Base.html": {
    "href": "api/Quickie.Base.html",
    "title": "Namespace Quickie.Base | Quickie",
    "keywords": "Namespace Quickie.Base Classes QuickieBaseApi Ultimate base of quickie controllers (APIs)"
  },
  "api/Quickie.Configuration.DependencyResolver.html": {
    "href": "api/Quickie.Configuration.DependencyResolver.html",
    "title": "Class DependencyResolver | Quickie",
    "keywords": "Class DependencyResolver Namespace Quickie.Configuration Assembly Quickie.dll Dependency resolver for data handlers. public static class DependencyResolver Inheritance object DependencyResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddDataHandlersDependency(IServiceCollection) Add data handlers dependency. public static IServiceCollection AddDataHandlersDependency(this IServiceCollection services) Parameters services IServiceCollection Service collection Returns IServiceCollection"
  },
  "api/Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.html": {
    "href": "api/Quickie.Configuration.Idempotency.DefaultProvider.InMemoryIdempotencyProvider.html",
    "title": "Class InMemoryIdempotencyProvider | Quickie",
    "keywords": "Class InMemoryIdempotencyProvider Namespace Quickie.Configuration.Idempotency.DefaultProvider Assembly Quickie.dll Default InMemory idempotency provider public class InMemoryIdempotencyProvider : IIdempotencyProvider Inheritance object InMemoryIdempotencyProvider Implements IIdempotencyProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ExistsAsync(string) Asynchronous method synchronous operation(check in dictionary). public ValueTask<bool> ExistsAsync(string key) Parameters key string Key Returns ValueTask<bool> bool MarkAsync(string) Asynchronous method synchronous operation (add in dictionary). public ValueTask MarkAsync(string key) Parameters key string Returns ValueTask RemoveExpiredKeys() Remove expired api idempotency keys public ValueTask RemoveExpiredKeys() Returns ValueTask"
  },
  "api/Quickie.Configuration.Idempotency.DefaultProvider.html": {
    "href": "api/Quickie.Configuration.Idempotency.DefaultProvider.html",
    "title": "Namespace Quickie.Configuration.Idempotency.DefaultProvider | Quickie",
    "keywords": "Namespace Quickie.Configuration.Idempotency.DefaultProvider Classes InMemoryIdempotencyProvider Default InMemory idempotency provider"
  },
  "api/Quickie.Configuration.Idempotency.IIdempotencyProvider.html": {
    "href": "api/Quickie.Configuration.Idempotency.IIdempotencyProvider.html",
    "title": "Interface IIdempotencyProvider | Quickie",
    "keywords": "Interface IIdempotencyProvider Namespace Quickie.Configuration.Idempotency Assembly Quickie.dll Idempotency provider contract public interface IIdempotencyProvider Methods ExistsAsync(string) Check if the key is already used. ValueTask<bool> ExistsAsync(string key) Parameters key string Unique key Returns ValueTask<bool> whether the key is used or not. MarkAsync(string) Add and mark key as used. ValueTask MarkAsync(string key) Parameters key string Unique key Returns ValueTask a Task RemoveExpiredKeys() Remove idempotency keys. ValueTask RemoveExpiredKeys() Returns ValueTask"
  },
  "api/Quickie.Configuration.Idempotency.IdempotencyBackgroundService.html": {
    "href": "api/Quickie.Configuration.Idempotency.IdempotencyBackgroundService.html",
    "title": "Class IdempotencyBackgroundService | Quickie",
    "keywords": "Class IdempotencyBackgroundService Namespace Quickie.Configuration.Idempotency Assembly Quickie.dll Background service to remove expired idempotency key. public class IdempotencyBackgroundService : BackgroundService, IHostedService, IDisposable Inheritance object BackgroundService IdempotencyBackgroundService Implements IHostedService IDisposable Inherited Members BackgroundService.Dispose() BackgroundService.StartAsync(CancellationToken) BackgroundService.StopAsync(CancellationToken) BackgroundService.ExecuteTask object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IdempotencyBackgroundService(IIdempotencyProvider) Background service to remove expired idempotency key. public IdempotencyBackgroundService(IIdempotencyProvider idempotencyProvider) Parameters idempotencyProvider IIdempotencyProvider Methods ExecuteAsync(CancellationToken) This method is called when the IHostedService starts. The implementation should return a task that represents the lifetime of the long running operation(s) being performed. protected override Task ExecuteAsync(CancellationToken stoppingToken) Parameters stoppingToken CancellationToken Triggered when StopAsync(CancellationToken) is called. Returns Task A Task that represents the long running operations. Remarks See Worker Services in .NET for implementation guidelines."
  },
  "api/Quickie.Configuration.Idempotency.IdempotentConfiguration.html": {
    "href": "api/Quickie.Configuration.Idempotency.IdempotentConfiguration.html",
    "title": "Class IdempotentConfiguration | Quickie",
    "keywords": "Class IdempotentConfiguration Namespace Quickie.Configuration.Idempotency Assembly Quickie.dll public class IdempotentConfiguration Inheritance object IdempotentConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Enable Enable idempotency. By default, idempotency is false public bool Enable { get; set; } Property Value bool IdempotencyLifespan Lifespan of keys. By default, its 1 hour public TimeSpan IdempotencyLifespan { get; set; } Property Value TimeSpan Provider Your custom idempotency provider public IIdempotencyProvider? Provider { get; set; } Property Value IIdempotencyProvider RunBackgroundServiceEveryHour Run background service every x hour? By default, 1 hour [Range(0, 24)] public int RunBackgroundServiceEveryHour { get; set; } Property Value int"
  },
  "api/Quickie.Configuration.Idempotency.html": {
    "href": "api/Quickie.Configuration.Idempotency.html",
    "title": "Namespace Quickie.Configuration.Idempotency | Quickie",
    "keywords": "Namespace Quickie.Configuration.Idempotency Classes IdempotencyBackgroundService Background service to remove expired idempotency key. IdempotentConfiguration Interfaces IIdempotencyProvider Idempotency provider contract"
  },
  "api/Quickie.Configuration.Middleware.IdempotencyMiddleware.html": {
    "href": "api/Quickie.Configuration.Middleware.IdempotencyMiddleware.html",
    "title": "Class IdempotencyMiddleware | Quickie",
    "keywords": "Class IdempotencyMiddleware Namespace Quickie.Configuration.Middleware Assembly Quickie.dll Idempotency implementer middleware public class IdempotencyMiddleware Inheritance object IdempotencyMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IdempotencyMiddleware(IIdempotencyProvider, RequestDelegate) Idempotency implementer middleware public IdempotencyMiddleware(IIdempotencyProvider idempotencyProvider, RequestDelegate next) Parameters idempotencyProvider IIdempotencyProvider Idempotency provider next RequestDelegate Methods InvokeAsync(HttpContext) public Task InvokeAsync(HttpContext context) Parameters context HttpContext Returns Task"
  },
  "api/Quickie.Configuration.Middleware.html": {
    "href": "api/Quickie.Configuration.Middleware.html",
    "title": "Namespace Quickie.Configuration.Middleware | Quickie",
    "keywords": "Namespace Quickie.Configuration.Middleware Classes IdempotencyMiddleware Idempotency implementer middleware"
  },
  "api/Quickie.Configuration.Options.GlobalQuickieConfigData.html": {
    "href": "api/Quickie.Configuration.Options.GlobalQuickieConfigData.html",
    "title": "Class GlobalQuickieConfigData | Quickie",
    "keywords": "Class GlobalQuickieConfigData Namespace Quickie.Configuration.Options Assembly Quickie.dll Global configuration for Quickie library. Must be initialized once during application startup before any Quickie features are used. public static class GlobalQuickieConfigData Inheritance object GlobalQuickieConfigData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Options Configured Quickie options. public static QuickieOptions Options { get; } Property Value QuickieOptions Exceptions InvalidOperationException Methods Initialize(QuickieOptions) Initializes Quickie configuration. This method must be called once during application startup. public static void Initialize(QuickieOptions options) Parameters options QuickieOptions Configuration options Exceptions ArgumentNullException"
  },
  "api/Quickie.Configuration.Options.RateLimitConfiguration.html": {
    "href": "api/Quickie.Configuration.Options.RateLimitConfiguration.html",
    "title": "Class RateLimitConfiguration | Quickie",
    "keywords": "Class RateLimitConfiguration Namespace Quickie.Configuration.Options Assembly Quickie.dll Rate limit configuration. (ip based) public class RateLimitConfiguration Inheritance object RateLimitConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisableRateLimiting Disable rate limiting. By default, rate limiting is true. public bool DisableRateLimiting { get; set; } Property Value bool FromSeconds Duration (seconds) to block. Default is: 6 public int? FromSeconds { get; set; } Property Value int? PermitLimit Number of request. Default is: 1 request every 'FromSeconds' public int? PermitLimit { get; set; } Property Value int? PolicyName Name of rate limit policy. Default is \"Quickie-Rl-Policy\" public string? PolicyName { get; set; } Property Value string"
  },
  "api/Quickie.Configuration.Options.html": {
    "href": "api/Quickie.Configuration.Options.html",
    "title": "Namespace Quickie.Configuration.Options | Quickie",
    "keywords": "Namespace Quickie.Configuration.Options Classes GlobalQuickieConfigData Global configuration for Quickie library. Must be initialized once during application startup before any Quickie features are used. RateLimitConfiguration Rate limit configuration. (ip based)"
  },
  "api/Quickie.Configuration.QuickieExtension.html": {
    "href": "api/Quickie.Configuration.QuickieExtension.html",
    "title": "Class QuickieExtension | Quickie",
    "keywords": "Class QuickieExtension Namespace Quickie.Configuration Assembly Quickie.dll Quickie extensions public static class QuickieExtension Inheritance object QuickieExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddQuickie(IApplicationBuilder) Configures the application to use Quickie services and middleware based on provided options. public static IApplicationBuilder AddQuickie(this IApplicationBuilder app) Parameters app IApplicationBuilder Application request pipeline builder. Returns IApplicationBuilder IApplicationBuilder QuickieConfig(IServiceCollection, Action<QuickieOptions>?) Registers Quickie services in the DI container, including all custom services. public static IServiceCollection QuickieConfig(this IServiceCollection services, Action<QuickieOptions>? configureOptions = null) Parameters services IServiceCollection DI register and resolver. configureOptions Action<QuickieOptions> Delegate to configure quickie option. Returns IServiceCollection IServiceCollection"
  },
  "api/Quickie.Configuration.QuickieOptions.html": {
    "href": "api/Quickie.Configuration.QuickieOptions.html",
    "title": "Class QuickieOptions | Quickie",
    "keywords": "Class QuickieOptions Namespace Quickie.Configuration Assembly Quickie.dll Quickie options. public class QuickieOptions Inheritance object QuickieOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IdempotencyConfiguration Idempotency configuration public IdempotentConfiguration? IdempotencyConfiguration { get; set; } Property Value IdempotentConfiguration RateLimitingConfiguration Rate limit configuration public RateLimitConfiguration? RateLimitingConfiguration { get; set; } Property Value RateLimitConfiguration ShowCustomErrorMessage Instead of exception message, ResponseObj will be returning custom message. public bool ShowCustomErrorMessage { get; set; } Property Value bool"
  },
  "api/Quickie.Configuration.html": {
    "href": "api/Quickie.Configuration.html",
    "title": "Namespace Quickie.Configuration | Quickie",
    "keywords": "Namespace Quickie.Configuration Classes DependencyResolver Dependency resolver for data handlers. QuickieExtension Quickie extensions QuickieOptions Quickie options."
  },
  "api/Quickie.Controllers.Readonly.ReadOnlyController-2.html": {
    "href": "api/Quickie.Controllers.Readonly.ReadOnlyController-2.html",
    "title": "Class ReadOnlyController<TViewModel, TRequestHandler> | Quickie",
    "keywords": "Class ReadOnlyController<TViewModel, TRequestHandler> Namespace Quickie.Controllers.Readonly Assembly Quickie.dll Abstract base class for read-only (GETs) operations that utilize a request handler for managing read operations. public abstract class ReadOnlyController<TViewModel, TRequestHandler> : ControllerBase where TViewModel : ReadOnlyDto where TRequestHandler : ReadOnlyRequestHandler<TViewModel> Type Parameters TViewModel The type of the view model that represents the data transfer object. TRequestHandler The type of the request handler that processes the read-only operations. Inheritance object ControllerBase ReadOnlyController<TViewModel, TRequestHandler> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.User object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyController(TRequestHandler) Abstract base class for read-only (GETs) operations that utilize a request handler for managing read operations. protected ReadOnlyController(TRequestHandler requestHandler) Parameters requestHandler TRequestHandler"
  },
  "api/Quickie.Controllers.Readonly.html": {
    "href": "api/Quickie.Controllers.Readonly.html",
    "title": "Namespace Quickie.Controllers.Readonly | Quickie",
    "keywords": "Namespace Quickie.Controllers.Readonly Classes ReadOnlyController<TViewModel, TRequestHandler> Abstract base class for read-only (GETs) operations that utilize a request handler for managing read operations."
  },
  "api/Quickie.DataHandlers.Crud.Definition.ICrudDataHandler-2.html": {
    "href": "api/Quickie.DataHandlers.Crud.Definition.ICrudDataHandler-2.html",
    "title": "Interface ICrudDataHandler<TEntity, TIdType> | Quickie",
    "keywords": "Interface ICrudDataHandler<TEntity, TIdType> Namespace Quickie.DataHandlers.Crud.Definition Assembly Quickie.dll public interface ICrudDataHandler<TEntity, in TIdType> where TEntity : CrudEntity where TIdType : IComparable Type Parameters TEntity TIdType Methods CreateAsync(TEntity, CancellationToken?) Task<ResponseObj<TEntity>> CreateAsync(TEntity request, CancellationToken? cancellationToken) Parameters request TEntity cancellationToken CancellationToken? Returns Task<ResponseObj<TEntity>> DeleteAsync(TIdType, CancellationToken?) Task<ResponseObj> DeleteAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType cancellationToken CancellationToken? Returns Task<ResponseObj> GetByIdAsync(TIdType, CancellationToken?) Task<ResponseObj<TEntity>> GetByIdAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType cancellationToken CancellationToken? Returns Task<ResponseObj<TEntity>> UpdateAsync(TIdType, TEntity, CancellationToken?) Task<ResponseObj<TEntity>> UpdateAsync(TIdType id, TEntity request, CancellationToken? cancellationToken = null) Parameters id TIdType request TEntity cancellationToken CancellationToken? Returns Task<ResponseObj<TEntity>>"
  },
  "api/Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler-2.html": {
    "href": "api/Quickie.DataHandlers.Crud.Definition.ICrudForCollectionDataHandler-2.html",
    "title": "Interface ICrudForCollectionDataHandler<TEntity, TIdType> | Quickie",
    "keywords": "Interface ICrudForCollectionDataHandler<TEntity, TIdType> Namespace Quickie.DataHandlers.Crud.Definition Assembly Quickie.dll public interface ICrudForCollectionDataHandler<TEntity, TIdType> where TEntity : CrudEntity where TIdType : IComparable Type Parameters TEntity TIdType Methods CountAsync(CancellationToken?) Task<ResponseObj<int>> CountAsync(CancellationToken? cancellationToken = null) Parameters cancellationToken CancellationToken? Returns Task<ResponseObj<int>> CreateRangeAsync(ICollection<TEntity>, CancellationToken?) Task<ResponseObj<ICollection<TEntity>>> CreateRangeAsync(ICollection<TEntity> entities, CancellationToken? cancellationToken = null) Parameters entities ICollection<TEntity> cancellationToken CancellationToken? Returns Task<ResponseObj<ICollection<TEntity>>> DeleteRangeAsync(ICollection<TIdType>, CancellationToken?) Task<ResponseObj> DeleteRangeAsync(ICollection<TIdType> ids, CancellationToken? cancellationToken = null) Parameters ids ICollection<TIdType> cancellationToken CancellationToken? Returns Task<ResponseObj> GetAllAsync(RequestForDataObj, CancellationToken?) Task<ResponseObj<PaginatedDataObj<TEntity>>> GetAllAsync(RequestForDataObj request, CancellationToken? cancellationToken = null) Parameters request RequestForDataObj cancellationToken CancellationToken? Returns Task<ResponseObj<PaginatedDataObj<TEntity>>> UpdateRangeAsync(ICollection<TEntity>, CancellationToken?) Task<ResponseObj<ICollection<TEntity>>> UpdateRangeAsync(ICollection<TEntity> entities, CancellationToken? cancellationToken = null) Parameters entities ICollection<TEntity> cancellationToken CancellationToken? Returns Task<ResponseObj<ICollection<TEntity>>>"
  },
  "api/Quickie.DataHandlers.Crud.Definition.html": {
    "href": "api/Quickie.DataHandlers.Crud.Definition.html",
    "title": "Namespace Quickie.DataHandlers.Crud.Definition | Quickie",
    "keywords": "Namespace Quickie.DataHandlers.Crud.Definition Interfaces ICrudDataHandler<TEntity, TIdType> ICrudForCollectionDataHandler<TEntity, TIdType>"
  },
  "api/Quickie.DataHandlers.Crud.Implementation.CrudDataHandler-3.html": {
    "href": "api/Quickie.DataHandlers.Crud.Implementation.CrudDataHandler-3.html",
    "title": "Class CrudDataHandler<TEntity, TDbContext, TIdType> | Quickie",
    "keywords": "Class CrudDataHandler<TEntity, TDbContext, TIdType> Namespace Quickie.DataHandlers.Crud.Implementation Assembly Quickie.dll Abstract class serving as CRUD data handler (Repository layer). public abstract class CrudDataHandler<TEntity, TDbContext, TIdType> : ICrudDataHandler<TEntity, TIdType> where TEntity : CrudEntity where TDbContext : DbContext where TIdType : IComparable Type Parameters TEntity Entity TDbContext Db context TIdType Type of identifier. eg: int, string, ... Inheritance object CrudDataHandler<TEntity, TDbContext, TIdType> Implements ICrudDataHandler<TEntity, TIdType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudDataHandler(TDbContext) Abstract class serving as CRUD data handler (Repository layer). protected CrudDataHandler(TDbContext dbContext) Parameters dbContext TDbContext Db context Methods CreateAsync(TEntity, CancellationToken?) Data create request. public Task<ResponseObj<TEntity>> CreateAsync(TEntity request, CancellationToken? cancellationToken = null) Parameters request TEntity Data requested to create. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TEntity>> DeleteAsync(TIdType, CancellationToken?) Delete request. public Task<ResponseObj> DeleteAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier of the data to remove cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj> GetByIdAsync(TIdType, CancellationToken?) Get data by providing an identifier public Task<ResponseObj<TEntity>> GetByIdAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TEntity>> UpdateAsync(TIdType, TEntity, CancellationToken?) Update request. public Task<ResponseObj<TEntity>> UpdateAsync(TIdType id, TEntity request, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier request TEntity Requested data identifier. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TEntity>>"
  },
  "api/Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler-3.html": {
    "href": "api/Quickie.DataHandlers.Crud.Implementation.CrudForCollectionDataDataHandler-3.html",
    "title": "Class CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext> | Quickie",
    "keywords": "Class CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext> Namespace Quickie.DataHandlers.Crud.Implementation Assembly Quickie.dll Abstract class serving as CRUD for collection request handler. public abstract class CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext> : ICrudForCollectionDataHandler<TEntity, TIdType> where TEntity : CrudEntity where TIdType : IComparable where TDbContext : DbContext Type Parameters TEntity Entity TIdType Type of identifier. eg: int, string, ... TDbContext Db context Inheritance object CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext> Implements ICrudForCollectionDataHandler<TEntity, TIdType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudForCollectionDataDataHandler(TDbContext) Abstract class serving as CRUD for collection request handler. protected CrudForCollectionDataDataHandler(TDbContext dbContext) Parameters dbContext TDbContext Db context Methods CountAsync(CancellationToken?) Count. public Task<ResponseObj<int>> CountAsync(CancellationToken? cancellationToken = null) Parameters cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<int>> CreateRangeAsync(ICollection<TEntity>, CancellationToken?) Data create request. public Task<ResponseObj<ICollection<TEntity>>> CreateRangeAsync(ICollection<TEntity> entities, CancellationToken? cancellationToken = null) Parameters entities ICollection<TEntity> Collection of data requested to create. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<ICollection<TEntity>>> DeleteRangeAsync(ICollection<TIdType>, CancellationToken?) Delete request. public Task<ResponseObj> DeleteRangeAsync(ICollection<TIdType> ids, CancellationToken? cancellationToken = null) Parameters ids ICollection<TIdType> Identifiers of the data to remove. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj> GetAllAsync(RequestForDataObj, CancellationToken?) Get data. public Task<ResponseObj<PaginatedDataObj<TEntity>>> GetAllAsync(RequestForDataObj request, CancellationToken? cancellationToken = null) Parameters request RequestForDataObj Data request filter cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<PaginatedDataObj<TEntity>>> UpdateRangeAsync(ICollection<TEntity>, CancellationToken?) Update request. public Task<ResponseObj<ICollection<TEntity>>> UpdateRangeAsync(ICollection<TEntity> entities, CancellationToken? cancellationToken = null) Parameters entities ICollection<TEntity> Requested collection data cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<ICollection<TEntity>>>"
  },
  "api/Quickie.DataHandlers.Crud.Implementation.html": {
    "href": "api/Quickie.DataHandlers.Crud.Implementation.html",
    "title": "Namespace Quickie.DataHandlers.Crud.Implementation | Quickie",
    "keywords": "Namespace Quickie.DataHandlers.Crud.Implementation Classes CrudDataHandler<TEntity, TDbContext, TIdType> Abstract class serving as CRUD data handler (Repository layer). CrudForCollectionDataDataHandler<TEntity, TIdType, TDbContext> Abstract class serving as CRUD for collection request handler."
  },
  "api/Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler-2.html": {
    "href": "api/Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler-2.html",
    "title": "Interface IEditOnlyDataHandler<TEntity, TIdType> | Quickie",
    "keywords": "Interface IEditOnlyDataHandler<TEntity, TIdType> Namespace Quickie.DataHandlers.Editonly.Definition Assembly Quickie.dll Defines operations to update entities public interface IEditOnlyDataHandler<TEntity, in TIdType> where TEntity : EditOnlyEntity where TIdType : IComparable Type Parameters TEntity Data to update. TIdType Type of id (int, Guid, string, ...) Methods EditAsync(TIdType, TEntity, CancellationToken?) Update single data. Task<ResponseObj<TEntity>> EditAsync(TIdType id, TEntity requestModel, CancellationToken? cancellationToken) Parameters id TIdType Identifier. requestModel TEntity Data to be updated. cancellationToken CancellationToken? Cancellation token. Returns Task<ResponseObj<TEntity>> EditCollectionAsync(ICollection<TEntity>, CancellationToken?) Update collection of data (bulk update). Task<ResponseObj<ICollection<TEntity>>> EditCollectionAsync(ICollection<TEntity> requestModels, CancellationToken? cancellationToken) Parameters requestModels ICollection<TEntity> Collection of entity. cancellationToken CancellationToken? Cancellation token. Returns Task<ResponseObj<ICollection<TEntity>>>"
  },
  "api/Quickie.DataHandlers.Editonly.Definition.html": {
    "href": "api/Quickie.DataHandlers.Editonly.Definition.html",
    "title": "Namespace Quickie.DataHandlers.Editonly.Definition | Quickie",
    "keywords": "Namespace Quickie.DataHandlers.Editonly.Definition Interfaces IEditOnlyDataHandler<TEntity, TIdType> Defines operations to update entities"
  },
  "api/Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler-2.html": {
    "href": "api/Quickie.DataHandlers.Editonly.Implementation.EditOnlyDataHandler-2.html",
    "title": "Class EditOnlyDataHandler<TEntity, TIdType> | Quickie",
    "keywords": "Class EditOnlyDataHandler<TEntity, TIdType> Namespace Quickie.DataHandlers.Editonly.Implementation Assembly Quickie.dll Abstract class serving as edit only data handler (Repository layer). public abstract class EditOnlyDataHandler<TEntity, TIdType> : IEditOnlyDataHandler<TEntity, TIdType> where TEntity : EditOnlyEntity where TIdType : IComparable Type Parameters TEntity Entity TIdType Type of identifier. eg: int, string, ... Inheritance object EditOnlyDataHandler<TEntity, TIdType> Implements IEditOnlyDataHandler<TEntity, TIdType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EditOnlyDataHandler(DbContext) Abstract class serving as edit only data handler (Repository layer). protected EditOnlyDataHandler(DbContext dbContext) Parameters dbContext DbContext Db context Methods EditAsync(TIdType, TEntity, CancellationToken?) Update request. public Task<ResponseObj<TEntity>> EditAsync(TIdType id, TEntity requestModel, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier of the entity requestModel TEntity Requested data to update cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TEntity>> EditCollectionAsync(ICollection<TEntity>, CancellationToken?) Update collection of data. public Task<ResponseObj<ICollection<TEntity>>> EditCollectionAsync(ICollection<TEntity> requestModels, CancellationToken? cancellationToken = null) Parameters requestModels ICollection<TEntity> Collection of requested data to update cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<ICollection<TEntity>>>"
  },
  "api/Quickie.DataHandlers.Editonly.Implementation.html": {
    "href": "api/Quickie.DataHandlers.Editonly.Implementation.html",
    "title": "Namespace Quickie.DataHandlers.Editonly.Implementation | Quickie",
    "keywords": "Namespace Quickie.DataHandlers.Editonly.Implementation Classes EditOnlyDataHandler<TEntity, TIdType> Abstract class serving as edit only data handler (Repository layer)."
  },
  "api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler-1.html": {
    "href": "api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler-1.html",
    "title": "Interface IReadOnlyCollectionDataHandler<TEntity> | Quickie",
    "keywords": "Interface IReadOnlyCollectionDataHandler<TEntity> Namespace Quickie.DataHandlers.Readonly.Definition Assembly Quickie.dll Defines read-only data access operations for collections of entities. Provides methods to retrieve data with optional filtering and pagination. public interface IReadOnlyCollectionDataHandler<TEntity> where TEntity : ReadOnlyEntity Type Parameters TEntity The type of entity to do read-only operations. Methods GetByFilterAsync<TRequestModel>(Expression<Func<TEntity, bool>>, TRequestModel?, bool?, CancellationToken) Get a paginated collection of entities that match the specified filter. Task<PaginatedDataObj<TEntity>> GetByFilterAsync<TRequestModel>(Expression<Func<TEntity, bool>> filter, TRequestModel? request, bool? track = false, CancellationToken cancellationToken = default) where TRequestModel : RequestForDataObj Parameters filter Expression<Func<TEntity, bool>> A predicate function to define your condition. request TRequestModel The pagination request object. track bool? A flag indicating whether to track changes for the retrieved entities. Set to false to disable change tracking for read-only queries. Default is false. cancellationToken CancellationToken Cancellation token. Returns Task<PaginatedDataObj<TEntity>> Paginated data. Type Parameters TRequestModel GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, bool?, CancellationToken) Get a paginated collection of entities by a specific ID with optional pagination. Task<PaginatedDataObj<TEntity>> GetCollectionByIdAsync<TRequestModel>(long id, TRequestModel? request, bool? track = false, CancellationToken cancellationToken = default) where TRequestModel : RequestForDataObj Parameters id long Identifier (primary key). request TRequestModel The pagination request object. track bool? A flag indicating whether to track changes for the retrieved entities. Set to false to disable change tracking for read-only queries. Default is false. cancellationToken CancellationToken Cancellation token. Returns Task<PaginatedDataObj<TEntity>> Type Parameters TRequestModel"
  },
  "api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler-2.html": {
    "href": "api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler-2.html",
    "title": "Interface IReadOnlyCollectionDataHandler<TEntity, TIdType> | Quickie",
    "keywords": "Interface IReadOnlyCollectionDataHandler<TEntity, TIdType> Namespace Quickie.DataHandlers.Readonly.Definition Assembly Quickie.dll Defines read-only data access operations for collections of entities. Provides methods to retrieve data with optional filtering and pagination. public interface IReadOnlyCollectionDataHandler<TEntity, in TIdType> where TEntity : ReadOnlyEntity where TIdType : IComparable Type Parameters TEntity The type of entity to do read-only operations. TIdType Type of id (int, Guid, string, ...) Methods GetByFilterAsync<TRequestModel>(Expression<Func<TEntity, bool>>?, TRequestModel?, bool?, CancellationToken?) Get a paginated collection of entities that match the specified filter. Task<PaginatedDataObj<TEntity>> GetByFilterAsync<TRequestModel>(Expression<Func<TEntity, bool>>? filter, TRequestModel? request, bool? track = false, CancellationToken? cancellationToken = null) where TRequestModel : RequestForDataObj Parameters filter Expression<Func<TEntity, bool>> A predicate function to define your condition. request TRequestModel The pagination request object. track bool? A flag indicating whether to track changes for the retrieved entities. Set to false to disable change tracking for read-only queries. Default is false. cancellationToken CancellationToken? Cancellation token. Returns Task<PaginatedDataObj<TEntity>> Paginated data. Type Parameters TRequestModel"
  },
  "api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-1.html": {
    "href": "api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-1.html",
    "title": "Interface IReadOnlyDataHandler<TEntity> | Quickie",
    "keywords": "Interface IReadOnlyDataHandler<TEntity> Namespace Quickie.DataHandlers.Readonly.Definition Assembly Quickie.dll Read-only data handler (Repository). public interface IReadOnlyDataHandler<TEntity> where TEntity : ReadOnlyEntity Type Parameters TEntity Entity Methods GetByIdAsync(object, CancellationToken) Get data by id. (ID must be primary key or composite key.) Task<TEntity?> GetByIdAsync(object id, CancellationToken cancellationToken = default) Parameters id object Unique identifier. cancellationToken CancellationToken Cancellation token. Returns Task<TEntity> Entity object."
  },
  "api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html": {
    "href": "api/Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html",
    "title": "Interface IReadOnlyDataHandler<TEntity, TIdType> | Quickie",
    "keywords": "Interface IReadOnlyDataHandler<TEntity, TIdType> Namespace Quickie.DataHandlers.Readonly.Definition Assembly Quickie.dll Read-only data handler (Repository). public interface IReadOnlyDataHandler<TEntity, in TIdType> where TEntity : ReadOnlyEntity Type Parameters TEntity Entity TIdType Type of id (int, Guid, string, ...) Methods GetByIdAsync(TIdType, CancellationToken?) Get data by id. (ID must be primary key or composite key.) Task<TEntity?> GetByIdAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType Unique identifier. cancellationToken CancellationToken? Cancellation token. Returns Task<TEntity> Entity object."
  },
  "api/Quickie.DataHandlers.Readonly.Definition.html": {
    "href": "api/Quickie.DataHandlers.Readonly.Definition.html",
    "title": "Namespace Quickie.DataHandlers.Readonly.Definition | Quickie",
    "keywords": "Namespace Quickie.DataHandlers.Readonly.Definition Interfaces IReadOnlyCollectionDataHandler<TEntity, TIdType> Defines read-only data access operations for collections of entities. Provides methods to retrieve data with optional filtering and pagination. IReadOnlyDataHandler<TEntity, TIdType> Read-only data handler (Repository)."
  },
  "api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler-2.html": {
    "href": "api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler-2.html",
    "title": "Class ReadOnlyCollectionDataHandler<TEntity, TDbContext> | Quickie",
    "keywords": "Class ReadOnlyCollectionDataHandler<TEntity, TDbContext> Namespace Quickie.DataHandlers.Readonly.Implementation Assembly Quickie.dll public abstract class ReadOnlyCollectionDataHandler<TEntity, TDbContext> : IReadOnlyCollectionDataHandler<TEntity> where TEntity : ReadOnlyEntity where TDbContext : DbContext Type Parameters TEntity TDbContext Inheritance object ReadOnlyCollectionDataHandler<TEntity, TDbContext> Implements IReadOnlyCollectionDataHandler<TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyCollectionDataHandler(DbContext) protected ReadOnlyCollectionDataHandler(DbContext context) Parameters context DbContext Methods GetByFilterAsync<TRequestModel>(Expression<Func<TEntity, bool>>, TRequestModel?, bool?, CancellationToken) Get a paginated collection of entities that match the specified filter. public Task<PaginatedDataObj<TEntity>> GetByFilterAsync<TRequestModel>(Expression<Func<TEntity, bool>> filter, TRequestModel? request, bool? track = false, CancellationToken cancellationToken = default) where TRequestModel : RequestForDataObj Parameters filter Expression<Func<TEntity, bool>> A predicate function to define your condition. request TRequestModel The pagination request object. track bool? A flag indicating whether to track changes for the retrieved entities. Set to false to disable change tracking for read-only queries. Default is false. cancellationToken CancellationToken Cancellation token. Returns Task<PaginatedDataObj<TEntity>> Paginated data. Type Parameters TRequestModel GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, bool?, CancellationToken) Get a paginated collection of entities by a specific ID with optional pagination. public Task<PaginatedDataObj<TEntity>> GetCollectionByIdAsync<TRequestModel>(long id, TRequestModel? request, bool? track = false, CancellationToken cancellationToken = default) where TRequestModel : RequestForDataObj Parameters id long Identifier (primary key). request TRequestModel The pagination request object. track bool? A flag indicating whether to track changes for the retrieved entities. Set to false to disable change tracking for read-only queries. Default is false. cancellationToken CancellationToken Cancellation token. Returns Task<PaginatedDataObj<TEntity>> Type Parameters TRequestModel"
  },
  "api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler-3.html": {
    "href": "api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyCollectionDataHandler-3.html",
    "title": "Class ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType> | Quickie",
    "keywords": "Class ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType> Namespace Quickie.DataHandlers.Readonly.Implementation Assembly Quickie.dll Abstract class serving as read only (collection) data handler (Repository layer). public abstract class ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType> : IReadOnlyCollectionDataHandler<TEntity, TIdType> where TEntity : ReadOnlyEntity where TDbContext : DbContext where TIdType : IComparable Type Parameters TEntity Entity TDbContext Db Context TIdType Type of identifier. eg: int, string, ... Inheritance object ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType> Implements IReadOnlyCollectionDataHandler<TEntity, TIdType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyCollectionDataHandler(DbContext) Abstract class serving as read only (collection) data handler (Repository layer). protected ReadOnlyCollectionDataHandler(DbContext context) Parameters context DbContext Db Context Methods GetByFilterAsync<TRequestModel>(Expression<Func<TEntity, bool>>?, TRequestModel?, bool?, CancellationToken?) Get filtered collection of data. public Task<PaginatedDataObj<TEntity>> GetByFilterAsync<TRequestModel>(Expression<Func<TEntity, bool>>? filter, TRequestModel? request, bool? track = false, CancellationToken? cancellationToken = null) where TRequestModel : RequestForDataObj Parameters filter Expression<Func<TEntity, bool>> Data request filter request TRequestModel Data request filter track bool? Track entity? Default is false cancellationToken CancellationToken? Cancellation token Returns Task<PaginatedDataObj<TEntity>> Type Parameters TRequestModel Type of data request filter"
  },
  "api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler-2.html": {
    "href": "api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler-2.html",
    "title": "Class ReadOnlyDataHandler<TEntity, TDbContext> | Quickie",
    "keywords": "Class ReadOnlyDataHandler<TEntity, TDbContext> Namespace Quickie.DataHandlers.Readonly.Implementation Assembly Quickie.dll public abstract class ReadOnlyDataHandler<TEntity, TDbContext> : IReadOnlyDataHandler<TEntity> where TEntity : ReadOnlyEntity where TDbContext : DbContext Type Parameters TEntity TDbContext Inheritance object ReadOnlyDataHandler<TEntity, TDbContext> Implements IReadOnlyDataHandler<TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyDataHandler(DbContext) protected ReadOnlyDataHandler(DbContext context) Parameters context DbContext Methods GetByIdAsync(object, CancellationToken) Get data by id. (ID must be primary key or composite key.) public Task<TEntity?> GetByIdAsync(object id, CancellationToken cancellationToken = default) Parameters id object Unique identifier. cancellationToken CancellationToken Cancellation token. Returns Task<TEntity> Entity object."
  },
  "api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler-3.html": {
    "href": "api/Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler-3.html",
    "title": "Class ReadOnlyDataHandler<TEntity, TDbContext, TIdType> | Quickie",
    "keywords": "Class ReadOnlyDataHandler<TEntity, TDbContext, TIdType> Namespace Quickie.DataHandlers.Readonly.Implementation Assembly Quickie.dll Abstract base class for handling read-only data requests. public abstract class ReadOnlyDataHandler<TEntity, TDbContext, TIdType> : IReadOnlyDataHandler<TEntity, TIdType> where TEntity : ReadOnlyEntity where TDbContext : DbContext where TIdType : IComparable Type Parameters TEntity Entity TDbContext Db context TIdType Type of identifier. eg: int, string, ... Inheritance object ReadOnlyDataHandler<TEntity, TDbContext, TIdType> Implements IReadOnlyDataHandler<TEntity, TIdType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyDataHandler(DbContext) Abstract base class for handling read-only data requests. protected ReadOnlyDataHandler(DbContext context) Parameters context DbContext Db context Methods GetByIdAsync(TIdType, CancellationToken?) Get data by id. public Task<TEntity?> GetByIdAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier (unique key identifying your entity) cancellationToken CancellationToken? Cancellation token Returns Task<TEntity>"
  },
  "api/Quickie.DataHandlers.Readonly.Implementation.html": {
    "href": "api/Quickie.DataHandlers.Readonly.Implementation.html",
    "title": "Namespace Quickie.DataHandlers.Readonly.Implementation | Quickie",
    "keywords": "Namespace Quickie.DataHandlers.Readonly.Implementation Classes ReadOnlyCollectionDataHandler<TEntity, TDbContext, TIdType> Abstract class serving as read only (collection) data handler (Repository layer). ReadOnlyDataHandler<TEntity, TDbContext, TIdType> Abstract base class for handling read-only data requests."
  },
  "api/Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html": {
    "href": "api/Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html",
    "title": "Interface IWriteOnlyDataHandler<TEntity> | Quickie",
    "keywords": "Interface IWriteOnlyDataHandler<TEntity> Namespace Quickie.DataHandlers.Writeonly.Definition Assembly Quickie.dll public interface IWriteOnlyDataHandler<TEntity> where TEntity : WriteOnlyEntity Type Parameters TEntity Methods CreateItemAsync(TEntity, CancellationToken?) Task<ResponseObj<TEntity>> CreateItemAsync(TEntity item, CancellationToken? cancellationToken) Parameters item TEntity cancellationToken CancellationToken? Returns Task<ResponseObj<TEntity>> CreateItemsAsync(ICollection<TEntity>, CancellationToken?) Task<ResponseObj<ICollection<TEntity>>> CreateItemsAsync(ICollection<TEntity> items, CancellationToken? cancellationToken) Parameters items ICollection<TEntity> cancellationToken CancellationToken? Returns Task<ResponseObj<ICollection<TEntity>>>"
  },
  "api/Quickie.DataHandlers.Writeonly.Definition.html": {
    "href": "api/Quickie.DataHandlers.Writeonly.Definition.html",
    "title": "Namespace Quickie.DataHandlers.Writeonly.Definition | Quickie",
    "keywords": "Namespace Quickie.DataHandlers.Writeonly.Definition Interfaces IWriteOnlyDataHandler<TEntity>"
  },
  "api/Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler-2.html": {
    "href": "api/Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler-2.html",
    "title": "Class WriteOnlyDataHandler<TEntity, TDbContext> | Quickie",
    "keywords": "Class WriteOnlyDataHandler<TEntity, TDbContext> Namespace Quickie.DataHandlers.Writeonly.Implementation Assembly Quickie.dll Abstract class serving as write only data handler (Repository layer). public abstract class WriteOnlyDataHandler<TEntity, TDbContext> : IWriteOnlyDataHandler<TEntity> where TEntity : WriteOnlyEntity where TDbContext : DbContext Type Parameters TEntity Entity TDbContext Db context Inheritance object WriteOnlyDataHandler<TEntity, TDbContext> Implements IWriteOnlyDataHandler<TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WriteOnlyDataHandler(TDbContext) Abstract class serving as write only data handler (Repository layer). protected WriteOnlyDataHandler(TDbContext dbContext) Parameters dbContext TDbContext Db context Methods CreateItemAsync(TEntity, CancellationToken?) Data create request. public Task<ResponseObj<TEntity>> CreateItemAsync(TEntity item, CancellationToken? cancellationToken = null) Parameters item TEntity Data requested to create cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TEntity>> CreateItemsAsync(ICollection<TEntity>, CancellationToken?) Collection of data create request. public Task<ResponseObj<ICollection<TEntity>>> CreateItemsAsync(ICollection<TEntity> items, CancellationToken? cancellationToken = null) Parameters items ICollection<TEntity> Collection of data requested to create cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<ICollection<TEntity>>>"
  },
  "api/Quickie.DataHandlers.Writeonly.Implementation.html": {
    "href": "api/Quickie.DataHandlers.Writeonly.Implementation.html",
    "title": "Namespace Quickie.DataHandlers.Writeonly.Implementation | Quickie",
    "keywords": "Namespace Quickie.DataHandlers.Writeonly.Implementation Classes WriteOnlyDataHandler<TEntity, TDbContext> Abstract class serving as write only data handler (Repository layer)."
  },
  "api/Quickie.DataObj.DetailedResponseObj.html": {
    "href": "api/Quickie.DataObj.DetailedResponseObj.html",
    "title": "Class DetailedResponseObj | Quickie",
    "keywords": "Class DetailedResponseObj Namespace Quickie.DataObj Assembly Quickie.dll Represents a detailed response object used to return results from an operation. public class DetailedResponseObj Inheritance object DetailedResponseObj Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Detailed description that explains the response such as troubleshooting information or guidance. public string Description { get; set; } Property Value string ErrorStatus Status of the error or response, indicating the severity of the result. public ErrorStatusEnum ErrorStatus { get; set; } Property Value ErrorStatusEnum Message Short message that provides high-level information about the response. Can be used like \"title\" of your detailed error description. public string Message { get; set; } Property Value string Show Value indicating whether to show the response. public bool Show { get; set; } Property Value bool"
  },
  "api/Quickie.DataObj.PaginatedDataObj-1.html": {
    "href": "api/Quickie.DataObj.PaginatedDataObj-1.html",
    "title": "Class PaginatedDataObj<TObject> | Quickie",
    "keywords": "Class PaginatedDataObj<TObject> Namespace Quickie.DataObj Assembly Quickie.dll Represents an object for paginated data and its metadata. public class PaginatedDataObj<TObject> where TObject : class Type Parameters TObject Inheritance object PaginatedDataObj<TObject> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Items Collection of data public IEnumerable<TObject> Items { get; set; } Property Value IEnumerable<TObject> Total Total no. of data. public int Total { get; set; } Property Value int"
  },
  "api/Quickie.DataObj.RequestForDataObj.html": {
    "href": "api/Quickie.DataObj.RequestForDataObj.html",
    "title": "Class RequestForDataObj | Quickie",
    "keywords": "Class RequestForDataObj Namespace Quickie.DataObj Assembly Quickie.dll Represents a request for data with pagination. public class RequestForDataObj Inheritance object RequestForDataObj Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PageNumber The page number to retrieve. Default is 1. public int PageNumber { get; set; } Property Value int PageSize The number of items to retrieve per page. Default is 10. public int PageSize { get; set; } Property Value int"
  },
  "api/Quickie.DataObj.ResponseObj-1.html": {
    "href": "api/Quickie.DataObj.ResponseObj-1.html",
    "title": "Class ResponseObj<TData> | Quickie",
    "keywords": "Class ResponseObj<TData> Namespace Quickie.DataObj Assembly Quickie.dll Represents a response object that contains the result of an operation along with the data. public class ResponseObj<TData> Type Parameters TData Data. Inheritance object ResponseObj<TData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data Data returned as a result of the operation. public TData Data { get; set; } Property Value TData IsSuccess Value indicating whether the operation was successful. \"true\" meaning operation has succeeded and \"false\" meaning operation has failed. public bool IsSuccess { get; set; } Property Value bool Message Message providing additional information about the operation's result. public string Message { get; set; } Property Value string"
  },
  "api/Quickie.DataObj.ResponseObj.html": {
    "href": "api/Quickie.DataObj.ResponseObj.html",
    "title": "Class ResponseObj | Quickie",
    "keywords": "Class ResponseObj Namespace Quickie.DataObj Assembly Quickie.dll Represents a basic response object that contains information about the success of an operation. public class ResponseObj Inheritance object ResponseObj Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsSuccess Value indicating whether the operation was successful. \"true\" meaning operation has succeeded and \"false\" meaning operation has failed. public bool IsSuccess { get; set; } Property Value bool Message Message providing additional information about the operation's result. public string Message { get; set; } Property Value string"
  },
  "api/Quickie.DataObj.html": {
    "href": "api/Quickie.DataObj.html",
    "title": "Namespace Quickie.DataObj | Quickie",
    "keywords": "Namespace Quickie.DataObj Classes DetailedResponseObj Represents a detailed response object used to return results from an operation. PaginatedDataObj<TObject> Represents an object for paginated data and its metadata. RequestForDataObj Represents a request for data with pagination. ResponseObj Represents a basic response object that contains information about the success of an operation. ResponseObj<TData> Represents a response object that contains the result of an operation along with the data."
  },
  "api/Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler-2.html": {
    "href": "api/Quickie.Handlers.Crud.Definition.ICrudForCollectionRequestHandler-2.html",
    "title": "Interface ICrudForCollectionRequestHandler<TViewModel, TIdType> | Quickie",
    "keywords": "Interface ICrudForCollectionRequestHandler<TViewModel, TIdType> Namespace Quickie.Handlers.Crud.Definition Assembly Quickie.dll public interface ICrudForCollectionRequestHandler<TViewModel, TIdType> where TViewModel : CrudDto where TIdType : IComparable Type Parameters TViewModel TIdType Methods CountAsync(CancellationToken?) Task<ResponseObj<int>> CountAsync(CancellationToken? cancellationToken = null) Parameters cancellationToken CancellationToken? Returns Task<ResponseObj<int>> CreateRangeAsync(ICollection<TViewModel>, CancellationToken?) Task<ResponseObj<ICollection<TViewModel>>> CreateRangeAsync(ICollection<TViewModel> entities, CancellationToken? cancellationToken = null) Parameters entities ICollection<TViewModel> cancellationToken CancellationToken? Returns Task<ResponseObj<ICollection<TViewModel>>> DeleteRangeAsync(ICollection<TIdType>, CancellationToken?) Task<ResponseObj> DeleteRangeAsync(ICollection<TIdType> ids, CancellationToken? cancellationToken = null) Parameters ids ICollection<TIdType> cancellationToken CancellationToken? Returns Task<ResponseObj> GetAllAsync(RequestForDataObj, CancellationToken?) Task<ResponseObj<PaginatedDataObj<TViewModel>>> GetAllAsync(RequestForDataObj request, CancellationToken? cancellationToken = null) Parameters request RequestForDataObj cancellationToken CancellationToken? Returns Task<ResponseObj<PaginatedDataObj<TViewModel>>> UpdateRangeAsync(ICollection<TViewModel>, CancellationToken?) Task<ResponseObj<ICollection<TViewModel>>> UpdateRangeAsync(ICollection<TViewModel> entities, CancellationToken? cancellationToken = null) Parameters entities ICollection<TViewModel> cancellationToken CancellationToken? Returns Task<ResponseObj<ICollection<TViewModel>>>"
  },
  "api/Quickie.Handlers.Crud.Definition.ICrudRequestHandler-2.html": {
    "href": "api/Quickie.Handlers.Crud.Definition.ICrudRequestHandler-2.html",
    "title": "Interface ICrudRequestHandler<TViewModel, TIdType> | Quickie",
    "keywords": "Interface ICrudRequestHandler<TViewModel, TIdType> Namespace Quickie.Handlers.Crud.Definition Assembly Quickie.dll Abstract base class for CRUD operation. Contains method to: Create, Update, Read (GET), and Delete. public interface ICrudRequestHandler<TViewModel, in TIdType> where TViewModel : CrudDto where TIdType : IComparable Type Parameters TViewModel TIdType Type of the identifier used in methods (string, int, Guid, ...) Methods CreateAsync(TViewModel, CancellationToken?) Create data. Task<ResponseObj<TViewModel>> CreateAsync(TViewModel request, CancellationToken? cancellationToken) Parameters request TViewModel Requested data to be created. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TViewModel>> Response object. DeleteAsync(TIdType, CancellationToken?) Removes data. Task<ResponseObj> DeleteAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier of data to be removed cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj> Response object GetByIdAsync(TIdType, CancellationToken?) Get data by id (unique identifier, a pk). Task<ResponseObj<TViewModel>> GetByIdAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TViewModel>> Response object with data. UpdateAsync(TIdType, TViewModel, CancellationToken?) Update requested data. Task<ResponseObj<TViewModel>> UpdateAsync(TIdType id, TViewModel request, CancellationToken? cancellationToken = null) Parameters id TIdType Data identifier to update. request TViewModel Data requested to be updated. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TViewModel>> Response object with updated data."
  },
  "api/Quickie.Handlers.Crud.Definition.html": {
    "href": "api/Quickie.Handlers.Crud.Definition.html",
    "title": "Namespace Quickie.Handlers.Crud.Definition | Quickie",
    "keywords": "Namespace Quickie.Handlers.Crud.Definition Interfaces ICrudForCollectionRequestHandler<TViewModel, TIdType> ICrudRequestHandler<TViewModel, TIdType> Abstract base class for CRUD operation. Contains method to: Create, Update, Read (GET), and Delete."
  },
  "api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html": {
    "href": "api/Quickie.Handlers.Crud.Implementation.CrudForCollectionRequestHandler-4.html",
    "title": "Class CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> | Quickie",
    "keywords": "Class CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Namespace Quickie.Handlers.Crud.Implementation Assembly Quickie.dll Abstract class serving as CRUD for collection request handler. public abstract class CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> : ICrudForCollectionRequestHandler<TViewModel, TIdType> where TViewModel : CrudDto where TEntity : CrudEntity where TDataHandler : ICrudForCollectionDataHandler<TEntity, TIdType> where TIdType : IComparable Type Parameters TViewModel View model or dto TEntity Entity TDataHandler Data handler (repository layer) TIdType Type of identifier. eg: int, string, ... Inheritance object CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Implements ICrudForCollectionRequestHandler<TViewModel, TIdType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudForCollectionRequestHandler(TDataHandler) Abstract class serving as CRUD for collection request handler. protected CrudForCollectionRequestHandler(TDataHandler dataHandler) Parameters dataHandler TDataHandler Data Methods CountAsync(CancellationToken?) Count. public Task<ResponseObj<int>> CountAsync(CancellationToken? cancellationToken = null) Parameters cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<int>> CreateRangeAsync(ICollection<TViewModel>, CancellationToken?) Data create request. public Task<ResponseObj<ICollection<TViewModel>>> CreateRangeAsync(ICollection<TViewModel> entities, CancellationToken? cancellationToken = null) Parameters entities ICollection<TViewModel> Collection of data requested to create. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<ICollection<TViewModel>>> DeleteRangeAsync(ICollection<TIdType>, CancellationToken?) Delete request. public Task<ResponseObj> DeleteRangeAsync(ICollection<TIdType> ids, CancellationToken? cancellationToken = null) Parameters ids ICollection<TIdType> Identifiers of the data to remove. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj> GetAllAsync(RequestForDataObj, CancellationToken?) Get data. public Task<ResponseObj<PaginatedDataObj<TViewModel>>> GetAllAsync(RequestForDataObj request, CancellationToken? cancellationToken = null) Parameters request RequestForDataObj Data request filter cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<PaginatedDataObj<TViewModel>>> MapToCollectionOfDto(ICollection<TEntity>) Maps a collection of TEntity to a collection of TViewModel dto. protected abstract ICollection<TViewModel> MapToCollectionOfDto(ICollection<TEntity> entity) Parameters entity ICollection<TEntity> Returns ICollection<TViewModel> MapToCollectionOfEntity(ICollection<TViewModel>) Maps a collection of TViewModel to a collection of TEntity entity. protected abstract ICollection<TEntity> MapToCollectionOfEntity(ICollection<TViewModel> entity) Parameters entity ICollection<TViewModel> Returns ICollection<TEntity> UpdateRangeAsync(ICollection<TViewModel>, CancellationToken?) Update request. public Task<ResponseObj<ICollection<TViewModel>>> UpdateRangeAsync(ICollection<TViewModel> entities, CancellationToken? cancellationToken = null) Parameters entities ICollection<TViewModel> Requested collection data cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<ICollection<TViewModel>>>"
  },
  "api/Quickie.Handlers.Crud.Implementation.CrudRequestHandler-4.html": {
    "href": "api/Quickie.Handlers.Crud.Implementation.CrudRequestHandler-4.html",
    "title": "Class CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> | Quickie",
    "keywords": "Class CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Namespace Quickie.Handlers.Crud.Implementation Assembly Quickie.dll Abstract class serving as CRUD request handler. public abstract class CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> : ICrudRequestHandler<TViewModel, TIdType> where TViewModel : CrudDto where TEntity : CrudEntity where TDataHandler : ICrudDataHandler<TEntity, TIdType> where TIdType : IComparable Type Parameters TViewModel View model or dto TEntity Entity TDataHandler Data handler (repository layer) TIdType Type of identifier. eg: int, string, ... Inheritance object CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Implements ICrudRequestHandler<TViewModel, TIdType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudRequestHandler(ICrudDataHandler<TEntity, TIdType>) Abstract class serving as CRUD request handler. protected CrudRequestHandler(ICrudDataHandler<TEntity, TIdType> dataHandler) Parameters dataHandler ICrudDataHandler<TEntity, TIdType> Data handler (repository layer) Methods CreateAsync(TViewModel, CancellationToken?) Data create request. public Task<ResponseObj<TViewModel>> CreateAsync(TViewModel request, CancellationToken? cancellationToken = null) Parameters request TViewModel Data requested to create. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TViewModel>> DeleteAsync(TIdType, CancellationToken?) Delete request. public Task<ResponseObj> DeleteAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier of the data to remove. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj> Exceptions ArgumentException GetByIdAsync(TIdType, CancellationToken?) Get data by providing an identifier public Task<ResponseObj<TViewModel>> GetByIdAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TViewModel>> Exceptions ArgumentException MapToDto(TEntity) Maps a TEntity to a TViewModel dto. protected abstract TViewModel MapToDto(TEntity request) Parameters request TEntity Entity Returns TViewModel Dto MapToEntity(TViewModel) Maps a TViewModel to a TEntity entity. protected abstract TEntity MapToEntity(TViewModel request) Parameters request TViewModel Dto Returns TEntity Entity UpdateAsync(TIdType, TViewModel, CancellationToken?) Update request. public Task<ResponseObj<TViewModel>> UpdateAsync(TIdType id, TViewModel request, CancellationToken? cancellationToken = null) Parameters id TIdType Requested data identifier. request TViewModel Requested data cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TViewModel>>"
  },
  "api/Quickie.Handlers.Crud.Implementation.html": {
    "href": "api/Quickie.Handlers.Crud.Implementation.html",
    "title": "Namespace Quickie.Handlers.Crud.Implementation | Quickie",
    "keywords": "Namespace Quickie.Handlers.Crud.Implementation Classes CrudForCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Abstract class serving as CRUD for collection request handler. CrudRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Abstract class serving as CRUD request handler."
  },
  "api/Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler-2.html": {
    "href": "api/Quickie.Handlers.Editonly.Definition.IEditOnlyRequestHandler-2.html",
    "title": "Interface IEditOnlyRequestHandler<TViewModel, TIdType> | Quickie",
    "keywords": "Interface IEditOnlyRequestHandler<TViewModel, TIdType> Namespace Quickie.Handlers.Editonly.Definition Assembly Quickie.dll Abstract base class for handling update requests, processing operations for the specified view model type. public interface IEditOnlyRequestHandler<TViewModel, in TIdType> where TViewModel : EditOnlyDto where TIdType : IComparable Type Parameters TViewModel The type of the view model that represents the data transfer object to be updated. TIdType Type of id (int, string, guid, ...) Methods EditAsync(TIdType, TViewModel, CancellationToken?) Update single entity. Task<ResponseObj<TViewModel>> EditAsync(TIdType id, TViewModel requestModel, CancellationToken? cancellationToken) Parameters id TIdType Identifier of the entity. requestModel TViewModel Data to be updated. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TViewModel>> EditCollectionAsync(ICollection<TViewModel>, CancellationToken?) Update collection of entity. (Bulk) Task<ResponseObj<ICollection<TViewModel>>> EditCollectionAsync(ICollection<TViewModel> requestModels, CancellationToken? cancellationToken) Parameters requestModels ICollection<TViewModel> Bulk data to be updated. cancellationToken CancellationToken? Cancellation token. Returns Task<ResponseObj<ICollection<TViewModel>>>"
  },
  "api/Quickie.Handlers.Editonly.Definition.html": {
    "href": "api/Quickie.Handlers.Editonly.Definition.html",
    "title": "Namespace Quickie.Handlers.Editonly.Definition | Quickie",
    "keywords": "Namespace Quickie.Handlers.Editonly.Definition Interfaces IEditOnlyRequestHandler<TViewModel, TIdType> Abstract base class for handling update requests, processing operations for the specified view model type."
  },
  "api/Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler-4.html": {
    "href": "api/Quickie.Handlers.Editonly.Implementation.EditOnlyRequestHandler-4.html",
    "title": "Class EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> | Quickie",
    "keywords": "Class EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Namespace Quickie.Handlers.Editonly.Implementation Assembly Quickie.dll Abstract class serving as edit only request handler. public abstract class EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> : IEditOnlyRequestHandler<TViewModel, TIdType> where TViewModel : EditOnlyDto where TEntity : EditOnlyEntity where TDataHandler : IEditOnlyDataHandler<TEntity, TIdType> where TIdType : IComparable Type Parameters TViewModel View model or dto TEntity Entity TDataHandler Data handler (Repository layer) TIdType Type of identifier. eg: int, string, ... Inheritance object EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Implements IEditOnlyRequestHandler<TViewModel, TIdType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EditOnlyRequestHandler(IEditOnlyDataHandler<TEntity, TIdType>) Abstract class serving as edit only request handler. protected EditOnlyRequestHandler(IEditOnlyDataHandler<TEntity, TIdType> dataHandler) Parameters dataHandler IEditOnlyDataHandler<TEntity, TIdType> Data handler (Repository layer) Methods EditAsync(TIdType, TViewModel, CancellationToken?) Update request. public Task<ResponseObj<TViewModel>> EditAsync(TIdType id, TViewModel requestModel, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier of the entity. requestModel TViewModel Requested data to update cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TViewModel>> EditCollectionAsync(ICollection<TViewModel>, CancellationToken?) Update collection of data. public Task<ResponseObj<ICollection<TViewModel>>> EditCollectionAsync(ICollection<TViewModel> requestModels, CancellationToken? cancellationToken = null) Parameters requestModels ICollection<TViewModel> Collection of requested data to update cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<ICollection<TViewModel>>> MapToCollectionOfDto(ICollection<TEntity>) Maps a collection of TEntity entities to a collection of TViewModel view models. protected abstract ICollection<TViewModel> MapToCollectionOfDto(ICollection<TEntity> entities) Parameters entities ICollection<TEntity> Collection of entity. Returns ICollection<TViewModel> Collection of view model/dto. MapToCollectionOfEntity(ICollection<TViewModel>) Maps a collection of TViewModel to a collection of TEntity entities. protected abstract ICollection<TEntity> MapToCollectionOfEntity(ICollection<TViewModel> requestModels) Parameters requestModels ICollection<TViewModel> Collection of view model/dto Returns ICollection<TEntity> Collection of entity. MapToDto(TEntity) Maps a TEntity entity to a TViewModel view model/dto. protected abstract TViewModel MapToDto(TEntity entity) Parameters entity TEntity Entity. Returns TViewModel View model/dto. MapToEntity(TViewModel) Maps a TViewModel to a TEntity entity. protected abstract TEntity MapToEntity(TViewModel requestModel) Parameters requestModel TViewModel The view model/dto to map to an entity Returns TEntity Entity."
  },
  "api/Quickie.Handlers.Editonly.Implementation.html": {
    "href": "api/Quickie.Handlers.Editonly.Implementation.html",
    "title": "Namespace Quickie.Handlers.Editonly.Implementation | Quickie",
    "keywords": "Namespace Quickie.Handlers.Editonly.Implementation Classes EditOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Abstract class serving as edit only request handler."
  },
  "api/Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html": {
    "href": "api/Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html",
    "title": "Interface IReadOnlyCollectionRequestHandler<TViewModel> | Quickie",
    "keywords": "Interface IReadOnlyCollectionRequestHandler<TViewModel> Namespace Quickie.Handlers.Readonly.Definition Assembly Quickie.dll Abstract base class for handling collections of read-only requests, processing operations for the specified view model type. public interface IReadOnlyCollectionRequestHandler<TViewModel> where TViewModel : ReadOnlyDto Type Parameters TViewModel The type of the view model that represents the data transfer object for read-only operations. Methods GetAsync<TRequestModel>(TRequestModel?, CancellationToken) Get collection of data by provided request model. Task<PaginatedDataObj<TViewModel>> GetAsync<TRequestModel>(TRequestModel? request, CancellationToken cancellationToken) where TRequestModel : RequestForDataObj Parameters request TRequestModel Data request model of type RequestForDataDto. cancellationToken CancellationToken Cancellation token. Returns Task<PaginatedDataObj<TViewModel>> Collection of data wrapped by response dto. Type Parameters TRequestModel GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, CancellationToken) Get collection of data for provided identifier of type long. Task<PaginatedDataObj<TViewModel>> GetCollectionByIdAsync<TRequestModel>(long id, TRequestModel? request, CancellationToken cancellationToken) where TRequestModel : RequestForDataObj Parameters id long identifier of type long request TRequestModel Data request model of type RequestForDataDto. cancellationToken CancellationToken Cancellation token. Returns Task<PaginatedDataObj<TViewModel>> Type Parameters TRequestModel GetPaginatedDataAsync<TRequestModel>(TRequestModel?, CancellationToken) Get collection of data wrapped around a nice PaginatedDataObj with total data. Task<PaginatedDataObj<TViewModel>> GetPaginatedDataAsync<TRequestModel>(TRequestModel? request, CancellationToken cancellationToken) where TRequestModel : RequestForDataObj Parameters request TRequestModel Data request model cancellationToken CancellationToken Cancellation token Returns Task<PaginatedDataObj<TViewModel>> Type Parameters TRequestModel"
  },
  "api/Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-2.html": {
    "href": "api/Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-2.html",
    "title": "Interface IReadOnlyCollectionRequestHandler<TViewModel, TIdType> | Quickie",
    "keywords": "Interface IReadOnlyCollectionRequestHandler<TViewModel, TIdType> Namespace Quickie.Handlers.Readonly.Definition Assembly Quickie.dll Abstract base class for handling collections of read-only requests, processing operations for the specified view model type. public interface IReadOnlyCollectionRequestHandler<TViewModel, in TIdType> where TViewModel : ReadOnlyDto where TIdType : IComparable Type Parameters TViewModel The type of the view model that represents the data transfer object for read-only operations. TIdType Type of id (int, Guid, string, ...) Methods GetAsync<TRequestModel>(TRequestModel?, CancellationToken?) Get collection of data by provided request model. Task<PaginatedDataObj<TViewModel>> GetAsync<TRequestModel>(TRequestModel? request, CancellationToken? cancellationToken) where TRequestModel : RequestForDataObj Parameters request TRequestModel Data request model of type RequestForDataDto. cancellationToken CancellationToken? Cancellation token. Returns Task<PaginatedDataObj<TViewModel>> Collection of data wrapped by response dto. Type Parameters TRequestModel"
  },
  "api/Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-1.html": {
    "href": "api/Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-1.html",
    "title": "Interface IReadOnlyRequestHandler<TViewModel> | Quickie",
    "keywords": "Interface IReadOnlyRequestHandler<TViewModel> Namespace Quickie.Handlers.Readonly.Definition Assembly Quickie.dll Abstract base class for handling read-only requests, processing operations for the specified view model type. public interface IReadOnlyRequestHandler<TViewModel> where TViewModel : ReadOnlyDto Type Parameters TViewModel The type of the view model that represents the data transfer object for read-only operations. Methods GetByIdAsync(long, CancellationToken) Get exact data (single) by id. Task<ResponseObj<TViewModel>> GetByIdAsync(long id, CancellationToken cancellationToken) Parameters id long Identifier of data. cancellationToken CancellationToken Cancellation token. Returns Task<ResponseObj<TViewModel>> Single data wrapped by response dto."
  },
  "api/Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-2.html": {
    "href": "api/Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-2.html",
    "title": "Interface IReadOnlyRequestHandler<TViewModel, TIdType> | Quickie",
    "keywords": "Interface IReadOnlyRequestHandler<TViewModel, TIdType> Namespace Quickie.Handlers.Readonly.Definition Assembly Quickie.dll Abstract base class for handling read-only requests, processing operations for the specified view model type. public interface IReadOnlyRequestHandler<TViewModel, in TIdType> where TViewModel : ReadOnlyDto where TIdType : IComparable Type Parameters TViewModel The type of the view model that represents the data transfer object for read-only operations. TIdType Type of id (int, Guid, string, ...) Methods GetByIdAsync(TIdType, CancellationToken?) Get exact data (single) by id. Task<ResponseObj<TViewModel>> GetByIdAsync(TIdType id, CancellationToken? cancellationToken) Parameters id TIdType Identifier of data. cancellationToken CancellationToken? Cancellation token. Returns Task<ResponseObj<TViewModel>> Single data wrapped by response dto."
  },
  "api/Quickie.Handlers.Readonly.Definition.html": {
    "href": "api/Quickie.Handlers.Readonly.Definition.html",
    "title": "Namespace Quickie.Handlers.Readonly.Definition | Quickie",
    "keywords": "Namespace Quickie.Handlers.Readonly.Definition Interfaces IReadOnlyCollectionRequestHandler<TViewModel, TIdType> Abstract base class for handling collections of read-only requests, processing operations for the specified view model type. IReadOnlyRequestHandler<TViewModel, TIdType> Abstract base class for handling read-only requests, processing operations for the specified view model type."
  },
  "api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-3.html": {
    "href": "api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-3.html",
    "title": "Class ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler> | Quickie",
    "keywords": "Class ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler> Namespace Quickie.Handlers.Readonly.Implementation Assembly Quickie.dll public abstract class ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler> : IReadOnlyCollectionRequestHandler<TViewModel> where TViewModel : ReadOnlyDto where TEntity : ReadOnlyEntity where TDataHandler : IReadOnlyCollectionDataHandler<TEntity> Type Parameters TViewModel TEntity TDataHandler Inheritance object ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler> Implements IReadOnlyCollectionRequestHandler<TViewModel> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyCollectionRequestHandler(IReadOnlyCollectionDataHandler<TEntity>) protected ReadOnlyCollectionRequestHandler(IReadOnlyCollectionDataHandler<TEntity> readOnlyCollectionDataHandler) Parameters readOnlyCollectionDataHandler IReadOnlyCollectionDataHandler<TEntity> Methods GetAsync<TRequestModel>(TRequestModel?, CancellationToken) Get collection of data by provided request model. public Task<PaginatedDataObj<TViewModel>> GetAsync<TRequestModel>(TRequestModel? request, CancellationToken cancellationToken) where TRequestModel : RequestForDataObj Parameters request TRequestModel Data request model of type RequestForDataDto. cancellationToken CancellationToken Cancellation token. Returns Task<PaginatedDataObj<TViewModel>> Collection of data wrapped by response dto. Type Parameters TRequestModel GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, CancellationToken) Get collection of data for provided identifier of type long. public Task<PaginatedDataObj<TViewModel>> GetCollectionByIdAsync<TRequestModel>(long id, TRequestModel? request, CancellationToken cancellationToken) where TRequestModel : RequestForDataObj Parameters id long identifier of type long request TRequestModel Data request model of type RequestForDataDto. cancellationToken CancellationToken Cancellation token. Returns Task<PaginatedDataObj<TViewModel>> Type Parameters TRequestModel GetPaginatedDataAsync<TRequestModel>(TRequestModel?, CancellationToken) Get collection of data wrapped around a nice PaginatedDataObj with total data. public Task<PaginatedDataObj<TViewModel>> GetPaginatedDataAsync<TRequestModel>(TRequestModel? request, CancellationToken cancellationToken) where TRequestModel : RequestForDataObj Parameters request TRequestModel Data request model cancellationToken CancellationToken Cancellation token Returns Task<PaginatedDataObj<TViewModel>> Type Parameters TRequestModel MapToDto(ICollection<TEntity>) Mapping profile. Map from collection of Entity type to your collection of data transfer object. protected abstract ICollection<TViewModel> MapToDto(ICollection<TEntity> entity) Parameters entity ICollection<TEntity> Collection of entity object. Returns ICollection<TViewModel> Mapped from collection of Entity, a collection data transfer object."
  },
  "api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-4.html": {
    "href": "api/Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-4.html",
    "title": "Class ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> | Quickie",
    "keywords": "Class ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Namespace Quickie.Handlers.Readonly.Implementation Assembly Quickie.dll Abstract class serving as read only (collection) request handler. public abstract class ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> : IReadOnlyCollectionRequestHandler<TViewModel, TIdType> where TViewModel : ReadOnlyDto where TEntity : ReadOnlyEntity where TDataHandler : IReadOnlyCollectionDataHandler<TEntity, TIdType> where TIdType : IComparable Type Parameters TViewModel View model or dto TEntity Entity TDataHandler Data handler (Repository layer) TIdType Type of identifier. eg: int, string, ... Inheritance object ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Implements IReadOnlyCollectionRequestHandler<TViewModel, TIdType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyCollectionRequestHandler(IReadOnlyCollectionDataHandler<TEntity, TIdType>) Abstract class serving as read only (collection) request handler. protected ReadOnlyCollectionRequestHandler(IReadOnlyCollectionDataHandler<TEntity, TIdType> readOnlyCollectionDataHandler) Parameters readOnlyCollectionDataHandler IReadOnlyCollectionDataHandler<TEntity, TIdType> Data handler (Repository layer) Methods GetAsync<TRequestModel>(TRequestModel?, CancellationToken?) Get data. public Task<PaginatedDataObj<TViewModel>> GetAsync<TRequestModel>(TRequestModel? request, CancellationToken? cancellationToken = null) where TRequestModel : RequestForDataObj Parameters request TRequestModel Data request filter cancellationToken CancellationToken? Cancellation token Returns Task<PaginatedDataObj<TViewModel>> Type Parameters TRequestModel Type of data request filter MapToDto(ICollection<TEntity>) Mapping profile. Map from collection of Entity type to your collection of data transfer object. protected abstract ICollection<TViewModel> MapToDto(ICollection<TEntity> entity) Parameters entity ICollection<TEntity> Collection of entity object. Returns ICollection<TViewModel> Mapped from collection of Entity, a collection data transfer object."
  },
  "api/Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-3.html": {
    "href": "api/Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-3.html",
    "title": "Class ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler> | Quickie",
    "keywords": "Class ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler> Namespace Quickie.Handlers.Readonly.Implementation Assembly Quickie.dll Abstract base class for handling read-only requests, processing operations for the specified view model type. public abstract class ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler> : IReadOnlyRequestHandler<TViewModel> where TViewModel : ReadOnlyDto where TEntity : ReadOnlyEntity where TDataHandler : IReadOnlyDataHandler<TEntity> Type Parameters TViewModel The type of the view model that represents the data transfer object for read-only operations. TEntity Entity. TDataHandler Data handler (Repository) Inheritance object ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler> Implements IReadOnlyRequestHandler<TViewModel> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyRequestHandler(IReadOnlyDataHandler<TEntity>) Abstract base class for handling read-only requests, processing operations for the specified view model type. protected ReadOnlyRequestHandler(IReadOnlyDataHandler<TEntity> dataHandler) Parameters dataHandler IReadOnlyDataHandler<TEntity> Methods GetByIdAsync(long, CancellationToken) Get exact data (single) by id. public Task<ResponseObj<TViewModel>> GetByIdAsync(long id, CancellationToken cancellationToken = default) Parameters id long Identifier of data. cancellationToken CancellationToken Cancellation token. Returns Task<ResponseObj<TViewModel>> Single data wrapped by response dto. MapToDto(TEntity) Mapping profile. Map from Entity type to your data transfer object. protected abstract TViewModel MapToDto(TEntity entity) Parameters entity TEntity Entity object. Returns TViewModel Mapped from Entity, a data transfer object."
  },
  "api/Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-4.html": {
    "href": "api/Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-4.html",
    "title": "Class ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> | Quickie",
    "keywords": "Class ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Namespace Quickie.Handlers.Readonly.Implementation Assembly Quickie.dll Abstract base class for handling read-only requests, processing operations for the specified view model type. public abstract class ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> : IReadOnlyRequestHandler<TViewModel, TIdType> where TViewModel : ReadOnlyDto where TEntity : ReadOnlyEntity where TDataHandler : IReadOnlyDataHandler<TEntity, TIdType> where TIdType : IComparable Type Parameters TViewModel The type of the view model that represents the data transfer object for read-only operations. TEntity Entity. TDataHandler Data handler (Repository) TIdType Type of identifier. eg: int, string, ... Inheritance object ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Implements IReadOnlyRequestHandler<TViewModel, TIdType> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyRequestHandler(IReadOnlyDataHandler<TEntity, TIdType>) Abstract base class for handling read-only requests, processing operations for the specified view model type. protected ReadOnlyRequestHandler(IReadOnlyDataHandler<TEntity, TIdType> dataHandler) Parameters dataHandler IReadOnlyDataHandler<TEntity, TIdType> Methods GetByIdAsync(TIdType, CancellationToken?) Get data by id. public Task<ResponseObj<TViewModel>> GetByIdAsync(TIdType id, CancellationToken? cancellationToken = null) Parameters id TIdType Identifier (unique key identifying your entity) cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TViewModel>> Exceptions ArgumentException MapToDto(TEntity) Mapping profile. Map from Entity type to your data transfer object. protected abstract TViewModel MapToDto(TEntity entity) Parameters entity TEntity Entity object. Returns TViewModel Mapped from Entity, a data transfer object."
  },
  "api/Quickie.Handlers.Readonly.Implementation.html": {
    "href": "api/Quickie.Handlers.Readonly.Implementation.html",
    "title": "Namespace Quickie.Handlers.Readonly.Implementation | Quickie",
    "keywords": "Namespace Quickie.Handlers.Readonly.Implementation Classes ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Abstract class serving as read only (collection) request handler. ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> Abstract base class for handling read-only requests, processing operations for the specified view model type."
  },
  "api/Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler-1.html": {
    "href": "api/Quickie.Handlers.Writeonly.Definition.IWriteOnlyRequestHandler-1.html",
    "title": "Interface IWriteOnlyRequestHandler<TViewModel> | Quickie",
    "keywords": "Interface IWriteOnlyRequestHandler<TViewModel> Namespace Quickie.Handlers.Writeonly.Definition Assembly Quickie.dll public interface IWriteOnlyRequestHandler<TViewModel> where TViewModel : WriteOnlyDto Type Parameters TViewModel Methods CreateItemAsync(TViewModel, CancellationToken?) Task<ResponseObj<TViewModel>> CreateItemAsync(TViewModel item, CancellationToken? cancellationToken) Parameters item TViewModel cancellationToken CancellationToken? Returns Task<ResponseObj<TViewModel>> CreateItemsAsync(ICollection<TViewModel>, CancellationToken?) Task<ResponseObj<ICollection<TViewModel>>> CreateItemsAsync(ICollection<TViewModel> items, CancellationToken? cancellationToken) Parameters items ICollection<TViewModel> cancellationToken CancellationToken? Returns Task<ResponseObj<ICollection<TViewModel>>>"
  },
  "api/Quickie.Handlers.Writeonly.Definition.html": {
    "href": "api/Quickie.Handlers.Writeonly.Definition.html",
    "title": "Namespace Quickie.Handlers.Writeonly.Definition | Quickie",
    "keywords": "Namespace Quickie.Handlers.Writeonly.Definition Interfaces IWriteOnlyRequestHandler<TViewModel>"
  },
  "api/Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler-3.html": {
    "href": "api/Quickie.Handlers.Writeonly.Implementation.WriteOnlyRequestHandler-3.html",
    "title": "Class WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler> | Quickie",
    "keywords": "Class WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler> Namespace Quickie.Handlers.Writeonly.Implementation Assembly Quickie.dll Abstract class serving as write only request handler. public abstract class WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler> : IWriteOnlyRequestHandler<TViewModel> where TViewModel : WriteOnlyDto where TEntity : WriteOnlyEntity where TDataHandler : IWriteOnlyDataHandler<TEntity> Type Parameters TViewModel TEntity TDataHandler Inheritance object WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler> Implements IWriteOnlyRequestHandler<TViewModel> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WriteOnlyRequestHandler(IWriteOnlyDataHandler<TEntity>) Abstract class serving as write only request handler. protected WriteOnlyRequestHandler(IWriteOnlyDataHandler<TEntity> dataHandler) Parameters dataHandler IWriteOnlyDataHandler<TEntity> Methods CreateItemAsync(TViewModel, CancellationToken?) Data create request. public Task<ResponseObj<TViewModel>> CreateItemAsync(TViewModel item, CancellationToken? cancellationToken) Parameters item TViewModel Data requested to create. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<TViewModel>> CreateItemsAsync(ICollection<TViewModel>, CancellationToken?) Data create request. public Task<ResponseObj<ICollection<TViewModel>>> CreateItemsAsync(ICollection<TViewModel> items, CancellationToken? cancellationToken) Parameters items ICollection<TViewModel> Collection of data requested to create. cancellationToken CancellationToken? Cancellation token Returns Task<ResponseObj<ICollection<TViewModel>>> MapToCollectionOfDto(ICollection<TEntity>) Maps a collection of TEntity entities to a collection of TViewModel view models. protected abstract ICollection<TViewModel> MapToCollectionOfDto(ICollection<TEntity> entities) Parameters entities ICollection<TEntity> Collection of entity. Returns ICollection<TViewModel> Collection of view model/dto. MapToCollectionOfEntity(ICollection<TViewModel>) Maps a collection of TViewModel to a collection of TEntity entities. protected abstract ICollection<TEntity> MapToCollectionOfEntity(ICollection<TViewModel> requestModels) Parameters requestModels ICollection<TViewModel> Collection of view model/dto Returns ICollection<TEntity> Collection of entity. MapToDto(TEntity) Maps a TEntity entity to a TViewModel view model/dto. protected abstract TViewModel MapToDto(TEntity entity) Parameters entity TEntity Entity. Returns TViewModel View model/dto. MapToEntity(TViewModel) Maps a TViewModel to a TEntity entity. protected abstract TEntity MapToEntity(TViewModel requestModel) Parameters requestModel TViewModel The view model/dto to map to an entity Returns TEntity Entity."
  },
  "api/Quickie.Handlers.Writeonly.Implementation.html": {
    "href": "api/Quickie.Handlers.Writeonly.Implementation.html",
    "title": "Namespace Quickie.Handlers.Writeonly.Implementation | Quickie",
    "keywords": "Namespace Quickie.Handlers.Writeonly.Implementation Classes WriteOnlyRequestHandler<TViewModel, TEntity, TDataHandler> Abstract class serving as write only request handler."
  },
  "api/Quickie.Types.Crud.CrudDto.html": {
    "href": "api/Quickie.Types.Crud.CrudDto.html",
    "title": "Class CrudDto | Quickie",
    "keywords": "Class CrudDto Namespace Quickie.Types.Crud Assembly Quickie.dll Dto representing CRUD operation public abstract record CrudDto : IEquatable<CrudDto> Inheritance object CrudDto Implements IEquatable<CrudDto> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CrudDto() Dto representing CRUD operation protected CrudDto()"
  },
  "api/Quickie.Types.Crud.CrudEntity.html": {
    "href": "api/Quickie.Types.Crud.CrudEntity.html",
    "title": "Class CrudEntity | Quickie",
    "keywords": "Class CrudEntity Namespace Quickie.Types.Crud Assembly Quickie.dll Entity representing CRUD operation public abstract class CrudEntity Inheritance object CrudEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Quickie.Types.Crud.html": {
    "href": "api/Quickie.Types.Crud.html",
    "title": "Namespace Quickie.Types.Crud | Quickie",
    "keywords": "Namespace Quickie.Types.Crud Classes CrudDto Dto representing CRUD operation CrudEntity Entity representing CRUD operation"
  },
  "api/Quickie.Types.Editonly.EditOnlyDto.html": {
    "href": "api/Quickie.Types.Editonly.EditOnlyDto.html",
    "title": "Class EditOnlyDto | Quickie",
    "keywords": "Class EditOnlyDto Namespace Quickie.Types.Editonly Assembly Quickie.dll Dto representing EDIT only operation public abstract record EditOnlyDto : IEquatable<EditOnlyDto> Inheritance object EditOnlyDto Implements IEquatable<EditOnlyDto> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EditOnlyDto() Dto representing EDIT only operation protected EditOnlyDto()"
  },
  "api/Quickie.Types.Editonly.EditOnlyEntity.html": {
    "href": "api/Quickie.Types.Editonly.EditOnlyEntity.html",
    "title": "Class EditOnlyEntity | Quickie",
    "keywords": "Class EditOnlyEntity Namespace Quickie.Types.Editonly Assembly Quickie.dll Entity representing EDIT only operation public abstract class EditOnlyEntity Inheritance object EditOnlyEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EditOnlyEntity() Entity representing EDIT only operation protected EditOnlyEntity()"
  },
  "api/Quickie.Types.Editonly.html": {
    "href": "api/Quickie.Types.Editonly.html",
    "title": "Namespace Quickie.Types.Editonly | Quickie",
    "keywords": "Namespace Quickie.Types.Editonly Classes EditOnlyDto Dto representing EDIT only operation EditOnlyEntity Entity representing EDIT only operation"
  },
  "api/Quickie.Types.ErrorStatusEnum.html": {
    "href": "api/Quickie.Types.ErrorStatusEnum.html",
    "title": "Enum ErrorStatusEnum | Quickie",
    "keywords": "Enum ErrorStatusEnum Namespace Quickie.Types Assembly Quickie.dll Status representing the different severity levels of an error or message. public enum ErrorStatusEnum Fields Critical = 2 Represents critical errors that require immediate attention. These typically indicate a failure or something that must be fixed for the application to function properly. Info = 0 Represents informational messages that do not indicate any issues. These are typically non-critical and meant for logging or user information. Warning = 1 Represents warning messages that indicate potential issues. These require attention but do not block the operation or indicate a failure."
  },
  "api/Quickie.Types.Readonly.IReadOnlyRequestHandler-1.html": {
    "href": "api/Quickie.Types.Readonly.IReadOnlyRequestHandler-1.html",
    "title": "Interface IReadOnlyRequestHandler<TViewModel> | Quickie",
    "keywords": "Interface IReadOnlyRequestHandler<TViewModel> Namespace Quickie.Types.Readonly Assembly Quickie.dll Abstract base class for handling read-only requests, processing operations for the specified view model type. public interface IReadOnlyRequestHandler<TViewModel> where TViewModel : ReadOnlyDto Type Parameters TViewModel The type of the view model that represents the data transfer object for read-only operations."
  },
  "api/Quickie.Types.Readonly.ReadOnlyDto.html": {
    "href": "api/Quickie.Types.Readonly.ReadOnlyDto.html",
    "title": "Class ReadOnlyDto | Quickie",
    "keywords": "Class ReadOnlyDto Namespace Quickie.Types.Readonly Assembly Quickie.dll Dto representing READ only operation public abstract record ReadOnlyDto : IEquatable<ReadOnlyDto> Inheritance object ReadOnlyDto Implements IEquatable<ReadOnlyDto> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyDto() Dto representing READ only operation protected ReadOnlyDto()"
  },
  "api/Quickie.Types.Readonly.ReadOnlyEntity.html": {
    "href": "api/Quickie.Types.Readonly.ReadOnlyEntity.html",
    "title": "Class ReadOnlyEntity | Quickie",
    "keywords": "Class ReadOnlyEntity Namespace Quickie.Types.Readonly Assembly Quickie.dll Entity representing READ only operation public abstract class ReadOnlyEntity Inheritance object ReadOnlyEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Quickie.Types.Readonly.ReadOnlyRequestHandler-1.html": {
    "href": "api/Quickie.Types.Readonly.ReadOnlyRequestHandler-1.html",
    "title": "Class ReadOnlyRequestHandler<TViewModel> | Quickie",
    "keywords": "Class ReadOnlyRequestHandler<TViewModel> Namespace Quickie.Types.Readonly Assembly Quickie.dll Abstract base class for handling read-only requests, processing operations for the specified view model type. public abstract class ReadOnlyRequestHandler<TViewModel> : IReadOnlyRequestHandler<TViewModel> where TViewModel : ReadOnlyDto Type Parameters TViewModel The type of the view model that represents the data transfer object for read-only operations. Inheritance object ReadOnlyRequestHandler<TViewModel> Implements IReadOnlyRequestHandler<TViewModel> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Quickie.Types.Readonly.html": {
    "href": "api/Quickie.Types.Readonly.html",
    "title": "Namespace Quickie.Types.Readonly | Quickie",
    "keywords": "Namespace Quickie.Types.Readonly Classes ReadOnlyDto Dto representing READ only operation ReadOnlyEntity Entity representing READ only operation"
  },
  "api/Quickie.Types.Writable.WriteOnlyDto.html": {
    "href": "api/Quickie.Types.Writable.WriteOnlyDto.html",
    "title": "Class WriteOnlyDto | Quickie",
    "keywords": "Class WriteOnlyDto Namespace Quickie.Types.Writable Assembly Quickie.dll Dto representing WRITE only operation public record WriteOnlyDto : IEquatable<WriteOnlyDto> Inheritance object WriteOnlyDto Implements IEquatable<WriteOnlyDto> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WriteOnlyDto() Dto representing WRITE only operation public WriteOnlyDto()"
  },
  "api/Quickie.Types.Writable.WriteOnlyEntity.html": {
    "href": "api/Quickie.Types.Writable.WriteOnlyEntity.html",
    "title": "Class WriteOnlyEntity | Quickie",
    "keywords": "Class WriteOnlyEntity Namespace Quickie.Types.Writable Assembly Quickie.dll Entity representing WRITE only operation public abstract class WriteOnlyEntity Inheritance object WriteOnlyEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Quickie.Types.Writable.html": {
    "href": "api/Quickie.Types.Writable.html",
    "title": "Namespace Quickie.Types.Writable | Quickie",
    "keywords": "Namespace Quickie.Types.Writable Classes WriteOnlyDto Dto representing WRITE only operation WriteOnlyEntity Entity representing WRITE only operation"
  },
  "api/Quickie.Types.html": {
    "href": "api/Quickie.Types.html",
    "title": "Namespace Quickie.Types | Quickie",
    "keywords": "Namespace Quickie.Types Enums ErrorStatusEnum Status representing the different severity levels of an error or message."
  },
  "docs/examples.html": {
    "href": "docs/examples.html",
    "title": "Build By Example | Quickie",
    "keywords": "Build By Example Here is a simple Web API of a Todo App using Quickie. Step 1: Create a new Web API Project dotnet new webapi -n todo.apis --use-controllers Step 2: Install Quickie Install Quickie from NuGet: dotnet add package Quickie Step 3: Configure Quickie in Program.cs In your Program.cs, configure Quickie as follows: builder.Services.QuickieConfig(options => { options.ShowCustomErrorMessage = true; options.RateLimitingConfiguration = new RateLimitConfiguration { DisableRateLimiting = false }; options.IdempotencyConfiguration = new IdempotentConfiguration { Enable = true }; }); app.AddQuickie(); Explanation: For this project, we are enabling Idempotency. Rate limiting is enabled by default, but we chose to explicitly configure it here. Custom error messages are shown when exceptions occur. Step 4: Create a Dto and Entity public record TodoDto(int Id, string Title, string Description) : CrudDto; public class TodoEntity : CrudEntity { [Key] public int Id { get; set; } public required string Title { get; set; } public required string Description { get; set; } public required DateTime CreatedDate { get; set; } } Step 5: Create a Controller For our Todo app, we need CRUD operations: C -> Create Todo R -> Read Todo U -> Update Todo D -> Delete Todo Here is the TodoController: public class TodoController(ITodoService requestHandler) : CrudController<TodoDto, ITodoService, int>(requestHandler); Step 6: Request handler (Service layer) Setup Todo Service public interface ITodoService : ICrudRequestHandler<TodoDto, int>; public class TodoService(ICrudDataHandler<TodoEntity, int> dataHandler) : CrudRequestHandler<TodoDto, TodoEntity, ITodoRepo, int>(dataHandler), ITodoService { protected override TodoEntity MapToEntity(TodoDto request) { var d = new TodoEntity() { Id = request.Id, Title = request?.Title, Description = request?.Description, CreatedDate = DateTime.Now }; return d; } protected override TodoDto MapToDto(TodoEntity request) { var d = request is not null ? new TodoDto(request.Id, request?.Title + \" id:\" + request?.Id, request?.Description) : default; return d; } } Note: Mapping must be done manually. You can use any mapping library or write your own logic. Todo Repository (Data handler) public interface ITodoRepo : ICrudDataHandler<TodoEntity, int>; public class TodoRepo(ApplicationDbContext dbContext) : CrudDataHandler<TodoEntity, ApplicationDbContext, int>(dbContext), ITodoRepo; Step 7: Configure Database Context public class ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : DbContext(options) { public DbSet<TodoEntity> TodoEntity { get; set; } } Step 8: Register Services in DI Register the services in Program.cs: builder.Services.AddScoped<ITodoService, TodoService>(); builder.Services.AddScoped<ITodoRepo, TodoRepo>(); builder.Services.AddScoped<ICrudDataHandler<TodoEntity, int>, TodoRepo>(); Step 9: Making Requests with Idempotency Since Idempotency is enabled, you must provide an X-Idempotency-Key with each request (POST calls). For duplicate requests, the API will respond with a 409 Conflict status. Example Request: curl -X 'POST' \\ 'http://localhost:5162/api/Todo' \\ -H 'accept: application/json' \\ -H 'X-Idempotency-Key: c311bef0-9953-45b1-bb73-70169e1a3de5' \\ -H 'Content-Type: application/json' \\ -d '{ \"id\": 0, \"title\": \"work\", \"description\": \"feature 0\" }' Not Just CRUD Quickie is versatile and supports scenarios beyond CRUD operations: CRUD for Collection: Bulk create, read, update, and delete operations are supported, making it easy to handle multiple entities in a single request. Readonly: For entities where only read operations are required. Write-only: For scenarios where entities can only be written to, but not read. Edit-only: For entities that support updates but not creation or deletion. Readonly Collections: You can define collections where only bulk read operations are required, and no modifications are allowed. You can choose the appropriate functionality based on your application's needs. API is Ready! That's it! Your fully functional Web API with: CRUD functionality Built-in Idempotency (to prevent duplicate requests) Built-in Rate Limiting (enabled by default) Things to Consider DTOs should be record types. Entities are class (reference types). More examples here."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Quickie",
    "keywords": "Getting Started To start using Quickie in your .NET project, follow these steps: Adding Quickie to Your Project Install Quickie via NuGet: dotnet add package Quickie Add Quickie configuration in your Program.cs file: Default Configuration: builder.Services.QuickieConfig(); app.AddQuickie(); Customized Configuration (simple demo it is, but you can go nuts with configuration): builder.Services.QuickieConfig(options => { options.ShowCustomErrorMessage = false; options.RateLimitingConfiguration = new RateLimitConfiguration { DisableRateLimiting = false }; options.IdempotencyConfiguration = new IdempotentConfiguration { Enable = true }; }); app.AddQuickie(); Explanation of Key Features Rate Limiting: Manage API usage with customizable rate-limiting policies. To know more click here. Idempotency: Ensure consistent results for repeated API calls, with support for custom providers. To know more click here."
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Quickie",
    "keywords": "Introduction How It Works Quickie operates by injecting essential middleware and services into your application pipeline. It provides base classes that you can implement to create APIs with minimal effort and focus solely on your logic. With Quickie, all you need to do is define your required classes and you're ready to go — no endless boilerplate, no hassle. Quickie is perfect for building tracer bullet APIs, prototypes, or any sorta proof-of-concept projects. Whether you're experimenting with ideas or rapidly iterating, Quickie keeps things simple and fun, without feeling like you're trapped in enterprise-grade complexity. Here’s a high-level overview of its workflow: Service Registration: Quickie sets up services for rate limiting, idempotency, and other configurable options through QuickieConfig() and complete the setup with AddQuickie(). Idempotency made simple: Ensure API calls yield consistent results when retried, with support for custom idempotency providers. Built-In Rate Limiting: Protect your APIs from overuse with an easy-to-setup rate-limiting mechanism. Customizable Options: You can fine-tune configurations, such as permitting limits for rate limiting or choosing a custom idempotency provider (Redis, or any external databases). Custom Error Messages: Fine-tune responses with the option to show user-friendly error messages or show exact exception message."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to Quickie! | Quickie",
    "keywords": "Welcome to Quickie! Quickie is an open-source library designed to help you build APIs and backend services QUICKLY in .NET. It provides base classes that you can implement to create APIs and backend service with minimal effort. With Quickie, all you need to do is define some classes, and you're ready to go — no endless boilerplate, no hassle. Quickie is perfect for spinning up tracer bullet APIs or proof-of-concept projects. Whether you're experimenting with ideas or rapidly iterating, Quickie keeps things simple and fun, without feeling like you're trapped in enterprise-grade complexity. Why Quickie? Remove boiler code and focus of your main logic. Minimal code — just focus on your DTOs and Entities. Optional support for features like rate limiting, and idempotency. Optimized for working with SQL databases, making data access and management straightforward. Flexibility in Configuration: Switch between defaults and custom setups seamlessly. Quick Start Notes: Check out the Documentation to get started with Quickie. Get started Build by example Start building lightweight, no-fuss APIs with Quickie !"
  }
}