### YamlMime:ManagedReference
items:
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3
  commentId: T:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3
  id: ReadOnlyCollectionRequestHandler`3
  parent: Quickie.Handlers.Readonly.Implementation
  children:
  - Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.#ctor(Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler{`1})
  - Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetAsync``1(``0,System.Threading.CancellationToken)
  - Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetCollectionByIdAsync``1(System.Int64,``0,System.Threading.CancellationToken)
  - Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetPaginatedDataAsync``1(``0,System.Threading.CancellationToken)
  - Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.MapToDto(System.Collections.Generic.ICollection{`1})
  langs:
  - csharp
  - vb
  name: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>
  type: Class
  source:
    id: ReadOnlyCollectionRequestHandler
    path: C:\Users\stpt4\OneDrive\Desktop\libs\Quickie\src\Quickie\Handlers\Readonly\Implementation\ReadOnlyCollectionRequestHandler.cs
    startLine: 7
  assemblies:
  - Quickie
  namespace: Quickie.Handlers.Readonly.Implementation
  syntax:
    content: 'public abstract class ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler> : IReadOnlyCollectionRequestHandler<TViewModel> where TViewModel : ReadOnlyDto where TEntity : ReadOnlyEntity where TDataHandler : IReadOnlyCollectionDataHandler<TEntity>'
    typeParameters:
    - id: TViewModel
    - id: TEntity
    - id: TDataHandler
    content.vb: Public MustInherit Class ReadOnlyCollectionRequestHandler(Of TViewModel As ReadOnlyDto, TEntity As ReadOnlyEntity, TDataHandler As IReadOnlyCollectionDataHandler(Of TEntity)) Implements IReadOnlyCollectionRequestHandler(Of TViewModel)
  inheritance:
  - System.Object
  implements:
  - Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{{TViewModel}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler)
  name.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler)
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.#ctor(Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler{`1})
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.#ctor(Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler{`1})
  id: '#ctor(Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler{`1})'
  parent: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3
  langs:
  - csharp
  - vb
  name: ReadOnlyCollectionRequestHandler(IReadOnlyCollectionDataHandler<TEntity>)
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.ReadOnlyCollectionRequestHandler(IReadOnlyCollectionDataHandler<TEntity>)
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.ReadOnlyCollectionRequestHandler(Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler<TEntity>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\stpt4\OneDrive\Desktop\libs\Quickie\src\Quickie\Handlers\Readonly\Implementation\ReadOnlyCollectionRequestHandler.cs
    startLine: 7
  assemblies:
  - Quickie
  namespace: Quickie.Handlers.Readonly.Implementation
  syntax:
    content: protected ReadOnlyCollectionRequestHandler(IReadOnlyCollectionDataHandler<TEntity> readOnlyCollectionDataHandler)
    parameters:
    - id: readOnlyCollectionDataHandler
      type: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler{{TEntity}}
    content.vb: Protected Sub New(readOnlyCollectionDataHandler As IReadOnlyCollectionDataHandler(Of TEntity))
  overload: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.#ctor*
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).New(IReadOnlyCollectionDataHandler(Of TEntity))
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).New(Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler(Of TEntity))
  name.vb: New(IReadOnlyCollectionDataHandler(Of TEntity))
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetAsync``1(``0,System.Threading.CancellationToken)
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetAsync``1(``0,System.Threading.CancellationToken)
  id: GetAsync``1(``0,System.Threading.CancellationToken)
  parent: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3
  langs:
  - csharp
  - vb
  name: GetAsync<TRequestModel>(TRequestModel?, CancellationToken)
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetAsync<TRequestModel>(TRequestModel?, CancellationToken)
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetAsync<TRequestModel>(TRequestModel?, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetAsync
    path: C:\Users\stpt4\OneDrive\Desktop\libs\Quickie\src\Quickie\Handlers\Readonly\Implementation\ReadOnlyCollectionRequestHandler.cs
    startLine: 12
  assemblies:
  - Quickie
  namespace: Quickie.Handlers.Readonly.Implementation
  summary: Get collection of data by provided request model.
  example: []
  syntax:
    content: 'public Task<PaginatedDataObj<TViewModel>> GetAsync<TRequestModel>(TRequestModel? request, CancellationToken cancellationToken) where TRequestModel : RequestForDataObj'
    parameters:
    - id: request
      type: '{TRequestModel}'
      description: Data request model of type RequestForDataDto.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token.
    typeParameters:
    - id: TRequestModel
    return:
      type: System.Threading.Tasks.Task{Quickie.DataObj.PaginatedDataObj{{TViewModel}}}
      description: Collection of data wrapped by response dto.
    content.vb: Public Function GetAsync(Of TRequestModel As RequestForDataObj)(request As TRequestModel, cancellationToken As CancellationToken) As Task(Of PaginatedDataObj(Of TViewModel))
  overload: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetAsync*
  implements:
  - Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{{TViewModel}}.GetAsync``1({TRequestModel},System.Threading.CancellationToken)
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetAsync(Of TRequestModel)(TRequestModel, CancellationToken)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetAsync(Of TRequestModel)(TRequestModel, System.Threading.CancellationToken)
  name.vb: GetAsync(Of TRequestModel)(TRequestModel, CancellationToken)
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetPaginatedDataAsync``1(``0,System.Threading.CancellationToken)
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetPaginatedDataAsync``1(``0,System.Threading.CancellationToken)
  id: GetPaginatedDataAsync``1(``0,System.Threading.CancellationToken)
  parent: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3
  langs:
  - csharp
  - vb
  name: GetPaginatedDataAsync<TRequestModel>(TRequestModel?, CancellationToken)
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetPaginatedDataAsync<TRequestModel>(TRequestModel?, CancellationToken)
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetPaginatedDataAsync<TRequestModel>(TRequestModel?, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetPaginatedDataAsync
    path: C:\Users\stpt4\OneDrive\Desktop\libs\Quickie\src\Quickie\Handlers\Readonly\Implementation\ReadOnlyCollectionRequestHandler.cs
    startLine: 25
  assemblies:
  - Quickie
  namespace: Quickie.Handlers.Readonly.Implementation
  summary: Get collection of data wrapped around a nice PaginatedDataObj with total data.
  example: []
  syntax:
    content: 'public Task<PaginatedDataObj<TViewModel>> GetPaginatedDataAsync<TRequestModel>(TRequestModel? request, CancellationToken cancellationToken) where TRequestModel : RequestForDataObj'
    parameters:
    - id: request
      type: '{TRequestModel}'
      description: Data request model
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    typeParameters:
    - id: TRequestModel
    return:
      type: System.Threading.Tasks.Task{Quickie.DataObj.PaginatedDataObj{{TViewModel}}}
      description: ''
    content.vb: Public Function GetPaginatedDataAsync(Of TRequestModel As RequestForDataObj)(request As TRequestModel, cancellationToken As CancellationToken) As Task(Of PaginatedDataObj(Of TViewModel))
  overload: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetPaginatedDataAsync*
  implements:
  - Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{{TViewModel}}.GetPaginatedDataAsync``1({TRequestModel},System.Threading.CancellationToken)
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetPaginatedDataAsync(Of TRequestModel)(TRequestModel, CancellationToken)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetPaginatedDataAsync(Of TRequestModel)(TRequestModel, System.Threading.CancellationToken)
  name.vb: GetPaginatedDataAsync(Of TRequestModel)(TRequestModel, CancellationToken)
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetCollectionByIdAsync``1(System.Int64,``0,System.Threading.CancellationToken)
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetCollectionByIdAsync``1(System.Int64,``0,System.Threading.CancellationToken)
  id: GetCollectionByIdAsync``1(System.Int64,``0,System.Threading.CancellationToken)
  parent: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3
  langs:
  - csharp
  - vb
  name: GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, CancellationToken)
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, CancellationToken)
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetCollectionByIdAsync
    path: C:\Users\stpt4\OneDrive\Desktop\libs\Quickie\src\Quickie\Handlers\Readonly\Implementation\ReadOnlyCollectionRequestHandler.cs
    startLine: 36
  assemblies:
  - Quickie
  namespace: Quickie.Handlers.Readonly.Implementation
  summary: Get collection of data for provided identifier of type long.
  example: []
  syntax:
    content: 'public Task<PaginatedDataObj<TViewModel>> GetCollectionByIdAsync<TRequestModel>(long id, TRequestModel? request, CancellationToken cancellationToken) where TRequestModel : RequestForDataObj'
    parameters:
    - id: id
      type: System.Int64
      description: identifier of type long
    - id: request
      type: '{TRequestModel}'
      description: Data request model of type RequestForDataDto.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token.
    typeParameters:
    - id: TRequestModel
    return:
      type: System.Threading.Tasks.Task{Quickie.DataObj.PaginatedDataObj{{TViewModel}}}
      description: ''
    content.vb: Public Function GetCollectionByIdAsync(Of TRequestModel As RequestForDataObj)(id As Long, request As TRequestModel, cancellationToken As CancellationToken) As Task(Of PaginatedDataObj(Of TViewModel))
  overload: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetCollectionByIdAsync*
  implements:
  - Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{{TViewModel}}.GetCollectionByIdAsync``1(System.Int64,{TRequestModel},System.Threading.CancellationToken)
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, CancellationToken)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, System.Threading.CancellationToken)
  name.vb: GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, CancellationToken)
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.MapToDto(System.Collections.Generic.ICollection{`1})
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.MapToDto(System.Collections.Generic.ICollection{`1})
  id: MapToDto(System.Collections.Generic.ICollection{`1})
  parent: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3
  langs:
  - csharp
  - vb
  name: MapToDto(ICollection<TEntity>)
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.MapToDto(ICollection<TEntity>)
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.MapToDto(System.Collections.Generic.ICollection<TEntity>)
  type: Method
  source:
    id: MapToDto
    path: C:\Users\stpt4\OneDrive\Desktop\libs\Quickie\src\Quickie\Handlers\Readonly\Implementation\ReadOnlyCollectionRequestHandler.cs
    startLine: 51
  assemblies:
  - Quickie
  namespace: Quickie.Handlers.Readonly.Implementation
  summary: Mapping profile. Map from collection of Entity type to your collection of data transfer object.
  example: []
  syntax:
    content: protected abstract ICollection<TViewModel> MapToDto(ICollection<TEntity> entity)
    parameters:
    - id: entity
      type: System.Collections.Generic.ICollection{{TEntity}}
      description: Collection of entity object.
    return:
      type: System.Collections.Generic.ICollection{{TViewModel}}
      description: Mapped from collection of Entity, a collection data transfer object.
    content.vb: Protected MustOverride Function MapToDto(entity As ICollection(Of TEntity)) As ICollection(Of TViewModel)
  overload: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.MapToDto*
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToDto(ICollection(Of TEntity))
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToDto(System.Collections.Generic.ICollection(Of TEntity))
  name.vb: MapToDto(ICollection(Of TEntity))
references:
- uid: Quickie.Handlers.Readonly.Implementation
  commentId: N:Quickie.Handlers.Readonly.Implementation
  href: Quickie.html
  name: Quickie.Handlers.Readonly.Implementation
  nameWithType: Quickie.Handlers.Readonly.Implementation
  fullName: Quickie.Handlers.Readonly.Implementation
  spec.csharp:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.Handlers
    name: Handlers
    href: Quickie.Handlers.html
  - name: .
  - uid: Quickie.Handlers.Readonly
    name: Readonly
    href: Quickie.Handlers.Readonly.html
  - name: .
  - uid: Quickie.Handlers.Readonly.Implementation
    name: Implementation
    href: Quickie.Handlers.Readonly.Implementation.html
  spec.vb:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.Handlers
    name: Handlers
    href: Quickie.Handlers.html
  - name: .
  - uid: Quickie.Handlers.Readonly
    name: Readonly
    href: Quickie.Handlers.Readonly.html
  - name: .
  - uid: Quickie.Handlers.Readonly.Implementation
    name: Implementation
    href: Quickie.Handlers.Readonly.Implementation.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{{TViewModel}}
  commentId: T:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{`0}
  parent: Quickie.Handlers.Readonly.Definition
  definition: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1
  href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html
  name: IReadOnlyCollectionRequestHandler<TViewModel>
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel)
  name.vb: IReadOnlyCollectionRequestHandler(Of TViewModel)
  spec.csharp:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1
    name: IReadOnlyCollectionRequestHandler
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html
  - name: <
  - name: TViewModel
  - name: '>'
  spec.vb:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1
    name: IReadOnlyCollectionRequestHandler
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TViewModel
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1
  commentId: T:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1
  href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html
  name: IReadOnlyCollectionRequestHandler<TViewModel>
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel)
  name.vb: IReadOnlyCollectionRequestHandler(Of TViewModel)
  spec.csharp:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1
    name: IReadOnlyCollectionRequestHandler
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html
  - name: <
  - name: TViewModel
  - name: '>'
  spec.vb:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1
    name: IReadOnlyCollectionRequestHandler
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TViewModel
  - name: )
- uid: Quickie.Handlers.Readonly.Definition
  commentId: N:Quickie.Handlers.Readonly.Definition
  href: Quickie.html
  name: Quickie.Handlers.Readonly.Definition
  nameWithType: Quickie.Handlers.Readonly.Definition
  fullName: Quickie.Handlers.Readonly.Definition
  spec.csharp:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.Handlers
    name: Handlers
    href: Quickie.Handlers.html
  - name: .
  - uid: Quickie.Handlers.Readonly
    name: Readonly
    href: Quickie.Handlers.Readonly.html
  - name: .
  - uid: Quickie.Handlers.Readonly.Definition
    name: Definition
    href: Quickie.Handlers.Readonly.Definition.html
  spec.vb:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.Handlers
    name: Handlers
    href: Quickie.Handlers.html
  - name: .
  - uid: Quickie.Handlers.Readonly
    name: Readonly
    href: Quickie.Handlers.Readonly.html
  - name: .
  - uid: Quickie.Handlers.Readonly.Definition
    name: Definition
    href: Quickie.Handlers.Readonly.Definition.html
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.#ctor*
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.#ctor
  href: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_3__ctor_Quickie_DataHandlers_Readonly_Definition_IReadOnlyCollectionDataHandler__1__
  name: ReadOnlyCollectionRequestHandler
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.ReadOnlyCollectionRequestHandler
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.ReadOnlyCollectionRequestHandler
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).New
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).New
  name.vb: New
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler{{TEntity}}
  commentId: T:Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler{`0}
  parent: Quickie.DataHandlers.Readonly.Definition
  definition: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`1
  href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler-1.html
  name: IReadOnlyCollectionDataHandler<TEntity>
  nameWithType: IReadOnlyCollectionDataHandler<TEntity>
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler<TEntity>
  nameWithType.vb: IReadOnlyCollectionDataHandler(Of TEntity)
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler(Of TEntity)
  name.vb: IReadOnlyCollectionDataHandler(Of TEntity)
  spec.csharp:
  - uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`1
    name: IReadOnlyCollectionDataHandler
    href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler-1.html
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`1
    name: IReadOnlyCollectionDataHandler
    href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`1
  commentId: T:Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`1
  href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler-1.html
  name: IReadOnlyCollectionDataHandler<TEntity>
  nameWithType: IReadOnlyCollectionDataHandler<TEntity>
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler<TEntity>
  nameWithType.vb: IReadOnlyCollectionDataHandler(Of TEntity)
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler(Of TEntity)
  name.vb: IReadOnlyCollectionDataHandler(Of TEntity)
  spec.csharp:
  - uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`1
    name: IReadOnlyCollectionDataHandler
    href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler-1.html
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler`1
    name: IReadOnlyCollectionDataHandler
    href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyCollectionDataHandler-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: Quickie.DataHandlers.Readonly.Definition
  commentId: N:Quickie.DataHandlers.Readonly.Definition
  href: Quickie.html
  name: Quickie.DataHandlers.Readonly.Definition
  nameWithType: Quickie.DataHandlers.Readonly.Definition
  fullName: Quickie.DataHandlers.Readonly.Definition
  spec.csharp:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.DataHandlers
    name: DataHandlers
    href: Quickie.DataHandlers.html
  - name: .
  - uid: Quickie.DataHandlers.Readonly
    name: Readonly
    href: Quickie.DataHandlers.Readonly.html
  - name: .
  - uid: Quickie.DataHandlers.Readonly.Definition
    name: Definition
    href: Quickie.DataHandlers.Readonly.Definition.html
  spec.vb:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.DataHandlers
    name: DataHandlers
    href: Quickie.DataHandlers.html
  - name: .
  - uid: Quickie.DataHandlers.Readonly
    name: Readonly
    href: Quickie.DataHandlers.Readonly.html
  - name: .
  - uid: Quickie.DataHandlers.Readonly.Definition
    name: Definition
    href: Quickie.DataHandlers.Readonly.Definition.html
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetAsync*
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetAsync
  href: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_3_GetAsync__1___0_System_Threading_CancellationToken_
  name: GetAsync
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetAsync
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetAsync
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetAsync
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetAsync
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{{TViewModel}}.GetAsync``1({TRequestModel},System.Threading.CancellationToken)
  commentId: M:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{`0}.GetAsync``1(``0,System.Threading.CancellationToken)
  parent: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{{TViewModel}}
  definition: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetAsync``1(``0,System.Threading.CancellationToken)
  href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetAsync__1___0_System_Threading_CancellationToken_
  name: GetAsync<TRequestModel>(TRequestModel, CancellationToken)
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>.GetAsync<TRequestModel>(TRequestModel, CancellationToken)
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>.GetAsync<TRequestModel>(TRequestModel, System.Threading.CancellationToken)
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel).GetAsync(Of TRequestModel)(TRequestModel, CancellationToken)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel).GetAsync(Of TRequestModel)(TRequestModel, System.Threading.CancellationToken)
  name.vb: GetAsync(Of TRequestModel)(TRequestModel, CancellationToken)
  spec.csharp:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{`0}.GetAsync``1(``0,System.Threading.CancellationToken)
    name: GetAsync
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetAsync__1___0_System_Threading_CancellationToken_
  - name: <
  - name: TRequestModel
  - name: '>'
  - name: (
  - name: TRequestModel
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{`0}.GetAsync``1(``0,System.Threading.CancellationToken)
    name: GetAsync
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetAsync__1___0_System_Threading_CancellationToken_
  - name: (
  - name: Of
  - name: " "
  - name: TRequestModel
  - name: )
  - name: (
  - name: TRequestModel
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: '{TRequestModel}'
  commentId: '!:TRequestModel'
  definition: TRequestModel
  name: TRequestModel
  nameWithType: TRequestModel
  fullName: TRequestModel
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Quickie.DataObj.PaginatedDataObj{{TViewModel}}}
  commentId: T:System.Threading.Tasks.Task{Quickie.DataObj.PaginatedDataObj{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<PaginatedDataObj<TViewModel>>
  nameWithType: Task<PaginatedDataObj<TViewModel>>
  fullName: System.Threading.Tasks.Task<Quickie.DataObj.PaginatedDataObj<TViewModel>>
  nameWithType.vb: Task(Of PaginatedDataObj(Of TViewModel))
  fullName.vb: System.Threading.Tasks.Task(Of Quickie.DataObj.PaginatedDataObj(Of TViewModel))
  name.vb: Task(Of PaginatedDataObj(Of TViewModel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Quickie.DataObj.PaginatedDataObj`1
    name: PaginatedDataObj
    href: Quickie.DataObj.PaginatedDataObj-1.html
  - name: <
  - name: TViewModel
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Quickie.DataObj.PaginatedDataObj`1
    name: PaginatedDataObj
    href: Quickie.DataObj.PaginatedDataObj-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TViewModel
  - name: )
  - name: )
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetAsync``1(``0,System.Threading.CancellationToken)
  commentId: M:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetAsync``1(``0,System.Threading.CancellationToken)
  isExternal: true
  href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetAsync__1___0_System_Threading_CancellationToken_
  name: GetAsync<TRequestModel>(TRequestModel, CancellationToken)
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>.GetAsync<TRequestModel>(TRequestModel, CancellationToken)
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>.GetAsync<TRequestModel>(TRequestModel, System.Threading.CancellationToken)
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel).GetAsync(Of TRequestModel)(TRequestModel, CancellationToken)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel).GetAsync(Of TRequestModel)(TRequestModel, System.Threading.CancellationToken)
  name.vb: GetAsync(Of TRequestModel)(TRequestModel, CancellationToken)
  spec.csharp:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetAsync``1(``0,System.Threading.CancellationToken)
    name: GetAsync
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetAsync__1___0_System_Threading_CancellationToken_
  - name: <
  - name: TRequestModel
  - name: '>'
  - name: (
  - name: TRequestModel
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetAsync``1(``0,System.Threading.CancellationToken)
    name: GetAsync
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetAsync__1___0_System_Threading_CancellationToken_
  - name: (
  - name: Of
  - name: " "
  - name: TRequestModel
  - name: )
  - name: (
  - name: TRequestModel
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: TRequestModel
  name: TRequestModel
  nameWithType: TRequestModel
  fullName: TRequestModel
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetPaginatedDataAsync*
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetPaginatedDataAsync
  href: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_3_GetPaginatedDataAsync__1___0_System_Threading_CancellationToken_
  name: GetPaginatedDataAsync
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetPaginatedDataAsync
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetPaginatedDataAsync
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetPaginatedDataAsync
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetPaginatedDataAsync
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{{TViewModel}}.GetPaginatedDataAsync``1({TRequestModel},System.Threading.CancellationToken)
  commentId: M:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{`0}.GetPaginatedDataAsync``1(``0,System.Threading.CancellationToken)
  parent: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{{TViewModel}}
  definition: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetPaginatedDataAsync``1(``0,System.Threading.CancellationToken)
  href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetPaginatedDataAsync__1___0_System_Threading_CancellationToken_
  name: GetPaginatedDataAsync<TRequestModel>(TRequestModel, CancellationToken)
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>.GetPaginatedDataAsync<TRequestModel>(TRequestModel, CancellationToken)
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>.GetPaginatedDataAsync<TRequestModel>(TRequestModel, System.Threading.CancellationToken)
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel).GetPaginatedDataAsync(Of TRequestModel)(TRequestModel, CancellationToken)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel).GetPaginatedDataAsync(Of TRequestModel)(TRequestModel, System.Threading.CancellationToken)
  name.vb: GetPaginatedDataAsync(Of TRequestModel)(TRequestModel, CancellationToken)
  spec.csharp:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{`0}.GetPaginatedDataAsync``1(``0,System.Threading.CancellationToken)
    name: GetPaginatedDataAsync
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetPaginatedDataAsync__1___0_System_Threading_CancellationToken_
  - name: <
  - name: TRequestModel
  - name: '>'
  - name: (
  - name: TRequestModel
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{`0}.GetPaginatedDataAsync``1(``0,System.Threading.CancellationToken)
    name: GetPaginatedDataAsync
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetPaginatedDataAsync__1___0_System_Threading_CancellationToken_
  - name: (
  - name: Of
  - name: " "
  - name: TRequestModel
  - name: )
  - name: (
  - name: TRequestModel
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetPaginatedDataAsync``1(``0,System.Threading.CancellationToken)
  commentId: M:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetPaginatedDataAsync``1(``0,System.Threading.CancellationToken)
  isExternal: true
  href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetPaginatedDataAsync__1___0_System_Threading_CancellationToken_
  name: GetPaginatedDataAsync<TRequestModel>(TRequestModel, CancellationToken)
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>.GetPaginatedDataAsync<TRequestModel>(TRequestModel, CancellationToken)
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>.GetPaginatedDataAsync<TRequestModel>(TRequestModel, System.Threading.CancellationToken)
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel).GetPaginatedDataAsync(Of TRequestModel)(TRequestModel, CancellationToken)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel).GetPaginatedDataAsync(Of TRequestModel)(TRequestModel, System.Threading.CancellationToken)
  name.vb: GetPaginatedDataAsync(Of TRequestModel)(TRequestModel, CancellationToken)
  spec.csharp:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetPaginatedDataAsync``1(``0,System.Threading.CancellationToken)
    name: GetPaginatedDataAsync
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetPaginatedDataAsync__1___0_System_Threading_CancellationToken_
  - name: <
  - name: TRequestModel
  - name: '>'
  - name: (
  - name: TRequestModel
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetPaginatedDataAsync``1(``0,System.Threading.CancellationToken)
    name: GetPaginatedDataAsync
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetPaginatedDataAsync__1___0_System_Threading_CancellationToken_
  - name: (
  - name: Of
  - name: " "
  - name: TRequestModel
  - name: )
  - name: (
  - name: TRequestModel
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetCollectionByIdAsync*
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.GetCollectionByIdAsync
  href: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_3_GetCollectionByIdAsync__1_System_Int64___0_System_Threading_CancellationToken_
  name: GetCollectionByIdAsync
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetCollectionByIdAsync
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.GetCollectionByIdAsync
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetCollectionByIdAsync
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).GetCollectionByIdAsync
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{{TViewModel}}.GetCollectionByIdAsync``1(System.Int64,{TRequestModel},System.Threading.CancellationToken)
  commentId: M:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{`0}.GetCollectionByIdAsync``1(System.Int64,``0,System.Threading.CancellationToken)
  parent: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{{TViewModel}}
  definition: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetCollectionByIdAsync``1(System.Int64,``0,System.Threading.CancellationToken)
  href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetCollectionByIdAsync__1_System_Int64___0_System_Threading_CancellationToken_
  name: GetCollectionByIdAsync<TRequestModel>(long, TRequestModel, CancellationToken)
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>.GetCollectionByIdAsync<TRequestModel>(long, TRequestModel, CancellationToken)
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>.GetCollectionByIdAsync<TRequestModel>(long, TRequestModel, System.Threading.CancellationToken)
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel).GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, CancellationToken)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel).GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, System.Threading.CancellationToken)
  name.vb: GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, CancellationToken)
  spec.csharp:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{`0}.GetCollectionByIdAsync``1(System.Int64,``0,System.Threading.CancellationToken)
    name: GetCollectionByIdAsync
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetCollectionByIdAsync__1_System_Int64___0_System_Threading_CancellationToken_
  - name: <
  - name: TRequestModel
  - name: '>'
  - name: (
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - name: TRequestModel
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler{`0}.GetCollectionByIdAsync``1(System.Int64,``0,System.Threading.CancellationToken)
    name: GetCollectionByIdAsync
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetCollectionByIdAsync__1_System_Int64___0_System_Threading_CancellationToken_
  - name: (
  - name: Of
  - name: " "
  - name: TRequestModel
  - name: )
  - name: (
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - name: TRequestModel
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetCollectionByIdAsync``1(System.Int64,``0,System.Threading.CancellationToken)
  commentId: M:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetCollectionByIdAsync``1(System.Int64,``0,System.Threading.CancellationToken)
  isExternal: true
  href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetCollectionByIdAsync__1_System_Int64___0_System_Threading_CancellationToken_
  name: GetCollectionByIdAsync<TRequestModel>(long, TRequestModel, CancellationToken)
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>.GetCollectionByIdAsync<TRequestModel>(long, TRequestModel, CancellationToken)
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>.GetCollectionByIdAsync<TRequestModel>(long, TRequestModel, System.Threading.CancellationToken)
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel).GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, CancellationToken)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel).GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, System.Threading.CancellationToken)
  name.vb: GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, CancellationToken)
  spec.csharp:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetCollectionByIdAsync``1(System.Int64,``0,System.Threading.CancellationToken)
    name: GetCollectionByIdAsync
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetCollectionByIdAsync__1_System_Int64___0_System_Threading_CancellationToken_
  - name: <
  - name: TRequestModel
  - name: '>'
  - name: (
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - name: TRequestModel
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetCollectionByIdAsync``1(System.Int64,``0,System.Threading.CancellationToken)
    name: GetCollectionByIdAsync
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetCollectionByIdAsync__1_System_Int64___0_System_Threading_CancellationToken_
  - name: (
  - name: Of
  - name: " "
  - name: TRequestModel
  - name: )
  - name: (
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - name: TRequestModel
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.MapToDto*
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler`3.MapToDto
  href: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler-3.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyCollectionRequestHandler_3_MapToDto_System_Collections_Generic_ICollection__1__
  name: MapToDto
  nameWithType: ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.MapToDto
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler<TViewModel, TEntity, TDataHandler>.MapToDto
  nameWithType.vb: ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToDto
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyCollectionRequestHandler(Of TViewModel, TEntity, TDataHandler).MapToDto
- uid: System.Collections.Generic.ICollection{{TEntity}}
  commentId: T:System.Collections.Generic.ICollection{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<TEntity>
  nameWithType: ICollection<TEntity>
  fullName: System.Collections.Generic.ICollection<TEntity>
  nameWithType.vb: ICollection(Of TEntity)
  fullName.vb: System.Collections.Generic.ICollection(Of TEntity)
  name.vb: ICollection(Of TEntity)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: System.Collections.Generic.ICollection{{TViewModel}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<TViewModel>
  nameWithType: ICollection<TViewModel>
  fullName: System.Collections.Generic.ICollection<TViewModel>
  nameWithType.vb: ICollection(Of TViewModel)
  fullName.vb: System.Collections.Generic.ICollection(Of TViewModel)
  name.vb: ICollection(Of TViewModel)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TViewModel
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TViewModel
  - name: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
