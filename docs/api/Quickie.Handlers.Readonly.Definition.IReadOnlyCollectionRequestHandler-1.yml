### YamlMime:ManagedReference
items:
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1
  commentId: T:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1
  id: IReadOnlyCollectionRequestHandler`1
  parent: Quickie.Handlers.Readonly.Definition
  children:
  - Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetAsync``1(``0,System.Threading.CancellationToken)
  - Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetCollectionByIdAsync``1(System.Int64,``0,System.Threading.CancellationToken)
  - Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetPaginatedDataAsync``1(``0,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IReadOnlyCollectionRequestHandler<TViewModel>
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>
  type: Interface
  source:
    id: IReadOnlyCollectionRequestHandler
    path: C:\Users\stpt4\OneDrive\Desktop\libs\Quickie\src\Quickie\Handlers\Readonly\Definition\IReadOnlyCollectionRequestHandler.cs
    startLine: 8
  assemblies:
  - Quickie
  namespace: Quickie.Handlers.Readonly.Definition
  summary: Abstract base class for handling collections of read-only requests, processing operations for the specified view model type.
  example: []
  syntax:
    content: 'public interface IReadOnlyCollectionRequestHandler<TViewModel> where TViewModel : ReadOnlyDto'
    typeParameters:
    - id: TViewModel
      description: The type of the view model that represents the data transfer object for read-only operations.
    content.vb: Public Interface IReadOnlyCollectionRequestHandler(Of TViewModel As ReadOnlyDto)
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel)
  name.vb: IReadOnlyCollectionRequestHandler(Of TViewModel)
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetAsync``1(``0,System.Threading.CancellationToken)
  commentId: M:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetAsync``1(``0,System.Threading.CancellationToken)
  id: GetAsync``1(``0,System.Threading.CancellationToken)
  parent: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1
  langs:
  - csharp
  - vb
  name: GetAsync<TRequestModel>(TRequestModel?, CancellationToken)
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>.GetAsync<TRequestModel>(TRequestModel?, CancellationToken)
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>.GetAsync<TRequestModel>(TRequestModel?, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetAsync
    path: C:\Users\stpt4\OneDrive\Desktop\libs\Quickie\src\Quickie\Handlers\Readonly\Definition\IReadOnlyCollectionRequestHandler.cs
    startLine: 16
  assemblies:
  - Quickie
  namespace: Quickie.Handlers.Readonly.Definition
  summary: Get collection of data by provided request model.
  example: []
  syntax:
    content: 'Task<PaginatedDataObj<TViewModel>> GetAsync<TRequestModel>(TRequestModel? request, CancellationToken cancellationToken) where TRequestModel : RequestForDataObj'
    parameters:
    - id: request
      type: '{TRequestModel}'
      description: Data request model of type RequestForDataDto.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token.
    typeParameters:
    - id: TRequestModel
    return:
      type: System.Threading.Tasks.Task{Quickie.DataObj.PaginatedDataObj{{TViewModel}}}
      description: Collection of data wrapped by response dto.
    content.vb: Function GetAsync(Of TRequestModel As RequestForDataObj)(request As TRequestModel, cancellationToken As CancellationToken) As Task(Of PaginatedDataObj(Of TViewModel))
  overload: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetAsync*
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel).GetAsync(Of TRequestModel)(TRequestModel, CancellationToken)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel).GetAsync(Of TRequestModel)(TRequestModel, System.Threading.CancellationToken)
  name.vb: GetAsync(Of TRequestModel)(TRequestModel, CancellationToken)
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetPaginatedDataAsync``1(``0,System.Threading.CancellationToken)
  commentId: M:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetPaginatedDataAsync``1(``0,System.Threading.CancellationToken)
  id: GetPaginatedDataAsync``1(``0,System.Threading.CancellationToken)
  parent: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1
  langs:
  - csharp
  - vb
  name: GetPaginatedDataAsync<TRequestModel>(TRequestModel?, CancellationToken)
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>.GetPaginatedDataAsync<TRequestModel>(TRequestModel?, CancellationToken)
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>.GetPaginatedDataAsync<TRequestModel>(TRequestModel?, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetPaginatedDataAsync
    path: C:\Users\stpt4\OneDrive\Desktop\libs\Quickie\src\Quickie\Handlers\Readonly\Definition\IReadOnlyCollectionRequestHandler.cs
    startLine: 24
  assemblies:
  - Quickie
  namespace: Quickie.Handlers.Readonly.Definition
  summary: Get collection of data wrapped around a nice PaginatedDataObj with total data.
  example: []
  syntax:
    content: 'Task<PaginatedDataObj<TViewModel>> GetPaginatedDataAsync<TRequestModel>(TRequestModel? request, CancellationToken cancellationToken) where TRequestModel : RequestForDataObj'
    parameters:
    - id: request
      type: '{TRequestModel}'
      description: Data request model
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    typeParameters:
    - id: TRequestModel
    return:
      type: System.Threading.Tasks.Task{Quickie.DataObj.PaginatedDataObj{{TViewModel}}}
      description: ''
    content.vb: Function GetPaginatedDataAsync(Of TRequestModel As RequestForDataObj)(request As TRequestModel, cancellationToken As CancellationToken) As Task(Of PaginatedDataObj(Of TViewModel))
  overload: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetPaginatedDataAsync*
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel).GetPaginatedDataAsync(Of TRequestModel)(TRequestModel, CancellationToken)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel).GetPaginatedDataAsync(Of TRequestModel)(TRequestModel, System.Threading.CancellationToken)
  name.vb: GetPaginatedDataAsync(Of TRequestModel)(TRequestModel, CancellationToken)
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetCollectionByIdAsync``1(System.Int64,``0,System.Threading.CancellationToken)
  commentId: M:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetCollectionByIdAsync``1(System.Int64,``0,System.Threading.CancellationToken)
  id: GetCollectionByIdAsync``1(System.Int64,``0,System.Threading.CancellationToken)
  parent: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1
  langs:
  - csharp
  - vb
  name: GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, CancellationToken)
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>.GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, CancellationToken)
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>.GetCollectionByIdAsync<TRequestModel>(long, TRequestModel?, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetCollectionByIdAsync
    path: C:\Users\stpt4\OneDrive\Desktop\libs\Quickie\src\Quickie\Handlers\Readonly\Definition\IReadOnlyCollectionRequestHandler.cs
    startLine: 33
  assemblies:
  - Quickie
  namespace: Quickie.Handlers.Readonly.Definition
  summary: Get collection of data for provided identifier of type long.
  example: []
  syntax:
    content: 'Task<PaginatedDataObj<TViewModel>> GetCollectionByIdAsync<TRequestModel>(long id, TRequestModel? request, CancellationToken cancellationToken) where TRequestModel : RequestForDataObj'
    parameters:
    - id: id
      type: System.Int64
      description: identifier of type long
    - id: request
      type: '{TRequestModel}'
      description: Data request model of type RequestForDataDto.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token.
    typeParameters:
    - id: TRequestModel
    return:
      type: System.Threading.Tasks.Task{Quickie.DataObj.PaginatedDataObj{{TViewModel}}}
      description: ''
    content.vb: Function GetCollectionByIdAsync(Of TRequestModel As RequestForDataObj)(id As Long, request As TRequestModel, cancellationToken As CancellationToken) As Task(Of PaginatedDataObj(Of TViewModel))
  overload: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetCollectionByIdAsync*
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel).GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, CancellationToken)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel).GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, System.Threading.CancellationToken)
  name.vb: GetCollectionByIdAsync(Of TRequestModel)(Long, TRequestModel, CancellationToken)
references:
- uid: Quickie.Handlers.Readonly.Definition
  commentId: N:Quickie.Handlers.Readonly.Definition
  href: Quickie.html
  name: Quickie.Handlers.Readonly.Definition
  nameWithType: Quickie.Handlers.Readonly.Definition
  fullName: Quickie.Handlers.Readonly.Definition
  spec.csharp:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.Handlers
    name: Handlers
    href: Quickie.Handlers.html
  - name: .
  - uid: Quickie.Handlers.Readonly
    name: Readonly
    href: Quickie.Handlers.Readonly.html
  - name: .
  - uid: Quickie.Handlers.Readonly.Definition
    name: Definition
    href: Quickie.Handlers.Readonly.Definition.html
  spec.vb:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.Handlers
    name: Handlers
    href: Quickie.Handlers.html
  - name: .
  - uid: Quickie.Handlers.Readonly
    name: Readonly
    href: Quickie.Handlers.Readonly.html
  - name: .
  - uid: Quickie.Handlers.Readonly.Definition
    name: Definition
    href: Quickie.Handlers.Readonly.Definition.html
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetAsync*
  commentId: Overload:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetAsync
  href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetAsync__1___0_System_Threading_CancellationToken_
  name: GetAsync
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>.GetAsync
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>.GetAsync
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel).GetAsync
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel).GetAsync
- uid: '{TRequestModel}'
  commentId: '!:TRequestModel'
  definition: TRequestModel
  name: TRequestModel
  nameWithType: TRequestModel
  fullName: TRequestModel
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Quickie.DataObj.PaginatedDataObj{{TViewModel}}}
  commentId: T:System.Threading.Tasks.Task{Quickie.DataObj.PaginatedDataObj{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<PaginatedDataObj<TViewModel>>
  nameWithType: Task<PaginatedDataObj<TViewModel>>
  fullName: System.Threading.Tasks.Task<Quickie.DataObj.PaginatedDataObj<TViewModel>>
  nameWithType.vb: Task(Of PaginatedDataObj(Of TViewModel))
  fullName.vb: System.Threading.Tasks.Task(Of Quickie.DataObj.PaginatedDataObj(Of TViewModel))
  name.vb: Task(Of PaginatedDataObj(Of TViewModel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Quickie.DataObj.PaginatedDataObj`1
    name: PaginatedDataObj
    href: Quickie.DataObj.PaginatedDataObj-1.html
  - name: <
  - name: TViewModel
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Quickie.DataObj.PaginatedDataObj`1
    name: PaginatedDataObj
    href: Quickie.DataObj.PaginatedDataObj-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TViewModel
  - name: )
  - name: )
- uid: TRequestModel
  name: TRequestModel
  nameWithType: TRequestModel
  fullName: TRequestModel
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetPaginatedDataAsync*
  commentId: Overload:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetPaginatedDataAsync
  href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetPaginatedDataAsync__1___0_System_Threading_CancellationToken_
  name: GetPaginatedDataAsync
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>.GetPaginatedDataAsync
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>.GetPaginatedDataAsync
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel).GetPaginatedDataAsync
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel).GetPaginatedDataAsync
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetCollectionByIdAsync*
  commentId: Overload:Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler`1.GetCollectionByIdAsync
  href: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler-1.html#Quickie_Handlers_Readonly_Definition_IReadOnlyCollectionRequestHandler_1_GetCollectionByIdAsync__1_System_Int64___0_System_Threading_CancellationToken_
  name: GetCollectionByIdAsync
  nameWithType: IReadOnlyCollectionRequestHandler<TViewModel>.GetCollectionByIdAsync
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler<TViewModel>.GetCollectionByIdAsync
  nameWithType.vb: IReadOnlyCollectionRequestHandler(Of TViewModel).GetCollectionByIdAsync
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyCollectionRequestHandler(Of TViewModel).GetCollectionByIdAsync
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
