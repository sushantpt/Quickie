### YamlMime:ManagedReference
items:
- uid: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2
  commentId: T:Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2
  id: IEditOnlyDataHandler`2
  parent: Quickie.DataHandlers.Editonly.Definition
  children:
  - Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2.EditAsync(`1,`0,System.Nullable{System.Threading.CancellationToken})
  - Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2.EditCollectionAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  langs:
  - csharp
  - vb
  name: IEditOnlyDataHandler<TEntity, TIdType>
  nameWithType: IEditOnlyDataHandler<TEntity, TIdType>
  fullName: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler<TEntity, TIdType>
  type: Interface
  source:
    remote:
      path: src/Quickie/DataHandlers/Editonly/Definition/IEditOnlyDataHandler.cs
      branch: f-minimalapi
      repo: https://github.com/sushantpt/Quickie.git
    id: IEditOnlyDataHandler
    path: ../src/Quickie/DataHandlers/Editonly/Definition/IEditOnlyDataHandler.cs
    startLine: 7
  assemblies:
  - Quickie
  namespace: Quickie.DataHandlers.Editonly.Definition
  summary: Defines operations to update entities
  example: []
  syntax:
    content: 'public interface IEditOnlyDataHandler<TEntity, in TIdType> where TEntity : EditOnlyEntity where TIdType : IComparable'
    typeParameters:
    - id: TEntity
      description: Data to update.
    - id: TIdType
      description: Type of id (int, Guid, string, ...)
    content.vb: Public Interface IEditOnlyDataHandler(Of TEntity As EditOnlyEntity, In TIdType As IComparable)
  nameWithType.vb: IEditOnlyDataHandler(Of TEntity, TIdType)
  fullName.vb: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler(Of TEntity, TIdType)
  name.vb: IEditOnlyDataHandler(Of TEntity, TIdType)
- uid: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2.EditAsync(`1,`0,System.Nullable{System.Threading.CancellationToken})
  commentId: M:Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2.EditAsync(`1,`0,System.Nullable{System.Threading.CancellationToken})
  id: EditAsync(`1,`0,System.Nullable{System.Threading.CancellationToken})
  parent: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2
  langs:
  - csharp
  - vb
  name: EditAsync(TIdType, TEntity, CancellationToken?)
  nameWithType: IEditOnlyDataHandler<TEntity, TIdType>.EditAsync(TIdType, TEntity, CancellationToken?)
  fullName: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler<TEntity, TIdType>.EditAsync(TIdType, TEntity, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/Quickie/DataHandlers/Editonly/Definition/IEditOnlyDataHandler.cs
      branch: f-minimalapi
      repo: https://github.com/sushantpt/Quickie.git
    id: EditAsync
    path: ../src/Quickie/DataHandlers/Editonly/Definition/IEditOnlyDataHandler.cs
    startLine: 16
  assemblies:
  - Quickie
  namespace: Quickie.DataHandlers.Editonly.Definition
  summary: Update single data.
  example: []
  syntax:
    content: Task<ResponseObj<TEntity>> EditAsync(TIdType id, TEntity requestModel, CancellationToken? cancellationToken)
    parameters:
    - id: id
      type: '{TIdType}'
      description: Identifier.
    - id: requestModel
      type: '{TEntity}'
      description: Data to be updated.
    - id: cancellationToken
      type: System.Nullable{System.Threading.CancellationToken}
      description: Cancellation token.
    return:
      type: System.Threading.Tasks.Task{Quickie.DataObj.ResponseObj{{TEntity}}}
      description: ''
    content.vb: Function EditAsync(id As TIdType, requestModel As TEntity, cancellationToken As CancellationToken?) As Task(Of ResponseObj(Of TEntity))
  overload: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2.EditAsync*
  nameWithType.vb: IEditOnlyDataHandler(Of TEntity, TIdType).EditAsync(TIdType, TEntity, CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler(Of TEntity, TIdType).EditAsync(TIdType, TEntity, System.Threading.CancellationToken?)
- uid: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2.EditCollectionAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  commentId: M:Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2.EditCollectionAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  id: EditCollectionAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  parent: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2
  langs:
  - csharp
  - vb
  name: EditCollectionAsync(ICollection<TEntity>, CancellationToken?)
  nameWithType: IEditOnlyDataHandler<TEntity, TIdType>.EditCollectionAsync(ICollection<TEntity>, CancellationToken?)
  fullName: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler<TEntity, TIdType>.EditCollectionAsync(System.Collections.Generic.ICollection<TEntity>, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/Quickie/DataHandlers/Editonly/Definition/IEditOnlyDataHandler.cs
      branch: f-minimalapi
      repo: https://github.com/sushantpt/Quickie.git
    id: EditCollectionAsync
    path: ../src/Quickie/DataHandlers/Editonly/Definition/IEditOnlyDataHandler.cs
    startLine: 24
  assemblies:
  - Quickie
  namespace: Quickie.DataHandlers.Editonly.Definition
  summary: Update collection of data (bulk update).
  example: []
  syntax:
    content: Task<ResponseObj<ICollection<TEntity>>> EditCollectionAsync(ICollection<TEntity> requestModels, CancellationToken? cancellationToken)
    parameters:
    - id: requestModels
      type: System.Collections.Generic.ICollection{{TEntity}}
      description: Collection of entity.
    - id: cancellationToken
      type: System.Nullable{System.Threading.CancellationToken}
      description: Cancellation token.
    return:
      type: System.Threading.Tasks.Task{Quickie.DataObj.ResponseObj{System.Collections.Generic.ICollection{{TEntity}}}}
      description: ''
    content.vb: Function EditCollectionAsync(requestModels As ICollection(Of TEntity), cancellationToken As CancellationToken?) As Task(Of ResponseObj(Of ICollection(Of TEntity)))
  overload: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2.EditCollectionAsync*
  nameWithType.vb: IEditOnlyDataHandler(Of TEntity, TIdType).EditCollectionAsync(ICollection(Of TEntity), CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler(Of TEntity, TIdType).EditCollectionAsync(System.Collections.Generic.ICollection(Of TEntity), System.Threading.CancellationToken?)
  name.vb: EditCollectionAsync(ICollection(Of TEntity), CancellationToken?)
references:
- uid: Quickie.DataHandlers.Editonly.Definition
  commentId: N:Quickie.DataHandlers.Editonly.Definition
  href: Quickie.html
  name: Quickie.DataHandlers.Editonly.Definition
  nameWithType: Quickie.DataHandlers.Editonly.Definition
  fullName: Quickie.DataHandlers.Editonly.Definition
  spec.csharp:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.DataHandlers
    name: DataHandlers
    href: Quickie.DataHandlers.html
  - name: .
  - uid: Quickie.DataHandlers.Editonly
    name: Editonly
    href: Quickie.DataHandlers.Editonly.html
  - name: .
  - uid: Quickie.DataHandlers.Editonly.Definition
    name: Definition
    href: Quickie.DataHandlers.Editonly.Definition.html
  spec.vb:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.DataHandlers
    name: DataHandlers
    href: Quickie.DataHandlers.html
  - name: .
  - uid: Quickie.DataHandlers.Editonly
    name: Editonly
    href: Quickie.DataHandlers.Editonly.html
  - name: .
  - uid: Quickie.DataHandlers.Editonly.Definition
    name: Definition
    href: Quickie.DataHandlers.Editonly.Definition.html
- uid: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2.EditAsync*
  commentId: Overload:Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2.EditAsync
  href: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler-2.html#Quickie_DataHandlers_Editonly_Definition_IEditOnlyDataHandler_2_EditAsync__1__0_System_Nullable_System_Threading_CancellationToken__
  name: EditAsync
  nameWithType: IEditOnlyDataHandler<TEntity, TIdType>.EditAsync
  fullName: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler<TEntity, TIdType>.EditAsync
  nameWithType.vb: IEditOnlyDataHandler(Of TEntity, TIdType).EditAsync
  fullName.vb: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler(Of TEntity, TIdType).EditAsync
- uid: '{TIdType}'
  commentId: '!:TIdType'
  definition: TIdType
  name: TIdType
  nameWithType: TIdType
  fullName: TIdType
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: System.Nullable{System.Threading.CancellationToken}
  commentId: T:System.Nullable{System.Threading.CancellationToken}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken?
  nameWithType: CancellationToken?
  fullName: System.Threading.CancellationToken?
  spec.csharp:
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  spec.vb:
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
- uid: System.Threading.Tasks.Task{Quickie.DataObj.ResponseObj{{TEntity}}}
  commentId: T:System.Threading.Tasks.Task{Quickie.DataObj.ResponseObj{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ResponseObj<TEntity>>
  nameWithType: Task<ResponseObj<TEntity>>
  fullName: System.Threading.Tasks.Task<Quickie.DataObj.ResponseObj<TEntity>>
  nameWithType.vb: Task(Of ResponseObj(Of TEntity))
  fullName.vb: System.Threading.Tasks.Task(Of Quickie.DataObj.ResponseObj(Of TEntity))
  name.vb: Task(Of ResponseObj(Of TEntity))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Quickie.DataObj.ResponseObj`1
    name: ResponseObj
    href: Quickie.DataObj.ResponseObj-1.html
  - name: <
  - name: TEntity
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Quickie.DataObj.ResponseObj`1
    name: ResponseObj
    href: Quickie.DataObj.ResponseObj-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
  - name: )
- uid: TIdType
  name: TIdType
  nameWithType: TIdType
  fullName: TIdType
- uid: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2.EditCollectionAsync*
  commentId: Overload:Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler`2.EditCollectionAsync
  href: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler-2.html#Quickie_DataHandlers_Editonly_Definition_IEditOnlyDataHandler_2_EditCollectionAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  name: EditCollectionAsync
  nameWithType: IEditOnlyDataHandler<TEntity, TIdType>.EditCollectionAsync
  fullName: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler<TEntity, TIdType>.EditCollectionAsync
  nameWithType.vb: IEditOnlyDataHandler(Of TEntity, TIdType).EditCollectionAsync
  fullName.vb: Quickie.DataHandlers.Editonly.Definition.IEditOnlyDataHandler(Of TEntity, TIdType).EditCollectionAsync
- uid: System.Collections.Generic.ICollection{{TEntity}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<TEntity>
  nameWithType: ICollection<TEntity>
  fullName: System.Collections.Generic.ICollection<TEntity>
  nameWithType.vb: ICollection(Of TEntity)
  fullName.vb: System.Collections.Generic.ICollection(Of TEntity)
  name.vb: ICollection(Of TEntity)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: System.Threading.Tasks.Task{Quickie.DataObj.ResponseObj{System.Collections.Generic.ICollection{{TEntity}}}}
  commentId: T:System.Threading.Tasks.Task{Quickie.DataObj.ResponseObj{System.Collections.Generic.ICollection{`0}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ResponseObj<ICollection<TEntity>>>
  nameWithType: Task<ResponseObj<ICollection<TEntity>>>
  fullName: System.Threading.Tasks.Task<Quickie.DataObj.ResponseObj<System.Collections.Generic.ICollection<TEntity>>>
  nameWithType.vb: Task(Of ResponseObj(Of ICollection(Of TEntity)))
  fullName.vb: System.Threading.Tasks.Task(Of Quickie.DataObj.ResponseObj(Of System.Collections.Generic.ICollection(Of TEntity)))
  name.vb: Task(Of ResponseObj(Of ICollection(Of TEntity)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Quickie.DataObj.ResponseObj`1
    name: ResponseObj
    href: Quickie.DataObj.ResponseObj-1.html
  - name: <
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TEntity
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Quickie.DataObj.ResponseObj`1
    name: ResponseObj
    href: Quickie.DataObj.ResponseObj-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
  - name: )
  - name: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
