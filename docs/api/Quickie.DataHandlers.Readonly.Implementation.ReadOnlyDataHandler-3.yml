### YamlMime:ManagedReference
items:
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3
  commentId: T:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3
  id: ReadOnlyDataHandler`3
  parent: Quickie.DataHandlers.Readonly.Implementation
  children:
  - Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3.#ctor(Microsoft.EntityFrameworkCore.DbContext)
  - Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3.GetByIdAsync(`2,System.Nullable{System.Threading.CancellationToken})
  langs:
  - csharp
  - vb
  name: ReadOnlyDataHandler<TEntity, TDbContext, TIdType>
  nameWithType: ReadOnlyDataHandler<TEntity, TDbContext, TIdType>
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler<TEntity, TDbContext, TIdType>
  type: Class
  source:
    remote:
      path: src/Quickie/DataHandlers/Readonly/Implementation/ReadOnlyDataHandler.cs
      branch: f-minimalapi
      repo: https://github.com/sushantpt/Quickie.git
    id: ReadOnlyDataHandler
    path: ../src/Quickie/DataHandlers/Readonly/Implementation/ReadOnlyDataHandler.cs
    startLine: 9
  assemblies:
  - Quickie
  namespace: Quickie.DataHandlers.Readonly.Implementation
  summary: Abstract base class for handling read-only data requests.
  example: []
  syntax:
    content: 'public abstract class ReadOnlyDataHandler<TEntity, TDbContext, TIdType> : IReadOnlyDataHandler<TEntity, TIdType> where TEntity : ReadOnlyEntity where TDbContext : DbContext where TIdType : IComparable'
    typeParameters:
    - id: TEntity
      description: Entity
    - id: TDbContext
      description: Db context
    - id: TIdType
      description: 'Type of identifier. eg: int, string, ...'
    content.vb: Public MustInherit Class ReadOnlyDataHandler(Of TEntity As ReadOnlyEntity, TDbContext As DbContext, TIdType As IComparable) Implements IReadOnlyDataHandler(Of TEntity, TIdType)
  inheritance:
  - System.Object
  derivedClasses:
  - specification.Helpers.DataHandlers.ReadOnlyDataHandlerConcrete
  implements:
  - Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler{{TEntity},{TIdType}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType)
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType)
  name.vb: ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType)
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3.#ctor(Microsoft.EntityFrameworkCore.DbContext)
  commentId: M:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3.#ctor(Microsoft.EntityFrameworkCore.DbContext)
  id: '#ctor(Microsoft.EntityFrameworkCore.DbContext)'
  parent: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3
  langs:
  - csharp
  - vb
  name: ReadOnlyDataHandler(DbContext)
  nameWithType: ReadOnlyDataHandler<TEntity, TDbContext, TIdType>.ReadOnlyDataHandler(DbContext)
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler<TEntity, TDbContext, TIdType>.ReadOnlyDataHandler(Microsoft.EntityFrameworkCore.DbContext)
  type: Constructor
  source:
    remote:
      path: src/Quickie/DataHandlers/Readonly/Implementation/ReadOnlyDataHandler.cs
      branch: f-minimalapi
      repo: https://github.com/sushantpt/Quickie.git
    id: .ctor
    path: ../src/Quickie/DataHandlers/Readonly/Implementation/ReadOnlyDataHandler.cs
    startLine: 9
  assemblies:
  - Quickie
  namespace: Quickie.DataHandlers.Readonly.Implementation
  summary: Abstract base class for handling read-only data requests.
  example: []
  syntax:
    content: protected ReadOnlyDataHandler(DbContext context)
    parameters:
    - id: context
      type: Microsoft.EntityFrameworkCore.DbContext
      description: Db context
    content.vb: Protected Sub New(context As DbContext)
  overload: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3.#ctor*
  nameWithType.vb: ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType).New(DbContext)
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType).New(Microsoft.EntityFrameworkCore.DbContext)
  name.vb: New(DbContext)
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3.GetByIdAsync(`2,System.Nullable{System.Threading.CancellationToken})
  commentId: M:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3.GetByIdAsync(`2,System.Nullable{System.Threading.CancellationToken})
  id: GetByIdAsync(`2,System.Nullable{System.Threading.CancellationToken})
  parent: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3
  langs:
  - csharp
  - vb
  name: GetByIdAsync(TIdType, CancellationToken?)
  nameWithType: ReadOnlyDataHandler<TEntity, TDbContext, TIdType>.GetByIdAsync(TIdType, CancellationToken?)
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler<TEntity, TDbContext, TIdType>.GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/Quickie/DataHandlers/Readonly/Implementation/ReadOnlyDataHandler.cs
      branch: f-minimalapi
      repo: https://github.com/sushantpt/Quickie.git
    id: GetByIdAsync
    path: ../src/Quickie/DataHandlers/Readonly/Implementation/ReadOnlyDataHandler.cs
    startLine: 19
  assemblies:
  - Quickie
  namespace: Quickie.DataHandlers.Readonly.Implementation
  summary: Get data by id.
  example: []
  syntax:
    content: public Task<TEntity?> GetByIdAsync(TIdType id, CancellationToken? cancellationToken = null)
    parameters:
    - id: id
      type: '{TIdType}'
      description: Identifier (unique key identifying your entity)
    - id: cancellationToken
      type: System.Nullable{System.Threading.CancellationToken}
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
      description: ''
    content.vb: Public Function GetByIdAsync(id As TIdType, cancellationToken As CancellationToken? = Nothing) As Task(Of TEntity)
  overload: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3.GetByIdAsync*
  implements:
  - Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler{{TEntity},{TIdType}}.GetByIdAsync({TIdType},System.Nullable{System.Threading.CancellationToken})
  nameWithType.vb: ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType).GetByIdAsync(TIdType, CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType).GetByIdAsync(TIdType, System.Threading.CancellationToken?)
references:
- uid: Quickie.DataHandlers.Readonly.Implementation
  commentId: N:Quickie.DataHandlers.Readonly.Implementation
  href: Quickie.html
  name: Quickie.DataHandlers.Readonly.Implementation
  nameWithType: Quickie.DataHandlers.Readonly.Implementation
  fullName: Quickie.DataHandlers.Readonly.Implementation
  spec.csharp:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.DataHandlers
    name: DataHandlers
    href: Quickie.DataHandlers.html
  - name: .
  - uid: Quickie.DataHandlers.Readonly
    name: Readonly
    href: Quickie.DataHandlers.Readonly.html
  - name: .
  - uid: Quickie.DataHandlers.Readonly.Implementation
    name: Implementation
    href: Quickie.DataHandlers.Readonly.Implementation.html
  spec.vb:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.DataHandlers
    name: DataHandlers
    href: Quickie.DataHandlers.html
  - name: .
  - uid: Quickie.DataHandlers.Readonly
    name: Readonly
    href: Quickie.DataHandlers.Readonly.html
  - name: .
  - uid: Quickie.DataHandlers.Readonly.Implementation
    name: Implementation
    href: Quickie.DataHandlers.Readonly.Implementation.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler{{TEntity},{TIdType}}
  commentId: T:Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler{`0,`2}
  parent: Quickie.DataHandlers.Readonly.Definition
  definition: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2
  href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html
  name: IReadOnlyDataHandler<TEntity, TIdType>
  nameWithType: IReadOnlyDataHandler<TEntity, TIdType>
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler<TEntity, TIdType>
  nameWithType.vb: IReadOnlyDataHandler(Of TEntity, TIdType)
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler(Of TEntity, TIdType)
  name.vb: IReadOnlyDataHandler(Of TEntity, TIdType)
  spec.csharp:
  - uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2
    name: IReadOnlyDataHandler
    href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - name: TIdType
  - name: '>'
  spec.vb:
  - uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2
    name: IReadOnlyDataHandler
    href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - name: TIdType
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2
  commentId: T:Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2
  href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html
  name: IReadOnlyDataHandler<TEntity, TIdType>
  nameWithType: IReadOnlyDataHandler<TEntity, TIdType>
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler<TEntity, TIdType>
  nameWithType.vb: IReadOnlyDataHandler(Of TEntity, TIdType)
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler(Of TEntity, TIdType)
  name.vb: IReadOnlyDataHandler(Of TEntity, TIdType)
  spec.csharp:
  - uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2
    name: IReadOnlyDataHandler
    href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - name: TIdType
  - name: '>'
  spec.vb:
  - uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2
    name: IReadOnlyDataHandler
    href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - name: TIdType
  - name: )
- uid: Quickie.DataHandlers.Readonly.Definition
  commentId: N:Quickie.DataHandlers.Readonly.Definition
  href: Quickie.html
  name: Quickie.DataHandlers.Readonly.Definition
  nameWithType: Quickie.DataHandlers.Readonly.Definition
  fullName: Quickie.DataHandlers.Readonly.Definition
  spec.csharp:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.DataHandlers
    name: DataHandlers
    href: Quickie.DataHandlers.html
  - name: .
  - uid: Quickie.DataHandlers.Readonly
    name: Readonly
    href: Quickie.DataHandlers.Readonly.html
  - name: .
  - uid: Quickie.DataHandlers.Readonly.Definition
    name: Definition
    href: Quickie.DataHandlers.Readonly.Definition.html
  spec.vb:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.DataHandlers
    name: DataHandlers
    href: Quickie.DataHandlers.html
  - name: .
  - uid: Quickie.DataHandlers.Readonly
    name: Readonly
    href: Quickie.DataHandlers.Readonly.html
  - name: .
  - uid: Quickie.DataHandlers.Readonly.Definition
    name: Definition
    href: Quickie.DataHandlers.Readonly.Definition.html
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3.#ctor*
  commentId: Overload:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3.#ctor
  href: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler-3.html#Quickie_DataHandlers_Readonly_Implementation_ReadOnlyDataHandler_3__ctor_Microsoft_EntityFrameworkCore_DbContext_
  name: ReadOnlyDataHandler
  nameWithType: ReadOnlyDataHandler<TEntity, TDbContext, TIdType>.ReadOnlyDataHandler
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler<TEntity, TDbContext, TIdType>.ReadOnlyDataHandler
  nameWithType.vb: ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType).New
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType).New
  name.vb: New
- uid: Microsoft.EntityFrameworkCore.DbContext
  commentId: T:Microsoft.EntityFrameworkCore.DbContext
  parent: Microsoft.EntityFrameworkCore
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.dbcontext
  name: DbContext
  nameWithType: DbContext
  fullName: Microsoft.EntityFrameworkCore.DbContext
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.EntityFrameworkCore
    name: EntityFrameworkCore
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.EntityFrameworkCore
    name: EntityFrameworkCore
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore
- uid: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3.GetByIdAsync*
  commentId: Overload:Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler`3.GetByIdAsync
  href: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler-3.html#Quickie_DataHandlers_Readonly_Implementation_ReadOnlyDataHandler_3_GetByIdAsync__2_System_Nullable_System_Threading_CancellationToken__
  name: GetByIdAsync
  nameWithType: ReadOnlyDataHandler<TEntity, TDbContext, TIdType>.GetByIdAsync
  fullName: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler<TEntity, TDbContext, TIdType>.GetByIdAsync
  nameWithType.vb: ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType).GetByIdAsync
  fullName.vb: Quickie.DataHandlers.Readonly.Implementation.ReadOnlyDataHandler(Of TEntity, TDbContext, TIdType).GetByIdAsync
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler{{TEntity},{TIdType}}.GetByIdAsync({TIdType},System.Nullable{System.Threading.CancellationToken})
  commentId: M:Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler{`0,`2}.GetByIdAsync(`2,System.Nullable{System.Threading.CancellationToken})
  parent: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler{{TEntity},{TIdType}}
  definition: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2.GetByIdAsync(`1,System.Nullable{System.Threading.CancellationToken})
  href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html#Quickie_DataHandlers_Readonly_Definition_IReadOnlyDataHandler_2_GetByIdAsync__1_System_Nullable_System_Threading_CancellationToken__
  name: GetByIdAsync(TIdType, CancellationToken?)
  nameWithType: IReadOnlyDataHandler<TEntity, TIdType>.GetByIdAsync(TIdType, CancellationToken?)
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler<TEntity, TIdType>.GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  nameWithType.vb: IReadOnlyDataHandler(Of TEntity, TIdType).GetByIdAsync(TIdType, CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler(Of TEntity, TIdType).GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  spec.csharp:
  - uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler{`0,`2}.GetByIdAsync(`2,System.Nullable{System.Threading.CancellationToken})
    name: GetByIdAsync
    href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html#Quickie_DataHandlers_Readonly_Definition_IReadOnlyDataHandler_2_GetByIdAsync__1_System_Nullable_System_Threading_CancellationToken__
  - name: (
  - name: TIdType
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  - name: )
  spec.vb:
  - uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler{`0,`2}.GetByIdAsync(`2,System.Nullable{System.Threading.CancellationToken})
    name: GetByIdAsync
    href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html#Quickie_DataHandlers_Readonly_Definition_IReadOnlyDataHandler_2_GetByIdAsync__1_System_Nullable_System_Threading_CancellationToken__
  - name: (
  - name: TIdType
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  - name: )
- uid: '{TIdType}'
  commentId: '!:TIdType'
  definition: TIdType
  name: TIdType
  nameWithType: TIdType
  fullName: TIdType
- uid: System.Nullable{System.Threading.CancellationToken}
  commentId: T:System.Nullable{System.Threading.CancellationToken}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken?
  nameWithType: CancellationToken?
  fullName: System.Threading.CancellationToken?
  spec.csharp:
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  spec.vb:
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
- uid: System.Threading.Tasks.Task{{TEntity}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TEntity>
  nameWithType: Task<TEntity>
  fullName: System.Threading.Tasks.Task<TEntity>
  nameWithType.vb: Task(Of TEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TEntity)
  name.vb: Task(Of TEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2.GetByIdAsync(`1,System.Nullable{System.Threading.CancellationToken})
  commentId: M:Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2.GetByIdAsync(`1,System.Nullable{System.Threading.CancellationToken})
  isExternal: true
  href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html#Quickie_DataHandlers_Readonly_Definition_IReadOnlyDataHandler_2_GetByIdAsync__1_System_Nullable_System_Threading_CancellationToken__
  name: GetByIdAsync(TIdType, CancellationToken?)
  nameWithType: IReadOnlyDataHandler<TEntity, TIdType>.GetByIdAsync(TIdType, CancellationToken?)
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler<TEntity, TIdType>.GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  nameWithType.vb: IReadOnlyDataHandler(Of TEntity, TIdType).GetByIdAsync(TIdType, CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler(Of TEntity, TIdType).GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  spec.csharp:
  - uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2.GetByIdAsync(`1,System.Nullable{System.Threading.CancellationToken})
    name: GetByIdAsync
    href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html#Quickie_DataHandlers_Readonly_Definition_IReadOnlyDataHandler_2_GetByIdAsync__1_System_Nullable_System_Threading_CancellationToken__
  - name: (
  - name: TIdType
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  - name: )
  spec.vb:
  - uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2.GetByIdAsync(`1,System.Nullable{System.Threading.CancellationToken})
    name: GetByIdAsync
    href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html#Quickie_DataHandlers_Readonly_Definition_IReadOnlyDataHandler_2_GetByIdAsync__1_System_Nullable_System_Threading_CancellationToken__
  - name: (
  - name: TIdType
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  - name: )
- uid: TIdType
  name: TIdType
  nameWithType: TIdType
  fullName: TIdType
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
