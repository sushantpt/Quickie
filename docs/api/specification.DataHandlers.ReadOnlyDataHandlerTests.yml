### YamlMime:ManagedReference
items:
- uid: specification.DataHandlers.ReadOnlyDataHandlerTests
  commentId: T:specification.DataHandlers.ReadOnlyDataHandlerTests
  id: ReadOnlyDataHandlerTests
  parent: specification.DataHandlers
  children:
  - specification.DataHandlers.ReadOnlyDataHandlerTests.#ctor
  - specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldReturnEntity_WhenIdExists
  - specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldReturnNull_WhenIdDoesNotExist
  - specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldThrowException_WhenCancellationRequested
  - specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldThrowException_WhenContextIsNull
  langs:
  - csharp
  - vb
  name: ReadOnlyDataHandlerTests
  nameWithType: ReadOnlyDataHandlerTests
  fullName: specification.DataHandlers.ReadOnlyDataHandlerTests
  type: Class
  source:
    remote:
      path: tests/specification/DataHandlers/ReadOnlyDataHandlerTests.cs
      branch: gh-pages
      repo: https://github.com/sushantpt/Quickie.git
    id: ReadOnlyDataHandlerTests
    path: ../tests/specification/DataHandlers/ReadOnlyDataHandlerTests.cs
    startLine: 10
  assemblies:
  - specification
  namespace: specification.DataHandlers
  summary: Test for readonly data handler.
  example: []
  syntax:
    content: public class ReadOnlyDataHandlerTests
    content.vb: Public Class ReadOnlyDataHandlerTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: specification.DataHandlers.ReadOnlyDataHandlerTests.#ctor
  commentId: M:specification.DataHandlers.ReadOnlyDataHandlerTests.#ctor
  id: '#ctor'
  parent: specification.DataHandlers.ReadOnlyDataHandlerTests
  langs:
  - csharp
  - vb
  name: ReadOnlyDataHandlerTests()
  nameWithType: ReadOnlyDataHandlerTests.ReadOnlyDataHandlerTests()
  fullName: specification.DataHandlers.ReadOnlyDataHandlerTests.ReadOnlyDataHandlerTests()
  type: Constructor
  source:
    remote:
      path: tests/specification/DataHandlers/ReadOnlyDataHandlerTests.cs
      branch: gh-pages
      repo: https://github.com/sushantpt/Quickie.git
    id: .ctor
    path: ../tests/specification/DataHandlers/ReadOnlyDataHandlerTests.cs
    startLine: 15
  assemblies:
  - specification
  namespace: specification.DataHandlers
  syntax:
    content: public ReadOnlyDataHandlerTests()
    content.vb: Public Sub New()
  overload: specification.DataHandlers.ReadOnlyDataHandlerTests.#ctor*
  nameWithType.vb: ReadOnlyDataHandlerTests.New()
  fullName.vb: specification.DataHandlers.ReadOnlyDataHandlerTests.New()
  name.vb: New()
- uid: specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldReturnEntity_WhenIdExists
  commentId: M:specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldReturnEntity_WhenIdExists
  id: GetByIdAsync_ShouldReturnEntity_WhenIdExists
  parent: specification.DataHandlers.ReadOnlyDataHandlerTests
  langs:
  - csharp
  - vb
  name: GetByIdAsync_ShouldReturnEntity_WhenIdExists()
  nameWithType: ReadOnlyDataHandlerTests.GetByIdAsync_ShouldReturnEntity_WhenIdExists()
  fullName: specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldReturnEntity_WhenIdExists()
  type: Method
  source:
    remote:
      path: tests/specification/DataHandlers/ReadOnlyDataHandlerTests.cs
      branch: gh-pages
      repo: https://github.com/sushantpt/Quickie.git
    id: GetByIdAsync_ShouldReturnEntity_WhenIdExists
    path: ../tests/specification/DataHandlers/ReadOnlyDataHandlerTests.cs
    startLine: 28
  assemblies:
  - specification
  namespace: specification.DataHandlers
  summary: GetByIdAsync returns data when data exists.
  example: []
  syntax:
    content: >-
      [Fact]

      public Task GetByIdAsync_ShouldReturnEntity_WhenIdExists()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetByIdAsync_ShouldReturnEntity_WhenIdExists() As Task
  overload: specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldReturnEntity_WhenIdExists*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldReturnNull_WhenIdDoesNotExist
  commentId: M:specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldReturnNull_WhenIdDoesNotExist
  id: GetByIdAsync_ShouldReturnNull_WhenIdDoesNotExist
  parent: specification.DataHandlers.ReadOnlyDataHandlerTests
  langs:
  - csharp
  - vb
  name: GetByIdAsync_ShouldReturnNull_WhenIdDoesNotExist()
  nameWithType: ReadOnlyDataHandlerTests.GetByIdAsync_ShouldReturnNull_WhenIdDoesNotExist()
  fullName: specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldReturnNull_WhenIdDoesNotExist()
  type: Method
  source:
    remote:
      path: tests/specification/DataHandlers/ReadOnlyDataHandlerTests.cs
      branch: gh-pages
      repo: https://github.com/sushantpt/Quickie.git
    id: GetByIdAsync_ShouldReturnNull_WhenIdDoesNotExist
    path: ../tests/specification/DataHandlers/ReadOnlyDataHandlerTests.cs
    startLine: 43
  assemblies:
  - specification
  namespace: specification.DataHandlers
  summary: GetByIdAsync returns null when data does not exists.
  example: []
  syntax:
    content: >-
      [Fact]

      public Task GetByIdAsync_ShouldReturnNull_WhenIdDoesNotExist()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetByIdAsync_ShouldReturnNull_WhenIdDoesNotExist() As Task
  overload: specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldReturnNull_WhenIdDoesNotExist*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldThrowException_WhenContextIsNull
  commentId: M:specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldThrowException_WhenContextIsNull
  id: GetByIdAsync_ShouldThrowException_WhenContextIsNull
  parent: specification.DataHandlers.ReadOnlyDataHandlerTests
  langs:
  - csharp
  - vb
  name: GetByIdAsync_ShouldThrowException_WhenContextIsNull()
  nameWithType: ReadOnlyDataHandlerTests.GetByIdAsync_ShouldThrowException_WhenContextIsNull()
  fullName: specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldThrowException_WhenContextIsNull()
  type: Method
  source:
    remote:
      path: tests/specification/DataHandlers/ReadOnlyDataHandlerTests.cs
      branch: gh-pages
      repo: https://github.com/sushantpt/Quickie.git
    id: GetByIdAsync_ShouldThrowException_WhenContextIsNull
    path: ../tests/specification/DataHandlers/ReadOnlyDataHandlerTests.cs
    startLine: 56
  assemblies:
  - specification
  namespace: specification.DataHandlers
  summary: GetByIdAsync throws exception when passed dbContext is null.
  example: []
  syntax:
    content: >-
      [Fact]

      public void GetByIdAsync_ShouldThrowException_WhenContextIsNull()
    content.vb: >-
      <Fact>

      Public Sub GetByIdAsync_ShouldThrowException_WhenContextIsNull()
  overload: specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldThrowException_WhenContextIsNull*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
- uid: specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldThrowException_WhenCancellationRequested
  commentId: M:specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldThrowException_WhenCancellationRequested
  id: GetByIdAsync_ShouldThrowException_WhenCancellationRequested
  parent: specification.DataHandlers.ReadOnlyDataHandlerTests
  langs:
  - csharp
  - vb
  name: GetByIdAsync_ShouldThrowException_WhenCancellationRequested()
  nameWithType: ReadOnlyDataHandlerTests.GetByIdAsync_ShouldThrowException_WhenCancellationRequested()
  fullName: specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldThrowException_WhenCancellationRequested()
  type: Method
  source:
    remote:
      path: tests/specification/DataHandlers/ReadOnlyDataHandlerTests.cs
      branch: gh-pages
      repo: https://github.com/sushantpt/Quickie.git
    id: GetByIdAsync_ShouldThrowException_WhenCancellationRequested
    path: ../tests/specification/DataHandlers/ReadOnlyDataHandlerTests.cs
    startLine: 62
  assemblies:
  - specification
  namespace: specification.DataHandlers
  summary: GetByIdAsync throws exception when cancellation is requested.
  example: []
  syntax:
    content: >-
      [Fact]

      public Task GetByIdAsync_ShouldThrowException_WhenCancellationRequested()
    return:
      type: System.Threading.Tasks.Task
    content.vb: >-
      <Fact>

      Public Function GetByIdAsync_ShouldThrowException_WhenCancellationRequested() As Task
  overload: specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldThrowException_WhenCancellationRequested*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
references:
- uid: specification.DataHandlers
  commentId: N:specification.DataHandlers
  href: specification.html
  name: specification.DataHandlers
  nameWithType: specification.DataHandlers
  fullName: specification.DataHandlers
  spec.csharp:
  - uid: specification
    name: specification
    href: specification.html
  - name: .
  - uid: specification.DataHandlers
    name: DataHandlers
    href: specification.DataHandlers.html
  spec.vb:
  - uid: specification
    name: specification
    href: specification.html
  - name: .
  - uid: specification.DataHandlers
    name: DataHandlers
    href: specification.DataHandlers.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: specification.DataHandlers.ReadOnlyDataHandlerTests.#ctor*
  commentId: Overload:specification.DataHandlers.ReadOnlyDataHandlerTests.#ctor
  href: specification.DataHandlers.ReadOnlyDataHandlerTests.html#specification_DataHandlers_ReadOnlyDataHandlerTests__ctor
  name: ReadOnlyDataHandlerTests
  nameWithType: ReadOnlyDataHandlerTests.ReadOnlyDataHandlerTests
  fullName: specification.DataHandlers.ReadOnlyDataHandlerTests.ReadOnlyDataHandlerTests
  nameWithType.vb: ReadOnlyDataHandlerTests.New
  fullName.vb: specification.DataHandlers.ReadOnlyDataHandlerTests.New
  name.vb: New
- uid: specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldReturnEntity_WhenIdExists*
  commentId: Overload:specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldReturnEntity_WhenIdExists
  href: specification.DataHandlers.ReadOnlyDataHandlerTests.html#specification_DataHandlers_ReadOnlyDataHandlerTests_GetByIdAsync_ShouldReturnEntity_WhenIdExists
  name: GetByIdAsync_ShouldReturnEntity_WhenIdExists
  nameWithType: ReadOnlyDataHandlerTests.GetByIdAsync_ShouldReturnEntity_WhenIdExists
  fullName: specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldReturnEntity_WhenIdExists
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldReturnNull_WhenIdDoesNotExist*
  commentId: Overload:specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldReturnNull_WhenIdDoesNotExist
  href: specification.DataHandlers.ReadOnlyDataHandlerTests.html#specification_DataHandlers_ReadOnlyDataHandlerTests_GetByIdAsync_ShouldReturnNull_WhenIdDoesNotExist
  name: GetByIdAsync_ShouldReturnNull_WhenIdDoesNotExist
  nameWithType: ReadOnlyDataHandlerTests.GetByIdAsync_ShouldReturnNull_WhenIdDoesNotExist
  fullName: specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldReturnNull_WhenIdDoesNotExist
- uid: specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldThrowException_WhenContextIsNull*
  commentId: Overload:specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldThrowException_WhenContextIsNull
  href: specification.DataHandlers.ReadOnlyDataHandlerTests.html#specification_DataHandlers_ReadOnlyDataHandlerTests_GetByIdAsync_ShouldThrowException_WhenContextIsNull
  name: GetByIdAsync_ShouldThrowException_WhenContextIsNull
  nameWithType: ReadOnlyDataHandlerTests.GetByIdAsync_ShouldThrowException_WhenContextIsNull
  fullName: specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldThrowException_WhenContextIsNull
- uid: specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldThrowException_WhenCancellationRequested*
  commentId: Overload:specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldThrowException_WhenCancellationRequested
  href: specification.DataHandlers.ReadOnlyDataHandlerTests.html#specification_DataHandlers_ReadOnlyDataHandlerTests_GetByIdAsync_ShouldThrowException_WhenCancellationRequested
  name: GetByIdAsync_ShouldThrowException_WhenCancellationRequested
  nameWithType: ReadOnlyDataHandlerTests.GetByIdAsync_ShouldThrowException_WhenCancellationRequested
  fullName: specification.DataHandlers.ReadOnlyDataHandlerTests.GetByIdAsync_ShouldThrowException_WhenCancellationRequested
