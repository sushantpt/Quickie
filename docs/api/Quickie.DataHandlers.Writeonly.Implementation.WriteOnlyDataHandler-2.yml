### YamlMime:ManagedReference
items:
- uid: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2
  commentId: T:Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2
  id: WriteOnlyDataHandler`2
  parent: Quickie.DataHandlers.Writeonly.Implementation
  children:
  - Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.#ctor(`1)
  - Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.CreateItemAsync(`0,System.Nullable{System.Threading.CancellationToken})
  - Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.CreateItemsAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  langs:
  - csharp
  - vb
  name: WriteOnlyDataHandler<TEntity, TDbContext>
  nameWithType: WriteOnlyDataHandler<TEntity, TDbContext>
  fullName: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler<TEntity, TDbContext>
  type: Class
  source:
    remote:
      path: src/Quickie/DataHandlers/Writeonly/Implementation/WriteOnlyDataHandler.cs
      branch: master
      repo: https://github.com/sushantpt/Quickie.git
    id: WriteOnlyDataHandler
    path: ../src/Quickie/DataHandlers/Writeonly/Implementation/WriteOnlyDataHandler.cs
    startLine: 10
  assemblies:
  - Quickie
  namespace: Quickie.DataHandlers.Writeonly.Implementation
  summary: Abstract class serving as write only data handler (Repository layer).
  example: []
  syntax:
    content: 'public abstract class WriteOnlyDataHandler<TEntity, TDbContext> : IWriteOnlyDataHandler<TEntity> where TEntity : WriteOnlyEntity where TDbContext : DbContext'
    typeParameters:
    - id: TEntity
      description: Entity
    - id: TDbContext
      description: Db context
    content.vb: Public MustInherit Class WriteOnlyDataHandler(Of TEntity As WriteOnlyEntity, TDbContext As DbContext) Implements IWriteOnlyDataHandler(Of TEntity)
  inheritance:
  - System.Object
  derivedClasses:
  - specification.Helpers.DataHandlers.WriteOnlyDataHandlerConcrete
  implements:
  - Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler{{TEntity}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: WriteOnlyDataHandler(Of TEntity, TDbContext)
  fullName.vb: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler(Of TEntity, TDbContext)
  name.vb: WriteOnlyDataHandler(Of TEntity, TDbContext)
- uid: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.#ctor(`1)
  commentId: M:Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.#ctor(`1)
  id: '#ctor(`1)'
  parent: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2
  langs:
  - csharp
  - vb
  name: WriteOnlyDataHandler(TDbContext)
  nameWithType: WriteOnlyDataHandler<TEntity, TDbContext>.WriteOnlyDataHandler(TDbContext)
  fullName: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler<TEntity, TDbContext>.WriteOnlyDataHandler(TDbContext)
  type: Constructor
  source:
    remote:
      path: src/Quickie/DataHandlers/Writeonly/Implementation/WriteOnlyDataHandler.cs
      branch: master
      repo: https://github.com/sushantpt/Quickie.git
    id: .ctor
    path: ../src/Quickie/DataHandlers/Writeonly/Implementation/WriteOnlyDataHandler.cs
    startLine: 10
  assemblies:
  - Quickie
  namespace: Quickie.DataHandlers.Writeonly.Implementation
  summary: Abstract class serving as write only data handler (Repository layer).
  example: []
  syntax:
    content: protected WriteOnlyDataHandler(TDbContext dbContext)
    parameters:
    - id: dbContext
      type: '{TDbContext}'
      description: Db context
    content.vb: Protected Sub New(dbContext As TDbContext)
  overload: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.#ctor*
  nameWithType.vb: WriteOnlyDataHandler(Of TEntity, TDbContext).New(TDbContext)
  fullName.vb: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler(Of TEntity, TDbContext).New(TDbContext)
  name.vb: New(TDbContext)
- uid: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.CreateItemAsync(`0,System.Nullable{System.Threading.CancellationToken})
  commentId: M:Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.CreateItemAsync(`0,System.Nullable{System.Threading.CancellationToken})
  id: CreateItemAsync(`0,System.Nullable{System.Threading.CancellationToken})
  parent: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2
  langs:
  - csharp
  - vb
  name: CreateItemAsync(TEntity, CancellationToken?)
  nameWithType: WriteOnlyDataHandler<TEntity, TDbContext>.CreateItemAsync(TEntity, CancellationToken?)
  fullName: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler<TEntity, TDbContext>.CreateItemAsync(TEntity, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/Quickie/DataHandlers/Writeonly/Implementation/WriteOnlyDataHandler.cs
      branch: master
      repo: https://github.com/sushantpt/Quickie.git
    id: CreateItemAsync
    path: ../src/Quickie/DataHandlers/Writeonly/Implementation/WriteOnlyDataHandler.cs
    startLine: 20
  assemblies:
  - Quickie
  namespace: Quickie.DataHandlers.Writeonly.Implementation
  summary: Data create request.
  example: []
  syntax:
    content: public Task<ResponseObj<TEntity>> CreateItemAsync(TEntity item, CancellationToken? cancellationToken = null)
    parameters:
    - id: item
      type: '{TEntity}'
      description: Data requested to create
    - id: cancellationToken
      type: System.Nullable{System.Threading.CancellationToken}
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{Quickie.DataObj.ResponseObj{{TEntity}}}
      description: ''
    content.vb: Public Function CreateItemAsync(item As TEntity, cancellationToken As CancellationToken? = Nothing) As Task(Of ResponseObj(Of TEntity))
  overload: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.CreateItemAsync*
  implements:
  - Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler{{TEntity}}.CreateItemAsync({TEntity},System.Nullable{System.Threading.CancellationToken})
  nameWithType.vb: WriteOnlyDataHandler(Of TEntity, TDbContext).CreateItemAsync(TEntity, CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler(Of TEntity, TDbContext).CreateItemAsync(TEntity, System.Threading.CancellationToken?)
- uid: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.CreateItemsAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  commentId: M:Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.CreateItemsAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  id: CreateItemsAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  parent: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2
  langs:
  - csharp
  - vb
  name: CreateItemsAsync(ICollection<TEntity>, CancellationToken?)
  nameWithType: WriteOnlyDataHandler<TEntity, TDbContext>.CreateItemsAsync(ICollection<TEntity>, CancellationToken?)
  fullName: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler<TEntity, TDbContext>.CreateItemsAsync(System.Collections.Generic.ICollection<TEntity>, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/Quickie/DataHandlers/Writeonly/Implementation/WriteOnlyDataHandler.cs
      branch: master
      repo: https://github.com/sushantpt/Quickie.git
    id: CreateItemsAsync
    path: ../src/Quickie/DataHandlers/Writeonly/Implementation/WriteOnlyDataHandler.cs
    startLine: 51
  assemblies:
  - Quickie
  namespace: Quickie.DataHandlers.Writeonly.Implementation
  summary: Collection of data create request.
  example: []
  syntax:
    content: public Task<ResponseObj<ICollection<TEntity>>> CreateItemsAsync(ICollection<TEntity> items, CancellationToken? cancellationToken = null)
    parameters:
    - id: items
      type: System.Collections.Generic.ICollection{{TEntity}}
      description: Collection of data requested to create
    - id: cancellationToken
      type: System.Nullable{System.Threading.CancellationToken}
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{Quickie.DataObj.ResponseObj{System.Collections.Generic.ICollection{{TEntity}}}}
      description: ''
    content.vb: Public Function CreateItemsAsync(items As ICollection(Of TEntity), cancellationToken As CancellationToken? = Nothing) As Task(Of ResponseObj(Of ICollection(Of TEntity)))
  overload: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.CreateItemsAsync*
  implements:
  - Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler{{TEntity}}.CreateItemsAsync(System.Collections.Generic.ICollection{{TEntity}},System.Nullable{System.Threading.CancellationToken})
  nameWithType.vb: WriteOnlyDataHandler(Of TEntity, TDbContext).CreateItemsAsync(ICollection(Of TEntity), CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler(Of TEntity, TDbContext).CreateItemsAsync(System.Collections.Generic.ICollection(Of TEntity), System.Threading.CancellationToken?)
  name.vb: CreateItemsAsync(ICollection(Of TEntity), CancellationToken?)
references:
- uid: Quickie.DataHandlers.Writeonly.Implementation
  commentId: N:Quickie.DataHandlers.Writeonly.Implementation
  href: Quickie.html
  name: Quickie.DataHandlers.Writeonly.Implementation
  nameWithType: Quickie.DataHandlers.Writeonly.Implementation
  fullName: Quickie.DataHandlers.Writeonly.Implementation
  spec.csharp:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.DataHandlers
    name: DataHandlers
    href: Quickie.DataHandlers.html
  - name: .
  - uid: Quickie.DataHandlers.Writeonly
    name: Writeonly
    href: Quickie.DataHandlers.Writeonly.html
  - name: .
  - uid: Quickie.DataHandlers.Writeonly.Implementation
    name: Implementation
    href: Quickie.DataHandlers.Writeonly.Implementation.html
  spec.vb:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.DataHandlers
    name: DataHandlers
    href: Quickie.DataHandlers.html
  - name: .
  - uid: Quickie.DataHandlers.Writeonly
    name: Writeonly
    href: Quickie.DataHandlers.Writeonly.html
  - name: .
  - uid: Quickie.DataHandlers.Writeonly.Implementation
    name: Implementation
    href: Quickie.DataHandlers.Writeonly.Implementation.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler{{TEntity}}
  commentId: T:Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler{`0}
  parent: Quickie.DataHandlers.Writeonly.Definition
  definition: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1
  href: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html
  name: IWriteOnlyDataHandler<TEntity>
  nameWithType: IWriteOnlyDataHandler<TEntity>
  fullName: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler<TEntity>
  nameWithType.vb: IWriteOnlyDataHandler(Of TEntity)
  fullName.vb: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler(Of TEntity)
  name.vb: IWriteOnlyDataHandler(Of TEntity)
  spec.csharp:
  - uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1
    name: IWriteOnlyDataHandler
    href: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1
    name: IWriteOnlyDataHandler
    href: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1
  commentId: T:Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1
  href: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html
  name: IWriteOnlyDataHandler<TEntity>
  nameWithType: IWriteOnlyDataHandler<TEntity>
  fullName: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler<TEntity>
  nameWithType.vb: IWriteOnlyDataHandler(Of TEntity)
  fullName.vb: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler(Of TEntity)
  name.vb: IWriteOnlyDataHandler(Of TEntity)
  spec.csharp:
  - uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1
    name: IWriteOnlyDataHandler
    href: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1
    name: IWriteOnlyDataHandler
    href: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: Quickie.DataHandlers.Writeonly.Definition
  commentId: N:Quickie.DataHandlers.Writeonly.Definition
  href: Quickie.html
  name: Quickie.DataHandlers.Writeonly.Definition
  nameWithType: Quickie.DataHandlers.Writeonly.Definition
  fullName: Quickie.DataHandlers.Writeonly.Definition
  spec.csharp:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.DataHandlers
    name: DataHandlers
    href: Quickie.DataHandlers.html
  - name: .
  - uid: Quickie.DataHandlers.Writeonly
    name: Writeonly
    href: Quickie.DataHandlers.Writeonly.html
  - name: .
  - uid: Quickie.DataHandlers.Writeonly.Definition
    name: Definition
    href: Quickie.DataHandlers.Writeonly.Definition.html
  spec.vb:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.DataHandlers
    name: DataHandlers
    href: Quickie.DataHandlers.html
  - name: .
  - uid: Quickie.DataHandlers.Writeonly
    name: Writeonly
    href: Quickie.DataHandlers.Writeonly.html
  - name: .
  - uid: Quickie.DataHandlers.Writeonly.Definition
    name: Definition
    href: Quickie.DataHandlers.Writeonly.Definition.html
- uid: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.#ctor*
  commentId: Overload:Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.#ctor
  href: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler-2.html#Quickie_DataHandlers_Writeonly_Implementation_WriteOnlyDataHandler_2__ctor__1_
  name: WriteOnlyDataHandler
  nameWithType: WriteOnlyDataHandler<TEntity, TDbContext>.WriteOnlyDataHandler
  fullName: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler<TEntity, TDbContext>.WriteOnlyDataHandler
  nameWithType.vb: WriteOnlyDataHandler(Of TEntity, TDbContext).New
  fullName.vb: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler(Of TEntity, TDbContext).New
  name.vb: New
- uid: '{TDbContext}'
  commentId: '!:TDbContext'
  definition: TDbContext
  name: TDbContext
  nameWithType: TDbContext
  fullName: TDbContext
- uid: TDbContext
  name: TDbContext
  nameWithType: TDbContext
  fullName: TDbContext
- uid: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.CreateItemAsync*
  commentId: Overload:Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.CreateItemAsync
  href: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler-2.html#Quickie_DataHandlers_Writeonly_Implementation_WriteOnlyDataHandler_2_CreateItemAsync__0_System_Nullable_System_Threading_CancellationToken__
  name: CreateItemAsync
  nameWithType: WriteOnlyDataHandler<TEntity, TDbContext>.CreateItemAsync
  fullName: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler<TEntity, TDbContext>.CreateItemAsync
  nameWithType.vb: WriteOnlyDataHandler(Of TEntity, TDbContext).CreateItemAsync
  fullName.vb: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler(Of TEntity, TDbContext).CreateItemAsync
- uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler{{TEntity}}.CreateItemAsync({TEntity},System.Nullable{System.Threading.CancellationToken})
  commentId: M:Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler{`0}.CreateItemAsync(`0,System.Nullable{System.Threading.CancellationToken})
  parent: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler{{TEntity}}
  definition: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1.CreateItemAsync(`0,System.Nullable{System.Threading.CancellationToken})
  href: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html#Quickie_DataHandlers_Writeonly_Definition_IWriteOnlyDataHandler_1_CreateItemAsync__0_System_Nullable_System_Threading_CancellationToken__
  name: CreateItemAsync(TEntity, CancellationToken?)
  nameWithType: IWriteOnlyDataHandler<TEntity>.CreateItemAsync(TEntity, CancellationToken?)
  fullName: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler<TEntity>.CreateItemAsync(TEntity, System.Threading.CancellationToken?)
  nameWithType.vb: IWriteOnlyDataHandler(Of TEntity).CreateItemAsync(TEntity, CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler(Of TEntity).CreateItemAsync(TEntity, System.Threading.CancellationToken?)
  spec.csharp:
  - uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler{`0}.CreateItemAsync(`0,System.Nullable{System.Threading.CancellationToken})
    name: CreateItemAsync
    href: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html#Quickie_DataHandlers_Writeonly_Definition_IWriteOnlyDataHandler_1_CreateItemAsync__0_System_Nullable_System_Threading_CancellationToken__
  - name: (
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  - name: )
  spec.vb:
  - uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler{`0}.CreateItemAsync(`0,System.Nullable{System.Threading.CancellationToken})
    name: CreateItemAsync
    href: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html#Quickie_DataHandlers_Writeonly_Definition_IWriteOnlyDataHandler_1_CreateItemAsync__0_System_Nullable_System_Threading_CancellationToken__
  - name: (
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  - name: )
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: System.Nullable{System.Threading.CancellationToken}
  commentId: T:System.Nullable{System.Threading.CancellationToken}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken?
  nameWithType: CancellationToken?
  fullName: System.Threading.CancellationToken?
  spec.csharp:
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  spec.vb:
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
- uid: System.Threading.Tasks.Task{Quickie.DataObj.ResponseObj{{TEntity}}}
  commentId: T:System.Threading.Tasks.Task{Quickie.DataObj.ResponseObj{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ResponseObj<TEntity>>
  nameWithType: Task<ResponseObj<TEntity>>
  fullName: System.Threading.Tasks.Task<Quickie.DataObj.ResponseObj<TEntity>>
  nameWithType.vb: Task(Of ResponseObj(Of TEntity))
  fullName.vb: System.Threading.Tasks.Task(Of Quickie.DataObj.ResponseObj(Of TEntity))
  name.vb: Task(Of ResponseObj(Of TEntity))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Quickie.DataObj.ResponseObj`1
    name: ResponseObj
    href: Quickie.DataObj.ResponseObj-1.html
  - name: <
  - name: TEntity
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Quickie.DataObj.ResponseObj`1
    name: ResponseObj
    href: Quickie.DataObj.ResponseObj-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
  - name: )
- uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1.CreateItemAsync(`0,System.Nullable{System.Threading.CancellationToken})
  commentId: M:Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1.CreateItemAsync(`0,System.Nullable{System.Threading.CancellationToken})
  isExternal: true
  href: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html#Quickie_DataHandlers_Writeonly_Definition_IWriteOnlyDataHandler_1_CreateItemAsync__0_System_Nullable_System_Threading_CancellationToken__
  name: CreateItemAsync(TEntity, CancellationToken?)
  nameWithType: IWriteOnlyDataHandler<TEntity>.CreateItemAsync(TEntity, CancellationToken?)
  fullName: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler<TEntity>.CreateItemAsync(TEntity, System.Threading.CancellationToken?)
  nameWithType.vb: IWriteOnlyDataHandler(Of TEntity).CreateItemAsync(TEntity, CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler(Of TEntity).CreateItemAsync(TEntity, System.Threading.CancellationToken?)
  spec.csharp:
  - uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1.CreateItemAsync(`0,System.Nullable{System.Threading.CancellationToken})
    name: CreateItemAsync
    href: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html#Quickie_DataHandlers_Writeonly_Definition_IWriteOnlyDataHandler_1_CreateItemAsync__0_System_Nullable_System_Threading_CancellationToken__
  - name: (
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  - name: )
  spec.vb:
  - uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1.CreateItemAsync(`0,System.Nullable{System.Threading.CancellationToken})
    name: CreateItemAsync
    href: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html#Quickie_DataHandlers_Writeonly_Definition_IWriteOnlyDataHandler_1_CreateItemAsync__0_System_Nullable_System_Threading_CancellationToken__
  - name: (
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  - name: )
- uid: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.CreateItemsAsync*
  commentId: Overload:Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler`2.CreateItemsAsync
  href: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler-2.html#Quickie_DataHandlers_Writeonly_Implementation_WriteOnlyDataHandler_2_CreateItemsAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  name: CreateItemsAsync
  nameWithType: WriteOnlyDataHandler<TEntity, TDbContext>.CreateItemsAsync
  fullName: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler<TEntity, TDbContext>.CreateItemsAsync
  nameWithType.vb: WriteOnlyDataHandler(Of TEntity, TDbContext).CreateItemsAsync
  fullName.vb: Quickie.DataHandlers.Writeonly.Implementation.WriteOnlyDataHandler(Of TEntity, TDbContext).CreateItemsAsync
- uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler{{TEntity}}.CreateItemsAsync(System.Collections.Generic.ICollection{{TEntity}},System.Nullable{System.Threading.CancellationToken})
  commentId: M:Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler{`0}.CreateItemsAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  parent: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler{{TEntity}}
  definition: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1.CreateItemsAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  href: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html#Quickie_DataHandlers_Writeonly_Definition_IWriteOnlyDataHandler_1_CreateItemsAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  name: CreateItemsAsync(ICollection<TEntity>, CancellationToken?)
  nameWithType: IWriteOnlyDataHandler<TEntity>.CreateItemsAsync(ICollection<TEntity>, CancellationToken?)
  fullName: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler<TEntity>.CreateItemsAsync(System.Collections.Generic.ICollection<TEntity>, System.Threading.CancellationToken?)
  nameWithType.vb: IWriteOnlyDataHandler(Of TEntity).CreateItemsAsync(ICollection(Of TEntity), CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler(Of TEntity).CreateItemsAsync(System.Collections.Generic.ICollection(Of TEntity), System.Threading.CancellationToken?)
  name.vb: CreateItemsAsync(ICollection(Of TEntity), CancellationToken?)
  spec.csharp:
  - uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler{`0}.CreateItemsAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
    name: CreateItemsAsync
    href: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html#Quickie_DataHandlers_Writeonly_Definition_IWriteOnlyDataHandler_1_CreateItemsAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TEntity
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  - name: )
  spec.vb:
  - uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler{`0}.CreateItemsAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
    name: CreateItemsAsync
    href: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html#Quickie_DataHandlers_Writeonly_Definition_IWriteOnlyDataHandler_1_CreateItemsAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  - name: )
- uid: System.Collections.Generic.ICollection{{TEntity}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<TEntity>
  nameWithType: ICollection<TEntity>
  fullName: System.Collections.Generic.ICollection<TEntity>
  nameWithType.vb: ICollection(Of TEntity)
  fullName.vb: System.Collections.Generic.ICollection(Of TEntity)
  name.vb: ICollection(Of TEntity)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: System.Threading.Tasks.Task{Quickie.DataObj.ResponseObj{System.Collections.Generic.ICollection{{TEntity}}}}
  commentId: T:System.Threading.Tasks.Task{Quickie.DataObj.ResponseObj{System.Collections.Generic.ICollection{`0}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ResponseObj<ICollection<TEntity>>>
  nameWithType: Task<ResponseObj<ICollection<TEntity>>>
  fullName: System.Threading.Tasks.Task<Quickie.DataObj.ResponseObj<System.Collections.Generic.ICollection<TEntity>>>
  nameWithType.vb: Task(Of ResponseObj(Of ICollection(Of TEntity)))
  fullName.vb: System.Threading.Tasks.Task(Of Quickie.DataObj.ResponseObj(Of System.Collections.Generic.ICollection(Of TEntity)))
  name.vb: Task(Of ResponseObj(Of ICollection(Of TEntity)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Quickie.DataObj.ResponseObj`1
    name: ResponseObj
    href: Quickie.DataObj.ResponseObj-1.html
  - name: <
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TEntity
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Quickie.DataObj.ResponseObj`1
    name: ResponseObj
    href: Quickie.DataObj.ResponseObj-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
  - name: )
  - name: )
- uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1.CreateItemsAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  commentId: M:Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1.CreateItemsAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
  isExternal: true
  href: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html#Quickie_DataHandlers_Writeonly_Definition_IWriteOnlyDataHandler_1_CreateItemsAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  name: CreateItemsAsync(ICollection<TEntity>, CancellationToken?)
  nameWithType: IWriteOnlyDataHandler<TEntity>.CreateItemsAsync(ICollection<TEntity>, CancellationToken?)
  fullName: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler<TEntity>.CreateItemsAsync(System.Collections.Generic.ICollection<TEntity>, System.Threading.CancellationToken?)
  nameWithType.vb: IWriteOnlyDataHandler(Of TEntity).CreateItemsAsync(ICollection(Of TEntity), CancellationToken?)
  fullName.vb: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler(Of TEntity).CreateItemsAsync(System.Collections.Generic.ICollection(Of TEntity), System.Threading.CancellationToken?)
  name.vb: CreateItemsAsync(ICollection(Of TEntity), CancellationToken?)
  spec.csharp:
  - uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1.CreateItemsAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
    name: CreateItemsAsync
    href: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html#Quickie_DataHandlers_Writeonly_Definition_IWriteOnlyDataHandler_1_CreateItemsAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TEntity
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  - name: )
  spec.vb:
  - uid: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler`1.CreateItemsAsync(System.Collections.Generic.ICollection{`0},System.Nullable{System.Threading.CancellationToken})
    name: CreateItemsAsync
    href: Quickie.DataHandlers.Writeonly.Definition.IWriteOnlyDataHandler-1.html#Quickie_DataHandlers_Writeonly_Definition_IWriteOnlyDataHandler_1_CreateItemsAsync_System_Collections_Generic_ICollection__0__System_Nullable_System_Threading_CancellationToken__
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  - name: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
