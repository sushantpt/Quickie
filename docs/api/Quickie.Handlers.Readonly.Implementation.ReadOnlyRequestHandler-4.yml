### YamlMime:ManagedReference
items:
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4
  commentId: T:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4
  id: ReadOnlyRequestHandler`4
  parent: Quickie.Handlers.Readonly.Implementation
  children:
  - Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.#ctor(Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler{`1,`3})
  - Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.GetByIdAsync(`3,System.Nullable{System.Threading.CancellationToken})
  - Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.MapToDto(`1)
  langs:
  - csharp
  - vb
  name: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>
  type: Class
  source:
    remote:
      path: src/Quickie/Handlers/Readonly/Implementation/ReadOnlyRequestHandler.cs
      branch: master
      repo: https://github.com/sushantpt/Quickie.git
    id: ReadOnlyRequestHandler
    path: ../src/Quickie/Handlers/Readonly/Implementation/ReadOnlyRequestHandler.cs
    startLine: 9
  assemblies:
  - Quickie
  namespace: Quickie.Handlers.Readonly.Implementation
  summary: Abstract base class for handling read-only requests, processing operations for the specified view model type.
  example: []
  syntax:
    content: 'public abstract class ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType> : IReadOnlyRequestHandler<TViewModel, TIdType> where TViewModel : ReadOnlyDto where TEntity : ReadOnlyEntity where TDataHandler : IReadOnlyDataHandler<TEntity, TIdType> where TIdType : IComparable'
    typeParameters:
    - id: TViewModel
      description: The type of the view model that represents the data transfer object for read-only operations.
    - id: TEntity
      description: Entity.
    - id: TDataHandler
      description: Data handler (Repository)
    - id: TIdType
      description: 'Type of identifier. eg: int, string, ...'
    content.vb: Public MustInherit Class ReadOnlyRequestHandler(Of TViewModel As ReadOnlyDto, TEntity As ReadOnlyEntity, TDataHandler As IReadOnlyDataHandler(Of TEntity, TIdType), TIdType As IComparable) Implements IReadOnlyRequestHandler(Of TViewModel, TIdType)
  inheritance:
  - System.Object
  derivedClasses:
  - specification.Helpers.RequestHandlers.ReadOnlyRequestHandlerConcrete
  implements:
  - Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler{{TViewModel},{TIdType}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType)
  name.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType)
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.#ctor(Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler{`1,`3})
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.#ctor(Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler{`1,`3})
  id: '#ctor(Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler{`1,`3})'
  parent: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4
  langs:
  - csharp
  - vb
  name: ReadOnlyRequestHandler(IReadOnlyDataHandler<TEntity, TIdType>)
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.ReadOnlyRequestHandler(IReadOnlyDataHandler<TEntity, TIdType>)
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.ReadOnlyRequestHandler(Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler<TEntity, TIdType>)
  type: Constructor
  source:
    remote:
      path: src/Quickie/Handlers/Readonly/Implementation/ReadOnlyRequestHandler.cs
      branch: master
      repo: https://github.com/sushantpt/Quickie.git
    id: .ctor
    path: ../src/Quickie/Handlers/Readonly/Implementation/ReadOnlyRequestHandler.cs
    startLine: 9
  assemblies:
  - Quickie
  namespace: Quickie.Handlers.Readonly.Implementation
  summary: Abstract base class for handling read-only requests, processing operations for the specified view model type.
  example: []
  syntax:
    content: protected ReadOnlyRequestHandler(IReadOnlyDataHandler<TEntity, TIdType> dataHandler)
    parameters:
    - id: dataHandler
      type: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler{{TEntity},{TIdType}}
    content.vb: Protected Sub New(dataHandler As IReadOnlyDataHandler(Of TEntity, TIdType))
  overload: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.#ctor*
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New(IReadOnlyDataHandler(Of TEntity, TIdType))
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New(Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler(Of TEntity, TIdType))
  name.vb: New(IReadOnlyDataHandler(Of TEntity, TIdType))
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.GetByIdAsync(`3,System.Nullable{System.Threading.CancellationToken})
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.GetByIdAsync(`3,System.Nullable{System.Threading.CancellationToken})
  id: GetByIdAsync(`3,System.Nullable{System.Threading.CancellationToken})
  parent: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4
  langs:
  - csharp
  - vb
  name: GetByIdAsync(TIdType, CancellationToken?)
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.GetByIdAsync(TIdType, CancellationToken?)
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: src/Quickie/Handlers/Readonly/Implementation/ReadOnlyRequestHandler.cs
      branch: master
      repo: https://github.com/sushantpt/Quickie.git
    id: GetByIdAsync
    path: ../src/Quickie/Handlers/Readonly/Implementation/ReadOnlyRequestHandler.cs
    startLine: 18
  assemblies:
  - Quickie
  namespace: Quickie.Handlers.Readonly.Implementation
  summary: Get data by id.
  example: []
  syntax:
    content: public Task<ResponseObj<TViewModel>> GetByIdAsync(TIdType id, CancellationToken? cancellationToken = null)
    parameters:
    - id: id
      type: '{TIdType}'
      description: Identifier (unique key identifying your entity)
    - id: cancellationToken
      type: System.Nullable{System.Threading.CancellationToken}
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{Quickie.DataObj.ResponseObj{{TViewModel}}}
      description: ''
    content.vb: Public Function GetByIdAsync(id As TIdType, cancellationToken As CancellationToken? = Nothing) As Task(Of ResponseObj(Of TViewModel))
  overload: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.GetByIdAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: ''
  implements:
  - Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler{{TViewModel},{TIdType}}.GetByIdAsync({TIdType},System.Nullable{System.Threading.CancellationToken})
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).GetByIdAsync(TIdType, CancellationToken?)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).GetByIdAsync(TIdType, System.Threading.CancellationToken?)
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.MapToDto(`1)
  commentId: M:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.MapToDto(`1)
  id: MapToDto(`1)
  parent: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4
  langs:
  - csharp
  - vb
  name: MapToDto(TEntity)
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToDto(TEntity)
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToDto(TEntity)
  type: Method
  source:
    remote:
      path: src/Quickie/Handlers/Readonly/Implementation/ReadOnlyRequestHandler.cs
      branch: master
      repo: https://github.com/sushantpt/Quickie.git
    id: MapToDto
    path: ../src/Quickie/Handlers/Readonly/Implementation/ReadOnlyRequestHandler.cs
    startLine: 47
  assemblies:
  - Quickie
  namespace: Quickie.Handlers.Readonly.Implementation
  summary: Mapping profile. Map from Entity type to your data transfer object.
  example: []
  syntax:
    content: protected abstract TViewModel MapToDto(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
      description: Entity object.
    return:
      type: '{TViewModel}'
      description: Mapped from Entity, a data transfer object.
    content.vb: Protected MustOverride Function MapToDto(entity As TEntity) As TViewModel
  overload: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.MapToDto*
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToDto(TEntity)
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToDto(TEntity)
references:
- uid: Quickie.Handlers.Readonly.Implementation
  commentId: N:Quickie.Handlers.Readonly.Implementation
  href: Quickie.html
  name: Quickie.Handlers.Readonly.Implementation
  nameWithType: Quickie.Handlers.Readonly.Implementation
  fullName: Quickie.Handlers.Readonly.Implementation
  spec.csharp:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.Handlers
    name: Handlers
    href: Quickie.Handlers.html
  - name: .
  - uid: Quickie.Handlers.Readonly
    name: Readonly
    href: Quickie.Handlers.Readonly.html
  - name: .
  - uid: Quickie.Handlers.Readonly.Implementation
    name: Implementation
    href: Quickie.Handlers.Readonly.Implementation.html
  spec.vb:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.Handlers
    name: Handlers
    href: Quickie.Handlers.html
  - name: .
  - uid: Quickie.Handlers.Readonly
    name: Readonly
    href: Quickie.Handlers.Readonly.html
  - name: .
  - uid: Quickie.Handlers.Readonly.Implementation
    name: Implementation
    href: Quickie.Handlers.Readonly.Implementation.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler{{TViewModel},{TIdType}}
  commentId: T:Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler{`0,`3}
  parent: Quickie.Handlers.Readonly.Definition
  definition: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`2
  href: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-2.html
  name: IReadOnlyRequestHandler<TViewModel, TIdType>
  nameWithType: IReadOnlyRequestHandler<TViewModel, TIdType>
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler<TViewModel, TIdType>
  nameWithType.vb: IReadOnlyRequestHandler(Of TViewModel, TIdType)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler(Of TViewModel, TIdType)
  name.vb: IReadOnlyRequestHandler(Of TViewModel, TIdType)
  spec.csharp:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`2
    name: IReadOnlyRequestHandler
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-2.html
  - name: <
  - name: TViewModel
  - name: ','
  - name: " "
  - name: TIdType
  - name: '>'
  spec.vb:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`2
    name: IReadOnlyRequestHandler
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TViewModel
  - name: ','
  - name: " "
  - name: TIdType
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`2
  commentId: T:Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`2
  href: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-2.html
  name: IReadOnlyRequestHandler<TViewModel, TIdType>
  nameWithType: IReadOnlyRequestHandler<TViewModel, TIdType>
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler<TViewModel, TIdType>
  nameWithType.vb: IReadOnlyRequestHandler(Of TViewModel, TIdType)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler(Of TViewModel, TIdType)
  name.vb: IReadOnlyRequestHandler(Of TViewModel, TIdType)
  spec.csharp:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`2
    name: IReadOnlyRequestHandler
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-2.html
  - name: <
  - name: TViewModel
  - name: ','
  - name: " "
  - name: TIdType
  - name: '>'
  spec.vb:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`2
    name: IReadOnlyRequestHandler
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TViewModel
  - name: ','
  - name: " "
  - name: TIdType
  - name: )
- uid: Quickie.Handlers.Readonly.Definition
  commentId: N:Quickie.Handlers.Readonly.Definition
  href: Quickie.html
  name: Quickie.Handlers.Readonly.Definition
  nameWithType: Quickie.Handlers.Readonly.Definition
  fullName: Quickie.Handlers.Readonly.Definition
  spec.csharp:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.Handlers
    name: Handlers
    href: Quickie.Handlers.html
  - name: .
  - uid: Quickie.Handlers.Readonly
    name: Readonly
    href: Quickie.Handlers.Readonly.html
  - name: .
  - uid: Quickie.Handlers.Readonly.Definition
    name: Definition
    href: Quickie.Handlers.Readonly.Definition.html
  spec.vb:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.Handlers
    name: Handlers
    href: Quickie.Handlers.html
  - name: .
  - uid: Quickie.Handlers.Readonly
    name: Readonly
    href: Quickie.Handlers.Readonly.html
  - name: .
  - uid: Quickie.Handlers.Readonly.Definition
    name: Definition
    href: Quickie.Handlers.Readonly.Definition.html
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.#ctor*
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.#ctor
  href: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-4.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyRequestHandler_4__ctor_Quickie_DataHandlers_Readonly_Definition_IReadOnlyDataHandler__1__3__
  name: ReadOnlyRequestHandler
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.ReadOnlyRequestHandler
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.ReadOnlyRequestHandler
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).New
  name.vb: New
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler{{TEntity},{TIdType}}
  commentId: T:Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler{`0,`2}
  parent: Quickie.DataHandlers.Readonly.Definition
  definition: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2
  href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html
  name: IReadOnlyDataHandler<TEntity, TIdType>
  nameWithType: IReadOnlyDataHandler<TEntity, TIdType>
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler<TEntity, TIdType>
  nameWithType.vb: IReadOnlyDataHandler(Of TEntity, TIdType)
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler(Of TEntity, TIdType)
  name.vb: IReadOnlyDataHandler(Of TEntity, TIdType)
  spec.csharp:
  - uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2
    name: IReadOnlyDataHandler
    href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - name: TIdType
  - name: '>'
  spec.vb:
  - uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2
    name: IReadOnlyDataHandler
    href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - name: TIdType
  - name: )
- uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2
  commentId: T:Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2
  href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html
  name: IReadOnlyDataHandler<TEntity, TIdType>
  nameWithType: IReadOnlyDataHandler<TEntity, TIdType>
  fullName: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler<TEntity, TIdType>
  nameWithType.vb: IReadOnlyDataHandler(Of TEntity, TIdType)
  fullName.vb: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler(Of TEntity, TIdType)
  name.vb: IReadOnlyDataHandler(Of TEntity, TIdType)
  spec.csharp:
  - uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2
    name: IReadOnlyDataHandler
    href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - name: TIdType
  - name: '>'
  spec.vb:
  - uid: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler`2
    name: IReadOnlyDataHandler
    href: Quickie.DataHandlers.Readonly.Definition.IReadOnlyDataHandler-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - name: TIdType
  - name: )
- uid: Quickie.DataHandlers.Readonly.Definition
  commentId: N:Quickie.DataHandlers.Readonly.Definition
  href: Quickie.html
  name: Quickie.DataHandlers.Readonly.Definition
  nameWithType: Quickie.DataHandlers.Readonly.Definition
  fullName: Quickie.DataHandlers.Readonly.Definition
  spec.csharp:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.DataHandlers
    name: DataHandlers
    href: Quickie.DataHandlers.html
  - name: .
  - uid: Quickie.DataHandlers.Readonly
    name: Readonly
    href: Quickie.DataHandlers.Readonly.html
  - name: .
  - uid: Quickie.DataHandlers.Readonly.Definition
    name: Definition
    href: Quickie.DataHandlers.Readonly.Definition.html
  spec.vb:
  - uid: Quickie
    name: Quickie
    href: Quickie.html
  - name: .
  - uid: Quickie.DataHandlers
    name: DataHandlers
    href: Quickie.DataHandlers.html
  - name: .
  - uid: Quickie.DataHandlers.Readonly
    name: Readonly
    href: Quickie.DataHandlers.Readonly.html
  - name: .
  - uid: Quickie.DataHandlers.Readonly.Definition
    name: Definition
    href: Quickie.DataHandlers.Readonly.Definition.html
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.GetByIdAsync*
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.GetByIdAsync
  href: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-4.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyRequestHandler_4_GetByIdAsync__3_System_Nullable_System_Threading_CancellationToken__
  name: GetByIdAsync
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.GetByIdAsync
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.GetByIdAsync
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).GetByIdAsync
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).GetByIdAsync
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler{{TViewModel},{TIdType}}.GetByIdAsync({TIdType},System.Nullable{System.Threading.CancellationToken})
  commentId: M:Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler{`0,`3}.GetByIdAsync(`3,System.Nullable{System.Threading.CancellationToken})
  parent: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler{{TViewModel},{TIdType}}
  definition: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`2.GetByIdAsync(`1,System.Nullable{System.Threading.CancellationToken})
  href: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-2.html#Quickie_Handlers_Readonly_Definition_IReadOnlyRequestHandler_2_GetByIdAsync__1_System_Nullable_System_Threading_CancellationToken__
  name: GetByIdAsync(TIdType, CancellationToken?)
  nameWithType: IReadOnlyRequestHandler<TViewModel, TIdType>.GetByIdAsync(TIdType, CancellationToken?)
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler<TViewModel, TIdType>.GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  nameWithType.vb: IReadOnlyRequestHandler(Of TViewModel, TIdType).GetByIdAsync(TIdType, CancellationToken?)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler(Of TViewModel, TIdType).GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  spec.csharp:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler{`0,`3}.GetByIdAsync(`3,System.Nullable{System.Threading.CancellationToken})
    name: GetByIdAsync
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-2.html#Quickie_Handlers_Readonly_Definition_IReadOnlyRequestHandler_2_GetByIdAsync__1_System_Nullable_System_Threading_CancellationToken__
  - name: (
  - name: TIdType
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  - name: )
  spec.vb:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler{`0,`3}.GetByIdAsync(`3,System.Nullable{System.Threading.CancellationToken})
    name: GetByIdAsync
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-2.html#Quickie_Handlers_Readonly_Definition_IReadOnlyRequestHandler_2_GetByIdAsync__1_System_Nullable_System_Threading_CancellationToken__
  - name: (
  - name: TIdType
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  - name: )
- uid: '{TIdType}'
  commentId: '!:TIdType'
  definition: TIdType
  name: TIdType
  nameWithType: TIdType
  fullName: TIdType
- uid: System.Nullable{System.Threading.CancellationToken}
  commentId: T:System.Nullable{System.Threading.CancellationToken}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken?
  nameWithType: CancellationToken?
  fullName: System.Threading.CancellationToken?
  spec.csharp:
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  spec.vb:
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
- uid: System.Threading.Tasks.Task{Quickie.DataObj.ResponseObj{{TViewModel}}}
  commentId: T:System.Threading.Tasks.Task{Quickie.DataObj.ResponseObj{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<ResponseObj<TViewModel>>
  nameWithType: Task<ResponseObj<TViewModel>>
  fullName: System.Threading.Tasks.Task<Quickie.DataObj.ResponseObj<TViewModel>>
  nameWithType.vb: Task(Of ResponseObj(Of TViewModel))
  fullName.vb: System.Threading.Tasks.Task(Of Quickie.DataObj.ResponseObj(Of TViewModel))
  name.vb: Task(Of ResponseObj(Of TViewModel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Quickie.DataObj.ResponseObj`1
    name: ResponseObj
    href: Quickie.DataObj.ResponseObj-1.html
  - name: <
  - name: TViewModel
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Quickie.DataObj.ResponseObj`1
    name: ResponseObj
    href: Quickie.DataObj.ResponseObj-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TViewModel
  - name: )
  - name: )
- uid: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`2.GetByIdAsync(`1,System.Nullable{System.Threading.CancellationToken})
  commentId: M:Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`2.GetByIdAsync(`1,System.Nullable{System.Threading.CancellationToken})
  isExternal: true
  href: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-2.html#Quickie_Handlers_Readonly_Definition_IReadOnlyRequestHandler_2_GetByIdAsync__1_System_Nullable_System_Threading_CancellationToken__
  name: GetByIdAsync(TIdType, CancellationToken?)
  nameWithType: IReadOnlyRequestHandler<TViewModel, TIdType>.GetByIdAsync(TIdType, CancellationToken?)
  fullName: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler<TViewModel, TIdType>.GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  nameWithType.vb: IReadOnlyRequestHandler(Of TViewModel, TIdType).GetByIdAsync(TIdType, CancellationToken?)
  fullName.vb: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler(Of TViewModel, TIdType).GetByIdAsync(TIdType, System.Threading.CancellationToken?)
  spec.csharp:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`2.GetByIdAsync(`1,System.Nullable{System.Threading.CancellationToken})
    name: GetByIdAsync
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-2.html#Quickie_Handlers_Readonly_Definition_IReadOnlyRequestHandler_2_GetByIdAsync__1_System_Nullable_System_Threading_CancellationToken__
  - name: (
  - name: TIdType
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  - name: )
  spec.vb:
  - uid: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler`2.GetByIdAsync(`1,System.Nullable{System.Threading.CancellationToken})
    name: GetByIdAsync
    href: Quickie.Handlers.Readonly.Definition.IReadOnlyRequestHandler-2.html#Quickie_Handlers_Readonly_Definition_IReadOnlyRequestHandler_2_GetByIdAsync__1_System_Nullable_System_Threading_CancellationToken__
  - name: (
  - name: TIdType
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  - name: )
- uid: TIdType
  name: TIdType
  nameWithType: TIdType
  fullName: TIdType
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.MapToDto*
  commentId: Overload:Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler`4.MapToDto
  href: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler-4.html#Quickie_Handlers_Readonly_Implementation_ReadOnlyRequestHandler_4_MapToDto__1_
  name: MapToDto
  nameWithType: ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToDto
  fullName: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler<TViewModel, TEntity, TDataHandler, TIdType>.MapToDto
  nameWithType.vb: ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToDto
  fullName.vb: Quickie.Handlers.Readonly.Implementation.ReadOnlyRequestHandler(Of TViewModel, TEntity, TDataHandler, TIdType).MapToDto
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: '{TViewModel}'
  commentId: '!:TViewModel'
  definition: TViewModel
  name: TViewModel
  nameWithType: TViewModel
  fullName: TViewModel
- uid: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: TViewModel
  name: TViewModel
  nameWithType: TViewModel
  fullName: TViewModel
